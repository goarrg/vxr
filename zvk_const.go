// go run vk_gen.go
// Code generated by the command above; DO NOT EDIT.

package vxr

/*
	#cgo pkg-config: vxr

	#include "vxr/vxr.h"
*/
import "C"
import (
	"strings"

	"goarrg.com/gmath"
)

func vkResultStr(v C.VkResult) string {
	switch v {
	case 0:
		return "SUCCESS"
	case 1:
		return "NOT_READY"
	case 2:
		return "TIMEOUT"
	case 3:
		return "EVENT_SET"
	case 4:
		return "EVENT_RESET"
	case 5:
		return "INCOMPLETE"
	case -1:
		return "ERROR_OUT_OF_HOST_MEMORY"
	case -2:
		return "ERROR_OUT_OF_DEVICE_MEMORY"
	case -3:
		return "ERROR_INITIALIZATION_FAILED"
	case -4:
		return "ERROR_DEVICE_LOST"
	case -5:
		return "ERROR_MEMORY_MAP_FAILED"
	case -6:
		return "ERROR_LAYER_NOT_PRESENT"
	case -7:
		return "ERROR_EXTENSION_NOT_PRESENT"
	case -8:
		return "ERROR_FEATURE_NOT_PRESENT"
	case -9:
		return "ERROR_INCOMPATIBLE_DRIVER"
	case -10:
		return "ERROR_TOO_MANY_OBJECTS"
	case -11:
		return "ERROR_FORMAT_NOT_SUPPORTED"
	case -12:
		return "ERROR_FRAGMENTED_POOL"
	case -13:
		return "ERROR_UNKNOWN"
	case -1000069000:
		return "ERROR_OUT_OF_POOL_MEMORY"
	case -1000072003:
		return "ERROR_INVALID_EXTERNAL_HANDLE"
	case -1000161000:
		return "ERROR_FRAGMENTATION"
	case -1000257000:
		return "ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS"
	case 1000297000:
		return "PIPELINE_COMPILE_REQUIRED"
	case -1000174001:
		return "ERROR_NOT_PERMITTED"
	case -1000000000:
		return "ERROR_SURFACE_LOST_KHR"
	case -1000000001:
		return "ERROR_NATIVE_WINDOW_IN_USE_KHR"
	case 1000001003:
		return "SUBOPTIMAL_KHR"
	case -1000001004:
		return "ERROR_OUT_OF_DATE_KHR"
	case -1000003001:
		return "ERROR_INCOMPATIBLE_DISPLAY_KHR"
	case -1000011001:
		return "ERROR_VALIDATION_FAILED_EXT"
	case -1000012000:
		return "ERROR_INVALID_SHADER_NV"
	case -1000023000:
		return "ERROR_IMAGE_USAGE_NOT_SUPPORTED_KHR"
	case -1000023001:
		return "ERROR_VIDEO_PICTURE_LAYOUT_NOT_SUPPORTED_KHR"
	case -1000023002:
		return "ERROR_VIDEO_PROFILE_OPERATION_NOT_SUPPORTED_KHR"
	case -1000023003:
		return "ERROR_VIDEO_PROFILE_FORMAT_NOT_SUPPORTED_KHR"
	case -1000023004:
		return "ERROR_VIDEO_PROFILE_CODEC_NOT_SUPPORTED_KHR"
	case -1000023005:
		return "ERROR_VIDEO_STD_VERSION_NOT_SUPPORTED_KHR"
	case -1000158000:
		return "ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT"
	case -1000255000:
		return "ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT"
	case 1000268000:
		return "THREAD_IDLE_KHR"
	case 1000268001:
		return "THREAD_DONE_KHR"
	case 1000268002:
		return "OPERATION_DEFERRED_KHR"
	case 1000268003:
		return "OPERATION_NOT_DEFERRED_KHR"
	case -1000299000:
		return "ERROR_INVALID_VIDEO_STD_PARAMETERS_KHR"
	case -1000338000:
		return "ERROR_COMPRESSION_EXHAUSTED_EXT"
	case 1000482000:
		return "INCOMPATIBLE_SHADER_BINARY_EXT"
	case 1000483000:
		return "PIPELINE_BINARY_MISSING_KHR"
	case -1000483000:
		return "ERROR_NOT_ENOUGH_SPACE_KHR"
	}
	abort("Unknown VkResult: %d", v)
	return ""
}

type FormatFeatureFlags C.VkFormatFeatureFlags2
const(
FORMAT_FEATURE_SAMPLED_IMAGE FormatFeatureFlags = 0x00000001
FORMAT_FEATURE_STORAGE_IMAGE FormatFeatureFlags = 0x00000002
FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC FormatFeatureFlags = 0x00000004
FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER FormatFeatureFlags = 0x00000008
FORMAT_FEATURE_STORAGE_TEXEL_BUFFER FormatFeatureFlags = 0x00000010
FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC FormatFeatureFlags = 0x00000020
FORMAT_FEATURE_VERTEX_BUFFER FormatFeatureFlags = 0x00000040
FORMAT_FEATURE_COLOR_ATTACHMENT FormatFeatureFlags = 0x00000080
FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND FormatFeatureFlags = 0x00000100
FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT FormatFeatureFlags = 0x00000200
FORMAT_FEATURE_BLIT_SRC FormatFeatureFlags = 0x00000400
FORMAT_FEATURE_BLIT_DST FormatFeatureFlags = 0x00000800
FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR FormatFeatureFlags = 0x00001000
FORMAT_FEATURE_TRANSFER_SRC FormatFeatureFlags = 0x00004000
FORMAT_FEATURE_TRANSFER_DST FormatFeatureFlags = 0x00008000
FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX FormatFeatureFlags = 0x00010000
FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES FormatFeatureFlags = 0x00020000
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER FormatFeatureFlags = 0x00040000
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER FormatFeatureFlags = 0x00080000
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT FormatFeatureFlags = 0x00100000
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE FormatFeatureFlags = 0x00200000
FORMAT_FEATURE_DISJOINT FormatFeatureFlags = 0x00400000
FORMAT_FEATURE_COSITED_CHROMA_SAMPLES FormatFeatureFlags = 0x00800000
FORMAT_FEATURE_STORAGE_READ_WITHOUT_FORMAT FormatFeatureFlags = 0x80000000
FORMAT_FEATURE_STORAGE_WRITE_WITHOUT_FORMAT FormatFeatureFlags = 0x100000000
FORMAT_FEATURE_SAMPLED_IMAGE_DEPTH_COMPARISON FormatFeatureFlags = 0x200000000
FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC FormatFeatureFlags = 0x00002000
FORMAT_FEATURE_HOST_IMAGE_TRANSFER FormatFeatureFlags = 0x400000000000
FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_KHR FormatFeatureFlags = 0x02000000
FORMAT_FEATURE_VIDEO_DECODE_DPB_KHR FormatFeatureFlags = 0x04000000
FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR FormatFeatureFlags = 0x20000000
FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_EXT FormatFeatureFlags = 0x01000000
FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR FormatFeatureFlags = 0x40000000
FORMAT_FEATURE_HOST_IMAGE_TRANSFER_EXT FormatFeatureFlags = FORMAT_FEATURE_HOST_IMAGE_TRANSFER
FORMAT_FEATURE_VIDEO_ENCODE_INPUT_KHR FormatFeatureFlags = 0x08000000
FORMAT_FEATURE_VIDEO_ENCODE_DPB_KHR FormatFeatureFlags = 0x10000000
FORMAT_FEATURE_SAMPLED_IMAGE_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE
FORMAT_FEATURE_STORAGE_IMAGE_KHR FormatFeatureFlags = FORMAT_FEATURE_STORAGE_IMAGE
FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_KHR FormatFeatureFlags = FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC
FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_KHR FormatFeatureFlags = FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER
FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_KHR FormatFeatureFlags = FORMAT_FEATURE_STORAGE_TEXEL_BUFFER
FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_KHR FormatFeatureFlags = FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC
FORMAT_FEATURE_VERTEX_BUFFER_KHR FormatFeatureFlags = FORMAT_FEATURE_VERTEX_BUFFER
FORMAT_FEATURE_COLOR_ATTACHMENT_KHR FormatFeatureFlags = FORMAT_FEATURE_COLOR_ATTACHMENT
FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_KHR FormatFeatureFlags = FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND
FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_KHR FormatFeatureFlags = FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT
FORMAT_FEATURE_BLIT_SRC_KHR FormatFeatureFlags = FORMAT_FEATURE_BLIT_SRC
FORMAT_FEATURE_BLIT_DST_KHR FormatFeatureFlags = FORMAT_FEATURE_BLIT_DST
FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR
FORMAT_FEATURE_TRANSFER_SRC_KHR FormatFeatureFlags = FORMAT_FEATURE_TRANSFER_SRC
FORMAT_FEATURE_TRANSFER_DST_KHR FormatFeatureFlags = FORMAT_FEATURE_TRANSFER_DST
FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_KHR FormatFeatureFlags = FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT
FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE
FORMAT_FEATURE_DISJOINT_KHR FormatFeatureFlags = FORMAT_FEATURE_DISJOINT
FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_KHR FormatFeatureFlags = FORMAT_FEATURE_COSITED_CHROMA_SAMPLES
FORMAT_FEATURE_STORAGE_READ_WITHOUT_FORMAT_KHR FormatFeatureFlags = FORMAT_FEATURE_STORAGE_READ_WITHOUT_FORMAT
FORMAT_FEATURE_STORAGE_WRITE_WITHOUT_FORMAT_KHR FormatFeatureFlags = FORMAT_FEATURE_STORAGE_WRITE_WITHOUT_FORMAT
FORMAT_FEATURE_SAMPLED_IMAGE_DEPTH_COMPARISON_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_DEPTH_COMPARISON
FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_KHR FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX
FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_EXT FormatFeatureFlags = FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC
FORMAT_FEATURE_ACCELERATION_STRUCTURE_RADIUS_BUFFER_NV FormatFeatureFlags = 0x8000000000000
FORMAT_FEATURE_LINEAR_COLOR_ATTACHMENT_NV FormatFeatureFlags = 0x4000000000
FORMAT_FEATURE_WEIGHT_IMAGE_QCOM FormatFeatureFlags = 0x400000000
FORMAT_FEATURE_WEIGHT_SAMPLED_IMAGE_QCOM FormatFeatureFlags = 0x800000000
FORMAT_FEATURE_BLOCK_MATCHING_QCOM FormatFeatureFlags = 0x1000000000
FORMAT_FEATURE_BOX_FILTER_SAMPLED_QCOM FormatFeatureFlags = 0x2000000000
FORMAT_FEATURE_OPTICAL_FLOW_IMAGE_NV FormatFeatureFlags = 0x10000000000
FORMAT_FEATURE_OPTICAL_FLOW_VECTOR_NV FormatFeatureFlags = 0x20000000000
FORMAT_FEATURE_OPTICAL_FLOW_COST_NV FormatFeatureFlags = 0x40000000000
FORMAT_FEATURE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_KHR FormatFeatureFlags = 0x2000000000000
FORMAT_FEATURE_VIDEO_ENCODE_EMPHASIS_MAP_KHR FormatFeatureFlags = 0x4000000000000
)

func (v FormatFeatureFlags) HasBits(want FormatFeatureFlags) bool {
	return (v & want) == want
}

func (v FormatFeatureFlags) String() string {
	str := ""
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE) {
		str += "SAMPLED_IMAGE|"
	}
	if v.HasBits(FORMAT_FEATURE_STORAGE_IMAGE) {
		str += "STORAGE_IMAGE|"
	}
	if v.HasBits(FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC) {
		str += "STORAGE_IMAGE_ATOMIC|"
	}
	if v.HasBits(FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER) {
		str += "UNIFORM_TEXEL_BUFFER|"
	}
	if v.HasBits(FORMAT_FEATURE_STORAGE_TEXEL_BUFFER) {
		str += "STORAGE_TEXEL_BUFFER|"
	}
	if v.HasBits(FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC) {
		str += "STORAGE_TEXEL_BUFFER_ATOMIC|"
	}
	if v.HasBits(FORMAT_FEATURE_VERTEX_BUFFER) {
		str += "VERTEX_BUFFER|"
	}
	if v.HasBits(FORMAT_FEATURE_COLOR_ATTACHMENT) {
		str += "COLOR_ATTACHMENT|"
	}
	if v.HasBits(FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND) {
		str += "COLOR_ATTACHMENT_BLEND|"
	}
	if v.HasBits(FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT) {
		str += "DEPTH_STENCIL_ATTACHMENT|"
	}
	if v.HasBits(FORMAT_FEATURE_BLIT_SRC) {
		str += "BLIT_SRC|"
	}
	if v.HasBits(FORMAT_FEATURE_BLIT_DST) {
		str += "BLIT_DST|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR) {
		str += "SAMPLED_IMAGE_FILTER_LINEAR|"
	}
	if v.HasBits(FORMAT_FEATURE_TRANSFER_SRC) {
		str += "TRANSFER_SRC|"
	}
	if v.HasBits(FORMAT_FEATURE_TRANSFER_DST) {
		str += "TRANSFER_DST|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX) {
		str += "SAMPLED_IMAGE_FILTER_MINMAX|"
	}
	if v.HasBits(FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES) {
		str += "MIDPOINT_CHROMA_SAMPLES|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER) {
		str += "SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER) {
		str += "SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT) {
		str += "SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE) {
		str += "SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE|"
	}
	if v.HasBits(FORMAT_FEATURE_DISJOINT) {
		str += "DISJOINT|"
	}
	if v.HasBits(FORMAT_FEATURE_COSITED_CHROMA_SAMPLES) {
		str += "COSITED_CHROMA_SAMPLES|"
	}
	if v.HasBits(FORMAT_FEATURE_STORAGE_READ_WITHOUT_FORMAT) {
		str += "STORAGE_READ_WITHOUT_FORMAT|"
	}
	if v.HasBits(FORMAT_FEATURE_STORAGE_WRITE_WITHOUT_FORMAT) {
		str += "STORAGE_WRITE_WITHOUT_FORMAT|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_DEPTH_COMPARISON) {
		str += "SAMPLED_IMAGE_DEPTH_COMPARISON|"
	}
	if v.HasBits(FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC) {
		str += "SAMPLED_IMAGE_FILTER_CUBIC|"
	}
	if v.HasBits(FORMAT_FEATURE_HOST_IMAGE_TRANSFER) {
		str += "HOST_IMAGE_TRANSFER|"
	}
	if v.HasBits(FORMAT_FEATURE_VIDEO_DECODE_OUTPUT_KHR) {
		str += "VIDEO_DECODE_OUTPUT_KHR|"
	}
	if v.HasBits(FORMAT_FEATURE_VIDEO_DECODE_DPB_KHR) {
		str += "VIDEO_DECODE_DPB_KHR|"
	}
	if v.HasBits(FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR) {
		str += "ACCELERATION_STRUCTURE_VERTEX_BUFFER_KHR|"
	}
	if v.HasBits(FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_EXT) {
		str += "FRAGMENT_DENSITY_MAP_EXT|"
	}
	if v.HasBits(FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_KHR) {
		str += "FRAGMENT_SHADING_RATE_ATTACHMENT_KHR|"
	}
	if v.HasBits(FORMAT_FEATURE_VIDEO_ENCODE_INPUT_KHR) {
		str += "VIDEO_ENCODE_INPUT_KHR|"
	}
	if v.HasBits(FORMAT_FEATURE_VIDEO_ENCODE_DPB_KHR) {
		str += "VIDEO_ENCODE_DPB_KHR|"
	}
	if v.HasBits(FORMAT_FEATURE_ACCELERATION_STRUCTURE_RADIUS_BUFFER_NV) {
		str += "ACCELERATION_STRUCTURE_RADIUS_BUFFER_NV|"
	}
	if v.HasBits(FORMAT_FEATURE_LINEAR_COLOR_ATTACHMENT_NV) {
		str += "LINEAR_COLOR_ATTACHMENT_NV|"
	}
	if v.HasBits(FORMAT_FEATURE_WEIGHT_IMAGE_QCOM) {
		str += "WEIGHT_IMAGE_QCOM|"
	}
	if v.HasBits(FORMAT_FEATURE_WEIGHT_SAMPLED_IMAGE_QCOM) {
		str += "WEIGHT_SAMPLED_IMAGE_QCOM|"
	}
	if v.HasBits(FORMAT_FEATURE_BLOCK_MATCHING_QCOM) {
		str += "BLOCK_MATCHING_QCOM|"
	}
	if v.HasBits(FORMAT_FEATURE_BOX_FILTER_SAMPLED_QCOM) {
		str += "BOX_FILTER_SAMPLED_QCOM|"
	}
	if v.HasBits(FORMAT_FEATURE_OPTICAL_FLOW_IMAGE_NV) {
		str += "OPTICAL_FLOW_IMAGE_NV|"
	}
	if v.HasBits(FORMAT_FEATURE_OPTICAL_FLOW_VECTOR_NV) {
		str += "OPTICAL_FLOW_VECTOR_NV|"
	}
	if v.HasBits(FORMAT_FEATURE_OPTICAL_FLOW_COST_NV) {
		str += "OPTICAL_FLOW_COST_NV|"
	}
	if v.HasBits(FORMAT_FEATURE_VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_KHR) {
		str += "VIDEO_ENCODE_QUANTIZATION_DELTA_MAP_KHR|"
	}
	if v.HasBits(FORMAT_FEATURE_VIDEO_ENCODE_EMPHASIS_MAP_KHR) {
		str += "VIDEO_ENCODE_EMPHASIS_MAP_KHR|"
	}
	return strings.TrimSuffix(str, "|")
}

type ImageCreateFlags C.VkImageCreateFlags
const(
IMAGE_CREATE_SPARSE_BINDING ImageCreateFlags = 0x00000001
IMAGE_CREATE_SPARSE_RESIDENCY ImageCreateFlags = 0x00000002
IMAGE_CREATE_SPARSE_ALIASED ImageCreateFlags = 0x00000004
IMAGE_CREATE_MUTABLE_FORMAT ImageCreateFlags = 0x00000008
IMAGE_CREATE_CUBE_COMPATIBLE ImageCreateFlags = 0x00000010
IMAGE_CREATE_ALIAS ImageCreateFlags = 0x00000400
IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS ImageCreateFlags = 0x00000040
IMAGE_CREATE_2D_ARRAY_COMPATIBLE ImageCreateFlags = 0x00000020
IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE ImageCreateFlags = 0x00000080
IMAGE_CREATE_EXTENDED_USAGE ImageCreateFlags = 0x00000100
IMAGE_CREATE_PROTECTED ImageCreateFlags = 0x00000800
IMAGE_CREATE_DISJOINT ImageCreateFlags = 0x00000200
IMAGE_CREATE_CORNER_SAMPLED_NV ImageCreateFlags = 0x00002000
IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_EXT ImageCreateFlags = 0x00001000
IMAGE_CREATE_SUBSAMPLED_EXT ImageCreateFlags = 0x00004000
IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT ImageCreateFlags = 0x00010000
IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXT ImageCreateFlags = 0x00040000
IMAGE_CREATE_2D_VIEW_COMPATIBLE_EXT ImageCreateFlags = 0x00020000
IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_KHR ImageCreateFlags = 0x00100000
IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_EXT ImageCreateFlags = 0x00008000
IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_KHR ImageCreateFlags = IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS
IMAGE_CREATE_2D_ARRAY_COMPATIBLE_KHR ImageCreateFlags = IMAGE_CREATE_2D_ARRAY_COMPATIBLE
IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_KHR ImageCreateFlags = IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE
IMAGE_CREATE_EXTENDED_USAGE_KHR ImageCreateFlags = IMAGE_CREATE_EXTENDED_USAGE
IMAGE_CREATE_DISJOINT_KHR ImageCreateFlags = IMAGE_CREATE_DISJOINT
IMAGE_CREATE_ALIAS_KHR ImageCreateFlags = IMAGE_CREATE_ALIAS
IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_QCOM ImageCreateFlags = IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_EXT
IMAGE_CREATE_FLAGS_MAX_ENUM ImageCreateFlags = 0x7FFFFFFF
)

func (v ImageCreateFlags) HasBits(want ImageCreateFlags) bool {
	return (v & want) == want
}

func (v ImageCreateFlags) String() string {
	str := ""
	if v.HasBits(IMAGE_CREATE_SPARSE_BINDING) {
		str += "SPARSE_BINDING|"
	}
	if v.HasBits(IMAGE_CREATE_SPARSE_RESIDENCY) {
		str += "SPARSE_RESIDENCY|"
	}
	if v.HasBits(IMAGE_CREATE_SPARSE_ALIASED) {
		str += "SPARSE_ALIASED|"
	}
	if v.HasBits(IMAGE_CREATE_MUTABLE_FORMAT) {
		str += "MUTABLE_FORMAT|"
	}
	if v.HasBits(IMAGE_CREATE_CUBE_COMPATIBLE) {
		str += "CUBE_COMPATIBLE|"
	}
	if v.HasBits(IMAGE_CREATE_ALIAS) {
		str += "ALIAS|"
	}
	if v.HasBits(IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS) {
		str += "SPLIT_INSTANCE_BIND_REGIONS|"
	}
	if v.HasBits(IMAGE_CREATE_2D_ARRAY_COMPATIBLE) {
		str += "2D_ARRAY_COMPATIBLE|"
	}
	if v.HasBits(IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE) {
		str += "BLOCK_TEXEL_VIEW_COMPATIBLE|"
	}
	if v.HasBits(IMAGE_CREATE_EXTENDED_USAGE) {
		str += "EXTENDED_USAGE|"
	}
	if v.HasBits(IMAGE_CREATE_PROTECTED) {
		str += "PROTECTED|"
	}
	if v.HasBits(IMAGE_CREATE_DISJOINT) {
		str += "DISJOINT|"
	}
	if v.HasBits(IMAGE_CREATE_CORNER_SAMPLED_NV) {
		str += "CORNER_SAMPLED_NV|"
	}
	if v.HasBits(IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_EXT) {
		str += "SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_EXT|"
	}
	if v.HasBits(IMAGE_CREATE_SUBSAMPLED_EXT) {
		str += "SUBSAMPLED_EXT|"
	}
	if v.HasBits(IMAGE_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT) {
		str += "DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT|"
	}
	if v.HasBits(IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXT) {
		str += "MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXT|"
	}
	if v.HasBits(IMAGE_CREATE_2D_VIEW_COMPATIBLE_EXT) {
		str += "2D_VIEW_COMPATIBLE_EXT|"
	}
	if v.HasBits(IMAGE_CREATE_VIDEO_PROFILE_INDEPENDENT_KHR) {
		str += "VIDEO_PROFILE_INDEPENDENT_KHR|"
	}
	if v.HasBits(IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_EXT) {
		str += "FRAGMENT_DENSITY_MAP_OFFSET_EXT|"
	}
	return strings.TrimSuffix(str, "|")
}

type ImageViewCreateFlags C.VkImageViewCreateFlags
const(
IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_EXT ImageViewCreateFlags = 0x00000001
IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT ImageViewCreateFlags = 0x00000004
IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_EXT ImageViewCreateFlags = 0x00000002
IMAGE_VIEW_CREATE_FLAGS_MAX_ENUM ImageViewCreateFlags = 0x7FFFFFFF
)

func (v ImageViewCreateFlags) HasBits(want ImageViewCreateFlags) bool {
	return (v & want) == want
}

func (v ImageViewCreateFlags) String() string {
	str := ""
	if v.HasBits(IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_EXT) {
		str += "FRAGMENT_DENSITY_MAP_DYNAMIC_EXT|"
	}
	if v.HasBits(IMAGE_VIEW_CREATE_DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT) {
		str += "DESCRIPTOR_BUFFER_CAPTURE_REPLAY_EXT|"
	}
	if v.HasBits(IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_EXT) {
		str += "FRAGMENT_DENSITY_MAP_DEFERRED_EXT|"
	}
	return strings.TrimSuffix(str, "|")
}

type ColorComponentFlags C.VkColorComponentFlags
const(
COLOR_COMPONENT_R ColorComponentFlags = 0x00000001
COLOR_COMPONENT_G ColorComponentFlags = 0x00000002
COLOR_COMPONENT_B ColorComponentFlags = 0x00000004
COLOR_COMPONENT_A ColorComponentFlags = 0x00000008
COLOR_COMPONENT_FLAGS_MAX_ENUM ColorComponentFlags = 0x7FFFFFFF
)

func (v ColorComponentFlags) HasBits(want ColorComponentFlags) bool {
	return (v & want) == want
}

func (v ColorComponentFlags) String() string {
	str := ""
	if v.HasBits(COLOR_COMPONENT_R) {
		str += "Red|"
	}
	if v.HasBits(COLOR_COMPONENT_G) {
		str += "Green|"
	}
	if v.HasBits(COLOR_COMPONENT_B) {
		str += "Blue|"
	}
	if v.HasBits(COLOR_COMPONENT_A) {
		str += "Alpha|"
	}
	return strings.TrimSuffix(str, "|")
}

type BlendFactor C.VkBlendFactor
const(
BLEND_FACTOR_ZERO BlendFactor = 0
BLEND_FACTOR_ONE BlendFactor = 1
BLEND_FACTOR_SRC_COLOR BlendFactor = 2
BLEND_FACTOR_ONE_MINUS_SRC_COLOR BlendFactor = 3
BLEND_FACTOR_DST_COLOR BlendFactor = 4
BLEND_FACTOR_ONE_MINUS_DST_COLOR BlendFactor = 5
BLEND_FACTOR_SRC_ALPHA BlendFactor = 6
BLEND_FACTOR_ONE_MINUS_SRC_ALPHA BlendFactor = 7
BLEND_FACTOR_DST_ALPHA BlendFactor = 8
BLEND_FACTOR_ONE_MINUS_DST_ALPHA BlendFactor = 9
BLEND_FACTOR_CONSTANT_COLOR BlendFactor = 10
BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR BlendFactor = 11
BLEND_FACTOR_CONSTANT_ALPHA BlendFactor = 12
BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA BlendFactor = 13
BLEND_FACTOR_SRC_ALPHA_SATURATE BlendFactor = 14
BLEND_FACTOR_SRC1_COLOR BlendFactor = 15
BLEND_FACTOR_ONE_MINUS_SRC1_COLOR BlendFactor = 16
BLEND_FACTOR_SRC1_ALPHA BlendFactor = 17
BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA BlendFactor = 18
BLEND_FACTOR_MAX_ENUM BlendFactor = 0x7FFFFFFF
)

func (v BlendFactor) String() string {
	switch v {
	case BLEND_FACTOR_ZERO: 
		return "ZERO"
	case BLEND_FACTOR_ONE: 
		return "ONE"
	case BLEND_FACTOR_SRC_COLOR: 
		return "SRC_COLOR"
	case BLEND_FACTOR_ONE_MINUS_SRC_COLOR: 
		return "ONE_MINUS_SRC_COLOR"
	case BLEND_FACTOR_DST_COLOR: 
		return "DST_COLOR"
	case BLEND_FACTOR_ONE_MINUS_DST_COLOR: 
		return "ONE_MINUS_DST_COLOR"
	case BLEND_FACTOR_SRC_ALPHA: 
		return "SRC_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: 
		return "ONE_MINUS_SRC_ALPHA"
	case BLEND_FACTOR_DST_ALPHA: 
		return "DST_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_DST_ALPHA: 
		return "ONE_MINUS_DST_ALPHA"
	case BLEND_FACTOR_CONSTANT_COLOR: 
		return "CONSTANT_COLOR"
	case BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: 
		return "ONE_MINUS_CONSTANT_COLOR"
	case BLEND_FACTOR_CONSTANT_ALPHA: 
		return "CONSTANT_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: 
		return "ONE_MINUS_CONSTANT_ALPHA"
	case BLEND_FACTOR_SRC_ALPHA_SATURATE: 
		return "SRC_ALPHA_SATURATE"
	case BLEND_FACTOR_SRC1_COLOR: 
		return "SRC1_COLOR"
	case BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: 
		return "ONE_MINUS_SRC1_COLOR"
	case BLEND_FACTOR_SRC1_ALPHA: 
		return "SRC1_ALPHA"
	case BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: 
		return "ONE_MINUS_SRC1_ALPHA"
	}
	abort("Unknown BlendFactor: %d", v)
	return ""
}

type BlendOp C.VkBlendOp
const(
BLEND_OP_ADD BlendOp = 0
BLEND_OP_SUBTRACT BlendOp = 1
BLEND_OP_REVERSE_SUBTRACT BlendOp = 2
BLEND_OP_MIN BlendOp = 3
BLEND_OP_MAX BlendOp = 4
BLEND_OP_ZERO_EXT BlendOp = 1000148000
BLEND_OP_SRC_EXT BlendOp = 1000148001
BLEND_OP_DST_EXT BlendOp = 1000148002
BLEND_OP_SRC_OVER_EXT BlendOp = 1000148003
BLEND_OP_DST_OVER_EXT BlendOp = 1000148004
BLEND_OP_SRC_IN_EXT BlendOp = 1000148005
BLEND_OP_DST_IN_EXT BlendOp = 1000148006
BLEND_OP_SRC_OUT_EXT BlendOp = 1000148007
BLEND_OP_DST_OUT_EXT BlendOp = 1000148008
BLEND_OP_SRC_ATOP_EXT BlendOp = 1000148009
BLEND_OP_DST_ATOP_EXT BlendOp = 1000148010
BLEND_OP_XOR_EXT BlendOp = 1000148011
BLEND_OP_MULTIPLY_EXT BlendOp = 1000148012
BLEND_OP_SCREEN_EXT BlendOp = 1000148013
BLEND_OP_OVERLAY_EXT BlendOp = 1000148014
BLEND_OP_DARKEN_EXT BlendOp = 1000148015
BLEND_OP_LIGHTEN_EXT BlendOp = 1000148016
BLEND_OP_COLORDODGE_EXT BlendOp = 1000148017
BLEND_OP_COLORBURN_EXT BlendOp = 1000148018
BLEND_OP_HARDLIGHT_EXT BlendOp = 1000148019
BLEND_OP_SOFTLIGHT_EXT BlendOp = 1000148020
BLEND_OP_DIFFERENCE_EXT BlendOp = 1000148021
BLEND_OP_EXCLUSION_EXT BlendOp = 1000148022
BLEND_OP_INVERT_EXT BlendOp = 1000148023
BLEND_OP_INVERT_RGB_EXT BlendOp = 1000148024
BLEND_OP_LINEARDODGE_EXT BlendOp = 1000148025
BLEND_OP_LINEARBURN_EXT BlendOp = 1000148026
BLEND_OP_VIVIDLIGHT_EXT BlendOp = 1000148027
BLEND_OP_LINEARLIGHT_EXT BlendOp = 1000148028
BLEND_OP_PINLIGHT_EXT BlendOp = 1000148029
BLEND_OP_HARDMIX_EXT BlendOp = 1000148030
BLEND_OP_HSL_HUE_EXT BlendOp = 1000148031
BLEND_OP_HSL_SATURATION_EXT BlendOp = 1000148032
BLEND_OP_HSL_COLOR_EXT BlendOp = 1000148033
BLEND_OP_HSL_LUMINOSITY_EXT BlendOp = 1000148034
BLEND_OP_PLUS_EXT BlendOp = 1000148035
BLEND_OP_PLUS_CLAMPED_EXT BlendOp = 1000148036
BLEND_OP_PLUS_CLAMPED_ALPHA_EXT BlendOp = 1000148037
BLEND_OP_PLUS_DARKER_EXT BlendOp = 1000148038
BLEND_OP_MINUS_EXT BlendOp = 1000148039
BLEND_OP_MINUS_CLAMPED_EXT BlendOp = 1000148040
BLEND_OP_CONTRAST_EXT BlendOp = 1000148041
BLEND_OP_INVERT_OVG_EXT BlendOp = 1000148042
BLEND_OP_RED_EXT BlendOp = 1000148043
BLEND_OP_GREEN_EXT BlendOp = 1000148044
BLEND_OP_BLUE_EXT BlendOp = 1000148045
BLEND_OP_MAX_ENUM BlendOp = 0x7FFFFFFF
)

func (v BlendOp) String() string {
	switch v {
	case BLEND_OP_ADD: 
		return "ADD"
	case BLEND_OP_SUBTRACT: 
		return "SUBTRACT"
	case BLEND_OP_REVERSE_SUBTRACT: 
		return "REVERSE_SUBTRACT"
	case BLEND_OP_MIN: 
		return "MIN"
	case BLEND_OP_MAX: 
		return "MAX"
	case BLEND_OP_ZERO_EXT: 
		return "ZERO_EXT"
	case BLEND_OP_SRC_EXT: 
		return "SRC_EXT"
	case BLEND_OP_DST_EXT: 
		return "DST_EXT"
	case BLEND_OP_SRC_OVER_EXT: 
		return "SRC_OVER_EXT"
	case BLEND_OP_DST_OVER_EXT: 
		return "DST_OVER_EXT"
	case BLEND_OP_SRC_IN_EXT: 
		return "SRC_IN_EXT"
	case BLEND_OP_DST_IN_EXT: 
		return "DST_IN_EXT"
	case BLEND_OP_SRC_OUT_EXT: 
		return "SRC_OUT_EXT"
	case BLEND_OP_DST_OUT_EXT: 
		return "DST_OUT_EXT"
	case BLEND_OP_SRC_ATOP_EXT: 
		return "SRC_ATOP_EXT"
	case BLEND_OP_DST_ATOP_EXT: 
		return "DST_ATOP_EXT"
	case BLEND_OP_XOR_EXT: 
		return "XOR_EXT"
	case BLEND_OP_MULTIPLY_EXT: 
		return "MULTIPLY_EXT"
	case BLEND_OP_SCREEN_EXT: 
		return "SCREEN_EXT"
	case BLEND_OP_OVERLAY_EXT: 
		return "OVERLAY_EXT"
	case BLEND_OP_DARKEN_EXT: 
		return "DARKEN_EXT"
	case BLEND_OP_LIGHTEN_EXT: 
		return "LIGHTEN_EXT"
	case BLEND_OP_COLORDODGE_EXT: 
		return "COLORDODGE_EXT"
	case BLEND_OP_COLORBURN_EXT: 
		return "COLORBURN_EXT"
	case BLEND_OP_HARDLIGHT_EXT: 
		return "HARDLIGHT_EXT"
	case BLEND_OP_SOFTLIGHT_EXT: 
		return "SOFTLIGHT_EXT"
	case BLEND_OP_DIFFERENCE_EXT: 
		return "DIFFERENCE_EXT"
	case BLEND_OP_EXCLUSION_EXT: 
		return "EXCLUSION_EXT"
	case BLEND_OP_INVERT_EXT: 
		return "INVERT_EXT"
	case BLEND_OP_INVERT_RGB_EXT: 
		return "INVERT_RGB_EXT"
	case BLEND_OP_LINEARDODGE_EXT: 
		return "LINEARDODGE_EXT"
	case BLEND_OP_LINEARBURN_EXT: 
		return "LINEARBURN_EXT"
	case BLEND_OP_VIVIDLIGHT_EXT: 
		return "VIVIDLIGHT_EXT"
	case BLEND_OP_LINEARLIGHT_EXT: 
		return "LINEARLIGHT_EXT"
	case BLEND_OP_PINLIGHT_EXT: 
		return "PINLIGHT_EXT"
	case BLEND_OP_HARDMIX_EXT: 
		return "HARDMIX_EXT"
	case BLEND_OP_HSL_HUE_EXT: 
		return "HSL_HUE_EXT"
	case BLEND_OP_HSL_SATURATION_EXT: 
		return "HSL_SATURATION_EXT"
	case BLEND_OP_HSL_COLOR_EXT: 
		return "HSL_COLOR_EXT"
	case BLEND_OP_HSL_LUMINOSITY_EXT: 
		return "HSL_LUMINOSITY_EXT"
	case BLEND_OP_PLUS_EXT: 
		return "PLUS_EXT"
	case BLEND_OP_PLUS_CLAMPED_EXT: 
		return "PLUS_CLAMPED_EXT"
	case BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: 
		return "PLUS_CLAMPED_ALPHA_EXT"
	case BLEND_OP_PLUS_DARKER_EXT: 
		return "PLUS_DARKER_EXT"
	case BLEND_OP_MINUS_EXT: 
		return "MINUS_EXT"
	case BLEND_OP_MINUS_CLAMPED_EXT: 
		return "MINUS_CLAMPED_EXT"
	case BLEND_OP_CONTRAST_EXT: 
		return "CONTRAST_EXT"
	case BLEND_OP_INVERT_OVG_EXT: 
		return "INVERT_OVG_EXT"
	case BLEND_OP_RED_EXT: 
		return "RED_EXT"
	case BLEND_OP_GREEN_EXT: 
		return "GREEN_EXT"
	case BLEND_OP_BLUE_EXT: 
		return "BLUE_EXT"
	}
	abort("Unknown BlendOp: %d", v)
	return ""
}

type IndexType C.VkIndexType
const(
INDEX_TYPE_UINT16 IndexType = 0
INDEX_TYPE_UINT32 IndexType = 1
INDEX_TYPE_UINT8 IndexType = 1000265000
INDEX_TYPE_NONE_KHR IndexType = 1000165000
INDEX_TYPE_NONE_NV IndexType = INDEX_TYPE_NONE_KHR
INDEX_TYPE_UINT8_EXT IndexType = INDEX_TYPE_UINT8
INDEX_TYPE_UINT8_KHR IndexType = INDEX_TYPE_UINT8
INDEX_TYPE_MAX_ENUM IndexType = 0x7FFFFFFF
)

func (v IndexType) String() string {
	switch v {
	case INDEX_TYPE_UINT16: 
		return "UINT16"
	case INDEX_TYPE_UINT32: 
		return "UINT32"
	case INDEX_TYPE_UINT8: 
		return "UINT8"
	case INDEX_TYPE_NONE_KHR: 
		return "NONE_KHR"
	}
	abort("Unknown IndexType: %d", v)
	return ""
}

type Format C.VkFormat
type DepthStencilFormat C.VkFormat
const(
FORMAT_R4G4_UNORM_PACK8 Format = 1
FORMAT_R4G4B4A4_UNORM_PACK16 Format = 2
FORMAT_B4G4R4A4_UNORM_PACK16 Format = 3
FORMAT_R5G6B5_UNORM_PACK16 Format = 4
FORMAT_B5G6R5_UNORM_PACK16 Format = 5
FORMAT_R5G5B5A1_UNORM_PACK16 Format = 6
FORMAT_B5G5R5A1_UNORM_PACK16 Format = 7
FORMAT_A1R5G5B5_UNORM_PACK16 Format = 8
FORMAT_R8_UNORM Format = 9
FORMAT_R8_SNORM Format = 10
FORMAT_R8_USCALED Format = 11
FORMAT_R8_SSCALED Format = 12
FORMAT_R8_UINT Format = 13
FORMAT_R8_SINT Format = 14
FORMAT_R8_SRGB Format = 15
FORMAT_R8G8_UNORM Format = 16
FORMAT_R8G8_SNORM Format = 17
FORMAT_R8G8_USCALED Format = 18
FORMAT_R8G8_SSCALED Format = 19
FORMAT_R8G8_UINT Format = 20
FORMAT_R8G8_SINT Format = 21
FORMAT_R8G8_SRGB Format = 22
FORMAT_R8G8B8_UNORM Format = 23
FORMAT_R8G8B8_SNORM Format = 24
FORMAT_R8G8B8_USCALED Format = 25
FORMAT_R8G8B8_SSCALED Format = 26
FORMAT_R8G8B8_UINT Format = 27
FORMAT_R8G8B8_SINT Format = 28
FORMAT_R8G8B8_SRGB Format = 29
FORMAT_B8G8R8_UNORM Format = 30
FORMAT_B8G8R8_SNORM Format = 31
FORMAT_B8G8R8_USCALED Format = 32
FORMAT_B8G8R8_SSCALED Format = 33
FORMAT_B8G8R8_UINT Format = 34
FORMAT_B8G8R8_SINT Format = 35
FORMAT_B8G8R8_SRGB Format = 36
FORMAT_R8G8B8A8_UNORM Format = 37
FORMAT_R8G8B8A8_SNORM Format = 38
FORMAT_R8G8B8A8_USCALED Format = 39
FORMAT_R8G8B8A8_SSCALED Format = 40
FORMAT_R8G8B8A8_UINT Format = 41
FORMAT_R8G8B8A8_SINT Format = 42
FORMAT_R8G8B8A8_SRGB Format = 43
FORMAT_B8G8R8A8_UNORM Format = 44
FORMAT_B8G8R8A8_SNORM Format = 45
FORMAT_B8G8R8A8_USCALED Format = 46
FORMAT_B8G8R8A8_SSCALED Format = 47
FORMAT_B8G8R8A8_UINT Format = 48
FORMAT_B8G8R8A8_SINT Format = 49
FORMAT_B8G8R8A8_SRGB Format = 50
FORMAT_A8B8G8R8_UNORM_PACK32 Format = 51
FORMAT_A8B8G8R8_SNORM_PACK32 Format = 52
FORMAT_A8B8G8R8_USCALED_PACK32 Format = 53
FORMAT_A8B8G8R8_SSCALED_PACK32 Format = 54
FORMAT_A8B8G8R8_UINT_PACK32 Format = 55
FORMAT_A8B8G8R8_SINT_PACK32 Format = 56
FORMAT_A8B8G8R8_SRGB_PACK32 Format = 57
FORMAT_A2R10G10B10_UNORM_PACK32 Format = 58
FORMAT_A2R10G10B10_SNORM_PACK32 Format = 59
FORMAT_A2R10G10B10_USCALED_PACK32 Format = 60
FORMAT_A2R10G10B10_SSCALED_PACK32 Format = 61
FORMAT_A2R10G10B10_UINT_PACK32 Format = 62
FORMAT_A2R10G10B10_SINT_PACK32 Format = 63
FORMAT_A2B10G10R10_UNORM_PACK32 Format = 64
FORMAT_A2B10G10R10_SNORM_PACK32 Format = 65
FORMAT_A2B10G10R10_USCALED_PACK32 Format = 66
FORMAT_A2B10G10R10_SSCALED_PACK32 Format = 67
FORMAT_A2B10G10R10_UINT_PACK32 Format = 68
FORMAT_A2B10G10R10_SINT_PACK32 Format = 69
FORMAT_R16_UNORM Format = 70
FORMAT_R16_SNORM Format = 71
FORMAT_R16_USCALED Format = 72
FORMAT_R16_SSCALED Format = 73
FORMAT_R16_UINT Format = 74
FORMAT_R16_SINT Format = 75
FORMAT_R16_SFLOAT Format = 76
FORMAT_R16G16_UNORM Format = 77
FORMAT_R16G16_SNORM Format = 78
FORMAT_R16G16_USCALED Format = 79
FORMAT_R16G16_SSCALED Format = 80
FORMAT_R16G16_UINT Format = 81
FORMAT_R16G16_SINT Format = 82
FORMAT_R16G16_SFLOAT Format = 83
FORMAT_R16G16B16_UNORM Format = 84
FORMAT_R16G16B16_SNORM Format = 85
FORMAT_R16G16B16_USCALED Format = 86
FORMAT_R16G16B16_SSCALED Format = 87
FORMAT_R16G16B16_UINT Format = 88
FORMAT_R16G16B16_SINT Format = 89
FORMAT_R16G16B16_SFLOAT Format = 90
FORMAT_R16G16B16A16_UNORM Format = 91
FORMAT_R16G16B16A16_SNORM Format = 92
FORMAT_R16G16B16A16_USCALED Format = 93
FORMAT_R16G16B16A16_SSCALED Format = 94
FORMAT_R16G16B16A16_UINT Format = 95
FORMAT_R16G16B16A16_SINT Format = 96
FORMAT_R16G16B16A16_SFLOAT Format = 97
FORMAT_R32_UINT Format = 98
FORMAT_R32_SINT Format = 99
FORMAT_R32_SFLOAT Format = 100
FORMAT_R32G32_UINT Format = 101
FORMAT_R32G32_SINT Format = 102
FORMAT_R32G32_SFLOAT Format = 103
FORMAT_R32G32B32_UINT Format = 104
FORMAT_R32G32B32_SINT Format = 105
FORMAT_R32G32B32_SFLOAT Format = 106
FORMAT_R32G32B32A32_UINT Format = 107
FORMAT_R32G32B32A32_SINT Format = 108
FORMAT_R32G32B32A32_SFLOAT Format = 109
FORMAT_R64_UINT Format = 110
FORMAT_R64_SINT Format = 111
FORMAT_R64_SFLOAT Format = 112
FORMAT_R64G64_UINT Format = 113
FORMAT_R64G64_SINT Format = 114
FORMAT_R64G64_SFLOAT Format = 115
FORMAT_R64G64B64_UINT Format = 116
FORMAT_R64G64B64_SINT Format = 117
FORMAT_R64G64B64_SFLOAT Format = 118
FORMAT_R64G64B64A64_UINT Format = 119
FORMAT_R64G64B64A64_SINT Format = 120
FORMAT_R64G64B64A64_SFLOAT Format = 121
FORMAT_B10G11R11_UFLOAT_PACK32 Format = 122
FORMAT_E5B9G9R9_UFLOAT_PACK32 Format = 123
DEPTH_STENCIL_FORMAT_D16_UNORM DepthStencilFormat = 124
DEPTH_STENCIL_FORMAT_X8_D24_UNORM_PACK32 DepthStencilFormat = 125
DEPTH_STENCIL_FORMAT_D32_SFLOAT DepthStencilFormat = 126
DEPTH_STENCIL_FORMAT_S8_UINT DepthStencilFormat = 127
DEPTH_STENCIL_FORMAT_D16_UNORM_S8_UINT DepthStencilFormat = 128
DEPTH_STENCIL_FORMAT_D24_UNORM_S8_UINT DepthStencilFormat = 129
DEPTH_STENCIL_FORMAT_D32_SFLOAT_S8_UINT DepthStencilFormat = 130
FORMAT_BC1_RGB_UNORM_BLOCK Format = 131
FORMAT_BC1_RGB_SRGB_BLOCK Format = 132
FORMAT_BC1_RGBA_UNORM_BLOCK Format = 133
FORMAT_BC1_RGBA_SRGB_BLOCK Format = 134
FORMAT_BC2_UNORM_BLOCK Format = 135
FORMAT_BC2_SRGB_BLOCK Format = 136
FORMAT_BC3_UNORM_BLOCK Format = 137
FORMAT_BC3_SRGB_BLOCK Format = 138
FORMAT_BC4_UNORM_BLOCK Format = 139
FORMAT_BC4_SNORM_BLOCK Format = 140
FORMAT_BC5_UNORM_BLOCK Format = 141
FORMAT_BC5_SNORM_BLOCK Format = 142
FORMAT_BC6H_UFLOAT_BLOCK Format = 143
FORMAT_BC6H_SFLOAT_BLOCK Format = 144
FORMAT_BC7_UNORM_BLOCK Format = 145
FORMAT_BC7_SRGB_BLOCK Format = 146
FORMAT_ETC2_R8G8B8_UNORM_BLOCK Format = 147
FORMAT_ETC2_R8G8B8_SRGB_BLOCK Format = 148
FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK Format = 149
FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK Format = 150
FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK Format = 151
FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK Format = 152
FORMAT_EAC_R11_UNORM_BLOCK Format = 153
FORMAT_EAC_R11_SNORM_BLOCK Format = 154
FORMAT_EAC_R11G11_UNORM_BLOCK Format = 155
FORMAT_EAC_R11G11_SNORM_BLOCK Format = 156
FORMAT_ASTC_4x4_UNORM_BLOCK Format = 157
FORMAT_ASTC_4x4_SRGB_BLOCK Format = 158
FORMAT_ASTC_5x4_UNORM_BLOCK Format = 159
FORMAT_ASTC_5x4_SRGB_BLOCK Format = 160
FORMAT_ASTC_5x5_UNORM_BLOCK Format = 161
FORMAT_ASTC_5x5_SRGB_BLOCK Format = 162
FORMAT_ASTC_6x5_UNORM_BLOCK Format = 163
FORMAT_ASTC_6x5_SRGB_BLOCK Format = 164
FORMAT_ASTC_6x6_UNORM_BLOCK Format = 165
FORMAT_ASTC_6x6_SRGB_BLOCK Format = 166
FORMAT_ASTC_8x5_UNORM_BLOCK Format = 167
FORMAT_ASTC_8x5_SRGB_BLOCK Format = 168
FORMAT_ASTC_8x6_UNORM_BLOCK Format = 169
FORMAT_ASTC_8x6_SRGB_BLOCK Format = 170
FORMAT_ASTC_8x8_UNORM_BLOCK Format = 171
FORMAT_ASTC_8x8_SRGB_BLOCK Format = 172
FORMAT_ASTC_10x5_UNORM_BLOCK Format = 173
FORMAT_ASTC_10x5_SRGB_BLOCK Format = 174
FORMAT_ASTC_10x6_UNORM_BLOCK Format = 175
FORMAT_ASTC_10x6_SRGB_BLOCK Format = 176
FORMAT_ASTC_10x8_UNORM_BLOCK Format = 177
FORMAT_ASTC_10x8_SRGB_BLOCK Format = 178
FORMAT_ASTC_10x10_UNORM_BLOCK Format = 179
FORMAT_ASTC_10x10_SRGB_BLOCK Format = 180
FORMAT_ASTC_12x10_UNORM_BLOCK Format = 181
FORMAT_ASTC_12x10_SRGB_BLOCK Format = 182
FORMAT_ASTC_12x12_UNORM_BLOCK Format = 183
FORMAT_ASTC_12x12_SRGB_BLOCK Format = 184
FORMAT_G8B8G8R8_422_UNORM Format = 1000156000
FORMAT_B8G8R8G8_422_UNORM Format = 1000156001
FORMAT_R10X6_UNORM_PACK16 Format = 1000156007
FORMAT_R10X6G10X6_UNORM_2PACK16 Format = 1000156008
FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16 Format = 1000156009
FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16 Format = 1000156010
FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16 Format = 1000156011
FORMAT_R12X4_UNORM_PACK16 Format = 1000156017
FORMAT_R12X4G12X4_UNORM_2PACK16 Format = 1000156018
FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16 Format = 1000156019
FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16 Format = 1000156020
FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16 Format = 1000156021
FORMAT_G16B16G16R16_422_UNORM Format = 1000156027
FORMAT_B16G16R16G16_422_UNORM Format = 1000156028
FORMAT_A4R4G4B4_UNORM_PACK16 Format = 1000340000
FORMAT_A4B4G4R4_UNORM_PACK16 Format = 1000340001
FORMAT_ASTC_4x4_SFLOAT_BLOCK Format = 1000066000
FORMAT_ASTC_5x4_SFLOAT_BLOCK Format = 1000066001
FORMAT_ASTC_5x5_SFLOAT_BLOCK Format = 1000066002
FORMAT_ASTC_6x5_SFLOAT_BLOCK Format = 1000066003
FORMAT_ASTC_6x6_SFLOAT_BLOCK Format = 1000066004
FORMAT_ASTC_8x5_SFLOAT_BLOCK Format = 1000066005
FORMAT_ASTC_8x6_SFLOAT_BLOCK Format = 1000066006
FORMAT_ASTC_8x8_SFLOAT_BLOCK Format = 1000066007
FORMAT_ASTC_10x5_SFLOAT_BLOCK Format = 1000066008
FORMAT_ASTC_10x6_SFLOAT_BLOCK Format = 1000066009
FORMAT_ASTC_10x8_SFLOAT_BLOCK Format = 1000066010
FORMAT_ASTC_10x10_SFLOAT_BLOCK Format = 1000066011
FORMAT_ASTC_12x10_SFLOAT_BLOCK Format = 1000066012
FORMAT_ASTC_12x12_SFLOAT_BLOCK Format = 1000066013
FORMAT_A1B5G5R5_UNORM_PACK16 Format = 1000470000
FORMAT_A8_UNORM Format = 1000470001
FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG Format = 1000054000
FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG Format = 1000054001
FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG Format = 1000054002
FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG Format = 1000054003
FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG Format = 1000054004
FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG Format = 1000054005
FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG Format = 1000054006
FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG Format = 1000054007
FORMAT_R16G16_SFIXED5_NV Format = 1000464000
FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_4x4_SFLOAT_BLOCK
FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_5x4_SFLOAT_BLOCK
FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_5x5_SFLOAT_BLOCK
FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_6x5_SFLOAT_BLOCK
FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_6x6_SFLOAT_BLOCK
FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_8x5_SFLOAT_BLOCK
FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_8x6_SFLOAT_BLOCK
FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_8x8_SFLOAT_BLOCK
FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_10x5_SFLOAT_BLOCK
FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_10x6_SFLOAT_BLOCK
FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_10x8_SFLOAT_BLOCK
FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_10x10_SFLOAT_BLOCK
FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_12x10_SFLOAT_BLOCK
FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT Format = FORMAT_ASTC_12x12_SFLOAT_BLOCK
FORMAT_G8B8G8R8_422_UNORM_KHR Format = FORMAT_G8B8G8R8_422_UNORM
FORMAT_B8G8R8G8_422_UNORM_KHR Format = FORMAT_B8G8R8G8_422_UNORM
FORMAT_R10X6_UNORM_PACK16_KHR Format = FORMAT_R10X6_UNORM_PACK16
FORMAT_R10X6G10X6_UNORM_2PACK16_KHR Format = FORMAT_R10X6G10X6_UNORM_2PACK16
FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR Format = FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16
FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR Format = FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR Format = FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
FORMAT_R12X4_UNORM_PACK16_KHR Format = FORMAT_R12X4_UNORM_PACK16
FORMAT_R12X4G12X4_UNORM_2PACK16_KHR Format = FORMAT_R12X4G12X4_UNORM_2PACK16
FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR Format = FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16
FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR Format = FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR Format = FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
FORMAT_G16B16G16R16_422_UNORM_KHR Format = FORMAT_G16B16G16R16_422_UNORM
FORMAT_B16G16R16G16_422_UNORM_KHR Format = FORMAT_B16G16R16G16_422_UNORM
FORMAT_A4R4G4B4_UNORM_PACK16_EXT Format = FORMAT_A4R4G4B4_UNORM_PACK16
FORMAT_A4B4G4R4_UNORM_PACK16_EXT Format = FORMAT_A4B4G4R4_UNORM_PACK16
FORMAT_R16G16_S10_5_NV Format = FORMAT_R16G16_SFIXED5_NV
FORMAT_A1B5G5R5_UNORM_PACK16_KHR Format = FORMAT_A1B5G5R5_UNORM_PACK16
FORMAT_A8_UNORM_KHR Format = FORMAT_A8_UNORM
FORMAT_MAX_ENUM Format = 0x7FFFFFFF
)

func (v Format) HasFeatures(want FormatFeatureFlags) bool {
	return instance.formatProperties.colorFeatures(v).HasBits(want) 
}

func (v Format) String() string {
	switch v {
	case 0:
		return "UNDEFINED"
	case FORMAT_R4G4_UNORM_PACK8:
		return "R4G4_UNORM_PACK8"
	case FORMAT_R4G4B4A4_UNORM_PACK16:
		return "R4G4B4A4_UNORM_PACK16"
	case FORMAT_B4G4R4A4_UNORM_PACK16:
		return "B4G4R4A4_UNORM_PACK16"
	case FORMAT_R5G6B5_UNORM_PACK16:
		return "R5G6B5_UNORM_PACK16"
	case FORMAT_B5G6R5_UNORM_PACK16:
		return "B5G6R5_UNORM_PACK16"
	case FORMAT_R5G5B5A1_UNORM_PACK16:
		return "R5G5B5A1_UNORM_PACK16"
	case FORMAT_B5G5R5A1_UNORM_PACK16:
		return "B5G5R5A1_UNORM_PACK16"
	case FORMAT_A1R5G5B5_UNORM_PACK16:
		return "A1R5G5B5_UNORM_PACK16"
	case FORMAT_R8_UNORM:
		return "R8_UNORM"
	case FORMAT_R8_SNORM:
		return "R8_SNORM"
	case FORMAT_R8_USCALED:
		return "R8_USCALED"
	case FORMAT_R8_SSCALED:
		return "R8_SSCALED"
	case FORMAT_R8_UINT:
		return "R8_UINT"
	case FORMAT_R8_SINT:
		return "R8_SINT"
	case FORMAT_R8_SRGB:
		return "R8_SRGB"
	case FORMAT_R8G8_UNORM:
		return "R8G8_UNORM"
	case FORMAT_R8G8_SNORM:
		return "R8G8_SNORM"
	case FORMAT_R8G8_USCALED:
		return "R8G8_USCALED"
	case FORMAT_R8G8_SSCALED:
		return "R8G8_SSCALED"
	case FORMAT_R8G8_UINT:
		return "R8G8_UINT"
	case FORMAT_R8G8_SINT:
		return "R8G8_SINT"
	case FORMAT_R8G8_SRGB:
		return "R8G8_SRGB"
	case FORMAT_R8G8B8_UNORM:
		return "R8G8B8_UNORM"
	case FORMAT_R8G8B8_SNORM:
		return "R8G8B8_SNORM"
	case FORMAT_R8G8B8_USCALED:
		return "R8G8B8_USCALED"
	case FORMAT_R8G8B8_SSCALED:
		return "R8G8B8_SSCALED"
	case FORMAT_R8G8B8_UINT:
		return "R8G8B8_UINT"
	case FORMAT_R8G8B8_SINT:
		return "R8G8B8_SINT"
	case FORMAT_R8G8B8_SRGB:
		return "R8G8B8_SRGB"
	case FORMAT_B8G8R8_UNORM:
		return "B8G8R8_UNORM"
	case FORMAT_B8G8R8_SNORM:
		return "B8G8R8_SNORM"
	case FORMAT_B8G8R8_USCALED:
		return "B8G8R8_USCALED"
	case FORMAT_B8G8R8_SSCALED:
		return "B8G8R8_SSCALED"
	case FORMAT_B8G8R8_UINT:
		return "B8G8R8_UINT"
	case FORMAT_B8G8R8_SINT:
		return "B8G8R8_SINT"
	case FORMAT_B8G8R8_SRGB:
		return "B8G8R8_SRGB"
	case FORMAT_R8G8B8A8_UNORM:
		return "R8G8B8A8_UNORM"
	case FORMAT_R8G8B8A8_SNORM:
		return "R8G8B8A8_SNORM"
	case FORMAT_R8G8B8A8_USCALED:
		return "R8G8B8A8_USCALED"
	case FORMAT_R8G8B8A8_SSCALED:
		return "R8G8B8A8_SSCALED"
	case FORMAT_R8G8B8A8_UINT:
		return "R8G8B8A8_UINT"
	case FORMAT_R8G8B8A8_SINT:
		return "R8G8B8A8_SINT"
	case FORMAT_R8G8B8A8_SRGB:
		return "R8G8B8A8_SRGB"
	case FORMAT_B8G8R8A8_UNORM:
		return "B8G8R8A8_UNORM"
	case FORMAT_B8G8R8A8_SNORM:
		return "B8G8R8A8_SNORM"
	case FORMAT_B8G8R8A8_USCALED:
		return "B8G8R8A8_USCALED"
	case FORMAT_B8G8R8A8_SSCALED:
		return "B8G8R8A8_SSCALED"
	case FORMAT_B8G8R8A8_UINT:
		return "B8G8R8A8_UINT"
	case FORMAT_B8G8R8A8_SINT:
		return "B8G8R8A8_SINT"
	case FORMAT_B8G8R8A8_SRGB:
		return "B8G8R8A8_SRGB"
	case FORMAT_A8B8G8R8_UNORM_PACK32:
		return "A8B8G8R8_UNORM_PACK32"
	case FORMAT_A8B8G8R8_SNORM_PACK32:
		return "A8B8G8R8_SNORM_PACK32"
	case FORMAT_A8B8G8R8_USCALED_PACK32:
		return "A8B8G8R8_USCALED_PACK32"
	case FORMAT_A8B8G8R8_SSCALED_PACK32:
		return "A8B8G8R8_SSCALED_PACK32"
	case FORMAT_A8B8G8R8_UINT_PACK32:
		return "A8B8G8R8_UINT_PACK32"
	case FORMAT_A8B8G8R8_SINT_PACK32:
		return "A8B8G8R8_SINT_PACK32"
	case FORMAT_A8B8G8R8_SRGB_PACK32:
		return "A8B8G8R8_SRGB_PACK32"
	case FORMAT_A2R10G10B10_UNORM_PACK32:
		return "A2R10G10B10_UNORM_PACK32"
	case FORMAT_A2R10G10B10_SNORM_PACK32:
		return "A2R10G10B10_SNORM_PACK32"
	case FORMAT_A2R10G10B10_USCALED_PACK32:
		return "A2R10G10B10_USCALED_PACK32"
	case FORMAT_A2R10G10B10_SSCALED_PACK32:
		return "A2R10G10B10_SSCALED_PACK32"
	case FORMAT_A2R10G10B10_UINT_PACK32:
		return "A2R10G10B10_UINT_PACK32"
	case FORMAT_A2R10G10B10_SINT_PACK32:
		return "A2R10G10B10_SINT_PACK32"
	case FORMAT_A2B10G10R10_UNORM_PACK32:
		return "A2B10G10R10_UNORM_PACK32"
	case FORMAT_A2B10G10R10_SNORM_PACK32:
		return "A2B10G10R10_SNORM_PACK32"
	case FORMAT_A2B10G10R10_USCALED_PACK32:
		return "A2B10G10R10_USCALED_PACK32"
	case FORMAT_A2B10G10R10_SSCALED_PACK32:
		return "A2B10G10R10_SSCALED_PACK32"
	case FORMAT_A2B10G10R10_UINT_PACK32:
		return "A2B10G10R10_UINT_PACK32"
	case FORMAT_A2B10G10R10_SINT_PACK32:
		return "A2B10G10R10_SINT_PACK32"
	case FORMAT_R16_UNORM:
		return "R16_UNORM"
	case FORMAT_R16_SNORM:
		return "R16_SNORM"
	case FORMAT_R16_USCALED:
		return "R16_USCALED"
	case FORMAT_R16_SSCALED:
		return "R16_SSCALED"
	case FORMAT_R16_UINT:
		return "R16_UINT"
	case FORMAT_R16_SINT:
		return "R16_SINT"
	case FORMAT_R16_SFLOAT:
		return "R16_SFLOAT"
	case FORMAT_R16G16_UNORM:
		return "R16G16_UNORM"
	case FORMAT_R16G16_SNORM:
		return "R16G16_SNORM"
	case FORMAT_R16G16_USCALED:
		return "R16G16_USCALED"
	case FORMAT_R16G16_SSCALED:
		return "R16G16_SSCALED"
	case FORMAT_R16G16_UINT:
		return "R16G16_UINT"
	case FORMAT_R16G16_SINT:
		return "R16G16_SINT"
	case FORMAT_R16G16_SFLOAT:
		return "R16G16_SFLOAT"
	case FORMAT_R16G16B16_UNORM:
		return "R16G16B16_UNORM"
	case FORMAT_R16G16B16_SNORM:
		return "R16G16B16_SNORM"
	case FORMAT_R16G16B16_USCALED:
		return "R16G16B16_USCALED"
	case FORMAT_R16G16B16_SSCALED:
		return "R16G16B16_SSCALED"
	case FORMAT_R16G16B16_UINT:
		return "R16G16B16_UINT"
	case FORMAT_R16G16B16_SINT:
		return "R16G16B16_SINT"
	case FORMAT_R16G16B16_SFLOAT:
		return "R16G16B16_SFLOAT"
	case FORMAT_R16G16B16A16_UNORM:
		return "R16G16B16A16_UNORM"
	case FORMAT_R16G16B16A16_SNORM:
		return "R16G16B16A16_SNORM"
	case FORMAT_R16G16B16A16_USCALED:
		return "R16G16B16A16_USCALED"
	case FORMAT_R16G16B16A16_SSCALED:
		return "R16G16B16A16_SSCALED"
	case FORMAT_R16G16B16A16_UINT:
		return "R16G16B16A16_UINT"
	case FORMAT_R16G16B16A16_SINT:
		return "R16G16B16A16_SINT"
	case FORMAT_R16G16B16A16_SFLOAT:
		return "R16G16B16A16_SFLOAT"
	case FORMAT_R32_UINT:
		return "R32_UINT"
	case FORMAT_R32_SINT:
		return "R32_SINT"
	case FORMAT_R32_SFLOAT:
		return "R32_SFLOAT"
	case FORMAT_R32G32_UINT:
		return "R32G32_UINT"
	case FORMAT_R32G32_SINT:
		return "R32G32_SINT"
	case FORMAT_R32G32_SFLOAT:
		return "R32G32_SFLOAT"
	case FORMAT_R32G32B32_UINT:
		return "R32G32B32_UINT"
	case FORMAT_R32G32B32_SINT:
		return "R32G32B32_SINT"
	case FORMAT_R32G32B32_SFLOAT:
		return "R32G32B32_SFLOAT"
	case FORMAT_R32G32B32A32_UINT:
		return "R32G32B32A32_UINT"
	case FORMAT_R32G32B32A32_SINT:
		return "R32G32B32A32_SINT"
	case FORMAT_R32G32B32A32_SFLOAT:
		return "R32G32B32A32_SFLOAT"
	case FORMAT_R64_UINT:
		return "R64_UINT"
	case FORMAT_R64_SINT:
		return "R64_SINT"
	case FORMAT_R64_SFLOAT:
		return "R64_SFLOAT"
	case FORMAT_R64G64_UINT:
		return "R64G64_UINT"
	case FORMAT_R64G64_SINT:
		return "R64G64_SINT"
	case FORMAT_R64G64_SFLOAT:
		return "R64G64_SFLOAT"
	case FORMAT_R64G64B64_UINT:
		return "R64G64B64_UINT"
	case FORMAT_R64G64B64_SINT:
		return "R64G64B64_SINT"
	case FORMAT_R64G64B64_SFLOAT:
		return "R64G64B64_SFLOAT"
	case FORMAT_R64G64B64A64_UINT:
		return "R64G64B64A64_UINT"
	case FORMAT_R64G64B64A64_SINT:
		return "R64G64B64A64_SINT"
	case FORMAT_R64G64B64A64_SFLOAT:
		return "R64G64B64A64_SFLOAT"
	case FORMAT_B10G11R11_UFLOAT_PACK32:
		return "B10G11R11_UFLOAT_PACK32"
	case FORMAT_E5B9G9R9_UFLOAT_PACK32:
		return "E5B9G9R9_UFLOAT_PACK32"
	case FORMAT_BC1_RGB_UNORM_BLOCK:
		return "BC1_RGB_UNORM_BLOCK"
	case FORMAT_BC1_RGB_SRGB_BLOCK:
		return "BC1_RGB_SRGB_BLOCK"
	case FORMAT_BC1_RGBA_UNORM_BLOCK:
		return "BC1_RGBA_UNORM_BLOCK"
	case FORMAT_BC1_RGBA_SRGB_BLOCK:
		return "BC1_RGBA_SRGB_BLOCK"
	case FORMAT_BC2_UNORM_BLOCK:
		return "BC2_UNORM_BLOCK"
	case FORMAT_BC2_SRGB_BLOCK:
		return "BC2_SRGB_BLOCK"
	case FORMAT_BC3_UNORM_BLOCK:
		return "BC3_UNORM_BLOCK"
	case FORMAT_BC3_SRGB_BLOCK:
		return "BC3_SRGB_BLOCK"
	case FORMAT_BC4_UNORM_BLOCK:
		return "BC4_UNORM_BLOCK"
	case FORMAT_BC4_SNORM_BLOCK:
		return "BC4_SNORM_BLOCK"
	case FORMAT_BC5_UNORM_BLOCK:
		return "BC5_UNORM_BLOCK"
	case FORMAT_BC5_SNORM_BLOCK:
		return "BC5_SNORM_BLOCK"
	case FORMAT_BC6H_UFLOAT_BLOCK:
		return "BC6H_UFLOAT_BLOCK"
	case FORMAT_BC6H_SFLOAT_BLOCK:
		return "BC6H_SFLOAT_BLOCK"
	case FORMAT_BC7_UNORM_BLOCK:
		return "BC7_UNORM_BLOCK"
	case FORMAT_BC7_SRGB_BLOCK:
		return "BC7_SRGB_BLOCK"
	case FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		return "ETC2_R8G8B8_UNORM_BLOCK"
	case FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		return "ETC2_R8G8B8_SRGB_BLOCK"
	case FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		return "ETC2_R8G8B8A1_UNORM_BLOCK"
	case FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		return "ETC2_R8G8B8A1_SRGB_BLOCK"
	case FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		return "ETC2_R8G8B8A8_UNORM_BLOCK"
	case FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		return "ETC2_R8G8B8A8_SRGB_BLOCK"
	case FORMAT_EAC_R11_UNORM_BLOCK:
		return "EAC_R11_UNORM_BLOCK"
	case FORMAT_EAC_R11_SNORM_BLOCK:
		return "EAC_R11_SNORM_BLOCK"
	case FORMAT_EAC_R11G11_UNORM_BLOCK:
		return "EAC_R11G11_UNORM_BLOCK"
	case FORMAT_EAC_R11G11_SNORM_BLOCK:
		return "EAC_R11G11_SNORM_BLOCK"
	case FORMAT_ASTC_4x4_UNORM_BLOCK:
		return "ASTC_4x4_UNORM_BLOCK"
	case FORMAT_ASTC_4x4_SRGB_BLOCK:
		return "ASTC_4x4_SRGB_BLOCK"
	case FORMAT_ASTC_5x4_UNORM_BLOCK:
		return "ASTC_5x4_UNORM_BLOCK"
	case FORMAT_ASTC_5x4_SRGB_BLOCK:
		return "ASTC_5x4_SRGB_BLOCK"
	case FORMAT_ASTC_5x5_UNORM_BLOCK:
		return "ASTC_5x5_UNORM_BLOCK"
	case FORMAT_ASTC_5x5_SRGB_BLOCK:
		return "ASTC_5x5_SRGB_BLOCK"
	case FORMAT_ASTC_6x5_UNORM_BLOCK:
		return "ASTC_6x5_UNORM_BLOCK"
	case FORMAT_ASTC_6x5_SRGB_BLOCK:
		return "ASTC_6x5_SRGB_BLOCK"
	case FORMAT_ASTC_6x6_UNORM_BLOCK:
		return "ASTC_6x6_UNORM_BLOCK"
	case FORMAT_ASTC_6x6_SRGB_BLOCK:
		return "ASTC_6x6_SRGB_BLOCK"
	case FORMAT_ASTC_8x5_UNORM_BLOCK:
		return "ASTC_8x5_UNORM_BLOCK"
	case FORMAT_ASTC_8x5_SRGB_BLOCK:
		return "ASTC_8x5_SRGB_BLOCK"
	case FORMAT_ASTC_8x6_UNORM_BLOCK:
		return "ASTC_8x6_UNORM_BLOCK"
	case FORMAT_ASTC_8x6_SRGB_BLOCK:
		return "ASTC_8x6_SRGB_BLOCK"
	case FORMAT_ASTC_8x8_UNORM_BLOCK:
		return "ASTC_8x8_UNORM_BLOCK"
	case FORMAT_ASTC_8x8_SRGB_BLOCK:
		return "ASTC_8x8_SRGB_BLOCK"
	case FORMAT_ASTC_10x5_UNORM_BLOCK:
		return "ASTC_10x5_UNORM_BLOCK"
	case FORMAT_ASTC_10x5_SRGB_BLOCK:
		return "ASTC_10x5_SRGB_BLOCK"
	case FORMAT_ASTC_10x6_UNORM_BLOCK:
		return "ASTC_10x6_UNORM_BLOCK"
	case FORMAT_ASTC_10x6_SRGB_BLOCK:
		return "ASTC_10x6_SRGB_BLOCK"
	case FORMAT_ASTC_10x8_UNORM_BLOCK:
		return "ASTC_10x8_UNORM_BLOCK"
	case FORMAT_ASTC_10x8_SRGB_BLOCK:
		return "ASTC_10x8_SRGB_BLOCK"
	case FORMAT_ASTC_10x10_UNORM_BLOCK:
		return "ASTC_10x10_UNORM_BLOCK"
	case FORMAT_ASTC_10x10_SRGB_BLOCK:
		return "ASTC_10x10_SRGB_BLOCK"
	case FORMAT_ASTC_12x10_UNORM_BLOCK:
		return "ASTC_12x10_UNORM_BLOCK"
	case FORMAT_ASTC_12x10_SRGB_BLOCK:
		return "ASTC_12x10_SRGB_BLOCK"
	case FORMAT_ASTC_12x12_UNORM_BLOCK:
		return "ASTC_12x12_UNORM_BLOCK"
	case FORMAT_ASTC_12x12_SRGB_BLOCK:
		return "ASTC_12x12_SRGB_BLOCK"
	case FORMAT_G8B8G8R8_422_UNORM:
		return "G8B8G8R8_422_UNORM"
	case FORMAT_B8G8R8G8_422_UNORM:
		return "B8G8R8G8_422_UNORM"
	case FORMAT_R10X6_UNORM_PACK16:
		return "R10X6_UNORM_PACK16"
	case FORMAT_R10X6G10X6_UNORM_2PACK16:
		return "R10X6G10X6_UNORM_2PACK16"
	case FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:
		return "R10X6G10X6B10X6A10X6_UNORM_4PACK16"
	case FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
		return "G10X6B10X6G10X6R10X6_422_UNORM_4PACK16"
	case FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
		return "B10X6G10X6R10X6G10X6_422_UNORM_4PACK16"
	case FORMAT_R12X4_UNORM_PACK16:
		return "R12X4_UNORM_PACK16"
	case FORMAT_R12X4G12X4_UNORM_2PACK16:
		return "R12X4G12X4_UNORM_2PACK16"
	case FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:
		return "R12X4G12X4B12X4A12X4_UNORM_4PACK16"
	case FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
		return "G12X4B12X4G12X4R12X4_422_UNORM_4PACK16"
	case FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
		return "B12X4G12X4R12X4G12X4_422_UNORM_4PACK16"
	case FORMAT_G16B16G16R16_422_UNORM:
		return "G16B16G16R16_422_UNORM"
	case FORMAT_B16G16R16G16_422_UNORM:
		return "B16G16R16G16_422_UNORM"
	case FORMAT_A4R4G4B4_UNORM_PACK16:
		return "A4R4G4B4_UNORM_PACK16"
	case FORMAT_A4B4G4R4_UNORM_PACK16:
		return "A4B4G4R4_UNORM_PACK16"
	case FORMAT_ASTC_4x4_SFLOAT_BLOCK:
		return "ASTC_4x4_SFLOAT_BLOCK"
	case FORMAT_ASTC_5x4_SFLOAT_BLOCK:
		return "ASTC_5x4_SFLOAT_BLOCK"
	case FORMAT_ASTC_5x5_SFLOAT_BLOCK:
		return "ASTC_5x5_SFLOAT_BLOCK"
	case FORMAT_ASTC_6x5_SFLOAT_BLOCK:
		return "ASTC_6x5_SFLOAT_BLOCK"
	case FORMAT_ASTC_6x6_SFLOAT_BLOCK:
		return "ASTC_6x6_SFLOAT_BLOCK"
	case FORMAT_ASTC_8x5_SFLOAT_BLOCK:
		return "ASTC_8x5_SFLOAT_BLOCK"
	case FORMAT_ASTC_8x6_SFLOAT_BLOCK:
		return "ASTC_8x6_SFLOAT_BLOCK"
	case FORMAT_ASTC_8x8_SFLOAT_BLOCK:
		return "ASTC_8x8_SFLOAT_BLOCK"
	case FORMAT_ASTC_10x5_SFLOAT_BLOCK:
		return "ASTC_10x5_SFLOAT_BLOCK"
	case FORMAT_ASTC_10x6_SFLOAT_BLOCK:
		return "ASTC_10x6_SFLOAT_BLOCK"
	case FORMAT_ASTC_10x8_SFLOAT_BLOCK:
		return "ASTC_10x8_SFLOAT_BLOCK"
	case FORMAT_ASTC_10x10_SFLOAT_BLOCK:
		return "ASTC_10x10_SFLOAT_BLOCK"
	case FORMAT_ASTC_12x10_SFLOAT_BLOCK:
		return "ASTC_12x10_SFLOAT_BLOCK"
	case FORMAT_ASTC_12x12_SFLOAT_BLOCK:
		return "ASTC_12x12_SFLOAT_BLOCK"
	case FORMAT_A1B5G5R5_UNORM_PACK16:
		return "A1B5G5R5_UNORM_PACK16"
	case FORMAT_A8_UNORM:
		return "A8_UNORM"
	case FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
		return "PVRTC1_2BPP_UNORM_BLOCK_IMG"
	case FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
		return "PVRTC1_4BPP_UNORM_BLOCK_IMG"
	case FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
		return "PVRTC2_2BPP_UNORM_BLOCK_IMG"
	case FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
		return "PVRTC2_4BPP_UNORM_BLOCK_IMG"
	case FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
		return "PVRTC1_2BPP_SRGB_BLOCK_IMG"
	case FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
		return "PVRTC1_4BPP_SRGB_BLOCK_IMG"
	case FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
		return "PVRTC2_2BPP_SRGB_BLOCK_IMG"
	case FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
		return "PVRTC2_4BPP_SRGB_BLOCK_IMG"
	case FORMAT_R16G16_SFIXED5_NV:
		return "R16G16_SFIXED5_NV"
	}
	abort("Unknown format: %d", v)
	return ""
}

func (v Format) BlockSize() int32 {
	switch v {
	case FORMAT_R4G4_UNORM_PACK8:
		return 1
	case FORMAT_R4G4B4A4_UNORM_PACK16:
		return 2
	case FORMAT_B4G4R4A4_UNORM_PACK16:
		return 2
	case FORMAT_R5G6B5_UNORM_PACK16:
		return 2
	case FORMAT_B5G6R5_UNORM_PACK16:
		return 2
	case FORMAT_R5G5B5A1_UNORM_PACK16:
		return 2
	case FORMAT_B5G5R5A1_UNORM_PACK16:
		return 2
	case FORMAT_A1R5G5B5_UNORM_PACK16:
		return 2
	case FORMAT_R8_UNORM:
		return 1
	case FORMAT_R8_SNORM:
		return 1
	case FORMAT_R8_USCALED:
		return 1
	case FORMAT_R8_SSCALED:
		return 1
	case FORMAT_R8_UINT:
		return 1
	case FORMAT_R8_SINT:
		return 1
	case FORMAT_R8_SRGB:
		return 1
	case FORMAT_R8G8_UNORM:
		return 2
	case FORMAT_R8G8_SNORM:
		return 2
	case FORMAT_R8G8_USCALED:
		return 2
	case FORMAT_R8G8_SSCALED:
		return 2
	case FORMAT_R8G8_UINT:
		return 2
	case FORMAT_R8G8_SINT:
		return 2
	case FORMAT_R8G8_SRGB:
		return 2
	case FORMAT_R8G8B8_UNORM:
		return 3
	case FORMAT_R8G8B8_SNORM:
		return 3
	case FORMAT_R8G8B8_USCALED:
		return 3
	case FORMAT_R8G8B8_SSCALED:
		return 3
	case FORMAT_R8G8B8_UINT:
		return 3
	case FORMAT_R8G8B8_SINT:
		return 3
	case FORMAT_R8G8B8_SRGB:
		return 3
	case FORMAT_B8G8R8_UNORM:
		return 3
	case FORMAT_B8G8R8_SNORM:
		return 3
	case FORMAT_B8G8R8_USCALED:
		return 3
	case FORMAT_B8G8R8_SSCALED:
		return 3
	case FORMAT_B8G8R8_UINT:
		return 3
	case FORMAT_B8G8R8_SINT:
		return 3
	case FORMAT_B8G8R8_SRGB:
		return 3
	case FORMAT_R8G8B8A8_UNORM:
		return 4
	case FORMAT_R8G8B8A8_SNORM:
		return 4
	case FORMAT_R8G8B8A8_USCALED:
		return 4
	case FORMAT_R8G8B8A8_SSCALED:
		return 4
	case FORMAT_R8G8B8A8_UINT:
		return 4
	case FORMAT_R8G8B8A8_SINT:
		return 4
	case FORMAT_R8G8B8A8_SRGB:
		return 4
	case FORMAT_B8G8R8A8_UNORM:
		return 4
	case FORMAT_B8G8R8A8_SNORM:
		return 4
	case FORMAT_B8G8R8A8_USCALED:
		return 4
	case FORMAT_B8G8R8A8_SSCALED:
		return 4
	case FORMAT_B8G8R8A8_UINT:
		return 4
	case FORMAT_B8G8R8A8_SINT:
		return 4
	case FORMAT_B8G8R8A8_SRGB:
		return 4
	case FORMAT_A8B8G8R8_UNORM_PACK32:
		return 4
	case FORMAT_A8B8G8R8_SNORM_PACK32:
		return 4
	case FORMAT_A8B8G8R8_USCALED_PACK32:
		return 4
	case FORMAT_A8B8G8R8_SSCALED_PACK32:
		return 4
	case FORMAT_A8B8G8R8_UINT_PACK32:
		return 4
	case FORMAT_A8B8G8R8_SINT_PACK32:
		return 4
	case FORMAT_A8B8G8R8_SRGB_PACK32:
		return 4
	case FORMAT_A2R10G10B10_UNORM_PACK32:
		return 4
	case FORMAT_A2R10G10B10_SNORM_PACK32:
		return 4
	case FORMAT_A2R10G10B10_USCALED_PACK32:
		return 4
	case FORMAT_A2R10G10B10_SSCALED_PACK32:
		return 4
	case FORMAT_A2R10G10B10_UINT_PACK32:
		return 4
	case FORMAT_A2R10G10B10_SINT_PACK32:
		return 4
	case FORMAT_A2B10G10R10_UNORM_PACK32:
		return 4
	case FORMAT_A2B10G10R10_SNORM_PACK32:
		return 4
	case FORMAT_A2B10G10R10_USCALED_PACK32:
		return 4
	case FORMAT_A2B10G10R10_SSCALED_PACK32:
		return 4
	case FORMAT_A2B10G10R10_UINT_PACK32:
		return 4
	case FORMAT_A2B10G10R10_SINT_PACK32:
		return 4
	case FORMAT_R16_UNORM:
		return 2
	case FORMAT_R16_SNORM:
		return 2
	case FORMAT_R16_USCALED:
		return 2
	case FORMAT_R16_SSCALED:
		return 2
	case FORMAT_R16_UINT:
		return 2
	case FORMAT_R16_SINT:
		return 2
	case FORMAT_R16_SFLOAT:
		return 2
	case FORMAT_R16G16_UNORM:
		return 4
	case FORMAT_R16G16_SNORM:
		return 4
	case FORMAT_R16G16_USCALED:
		return 4
	case FORMAT_R16G16_SSCALED:
		return 4
	case FORMAT_R16G16_UINT:
		return 4
	case FORMAT_R16G16_SINT:
		return 4
	case FORMAT_R16G16_SFLOAT:
		return 4
	case FORMAT_R16G16B16_UNORM:
		return 6
	case FORMAT_R16G16B16_SNORM:
		return 6
	case FORMAT_R16G16B16_USCALED:
		return 6
	case FORMAT_R16G16B16_SSCALED:
		return 6
	case FORMAT_R16G16B16_UINT:
		return 6
	case FORMAT_R16G16B16_SINT:
		return 6
	case FORMAT_R16G16B16_SFLOAT:
		return 6
	case FORMAT_R16G16B16A16_UNORM:
		return 8
	case FORMAT_R16G16B16A16_SNORM:
		return 8
	case FORMAT_R16G16B16A16_USCALED:
		return 8
	case FORMAT_R16G16B16A16_SSCALED:
		return 8
	case FORMAT_R16G16B16A16_UINT:
		return 8
	case FORMAT_R16G16B16A16_SINT:
		return 8
	case FORMAT_R16G16B16A16_SFLOAT:
		return 8
	case FORMAT_R32_UINT:
		return 4
	case FORMAT_R32_SINT:
		return 4
	case FORMAT_R32_SFLOAT:
		return 4
	case FORMAT_R32G32_UINT:
		return 8
	case FORMAT_R32G32_SINT:
		return 8
	case FORMAT_R32G32_SFLOAT:
		return 8
	case FORMAT_R32G32B32_UINT:
		return 12
	case FORMAT_R32G32B32_SINT:
		return 12
	case FORMAT_R32G32B32_SFLOAT:
		return 12
	case FORMAT_R32G32B32A32_UINT:
		return 16
	case FORMAT_R32G32B32A32_SINT:
		return 16
	case FORMAT_R32G32B32A32_SFLOAT:
		return 16
	case FORMAT_R64_UINT:
		return 8
	case FORMAT_R64_SINT:
		return 8
	case FORMAT_R64_SFLOAT:
		return 8
	case FORMAT_R64G64_UINT:
		return 16
	case FORMAT_R64G64_SINT:
		return 16
	case FORMAT_R64G64_SFLOAT:
		return 16
	case FORMAT_R64G64B64_UINT:
		return 24
	case FORMAT_R64G64B64_SINT:
		return 24
	case FORMAT_R64G64B64_SFLOAT:
		return 24
	case FORMAT_R64G64B64A64_UINT:
		return 32
	case FORMAT_R64G64B64A64_SINT:
		return 32
	case FORMAT_R64G64B64A64_SFLOAT:
		return 32
	case FORMAT_B10G11R11_UFLOAT_PACK32:
		return 4
	case FORMAT_E5B9G9R9_UFLOAT_PACK32:
		return 4
	case FORMAT_BC1_RGB_UNORM_BLOCK:
		return 8
	case FORMAT_BC1_RGB_SRGB_BLOCK:
		return 8
	case FORMAT_BC1_RGBA_UNORM_BLOCK:
		return 8
	case FORMAT_BC1_RGBA_SRGB_BLOCK:
		return 8
	case FORMAT_BC2_UNORM_BLOCK:
		return 16
	case FORMAT_BC2_SRGB_BLOCK:
		return 16
	case FORMAT_BC3_UNORM_BLOCK:
		return 16
	case FORMAT_BC3_SRGB_BLOCK:
		return 16
	case FORMAT_BC4_UNORM_BLOCK:
		return 8
	case FORMAT_BC4_SNORM_BLOCK:
		return 8
	case FORMAT_BC5_UNORM_BLOCK:
		return 16
	case FORMAT_BC5_SNORM_BLOCK:
		return 16
	case FORMAT_BC6H_UFLOAT_BLOCK:
		return 16
	case FORMAT_BC6H_SFLOAT_BLOCK:
		return 16
	case FORMAT_BC7_UNORM_BLOCK:
		return 16
	case FORMAT_BC7_SRGB_BLOCK:
		return 16
	case FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		return 8
	case FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		return 8
	case FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		return 8
	case FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		return 8
	case FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		return 16
	case FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		return 16
	case FORMAT_EAC_R11_UNORM_BLOCK:
		return 8
	case FORMAT_EAC_R11_SNORM_BLOCK:
		return 8
	case FORMAT_EAC_R11G11_UNORM_BLOCK:
		return 16
	case FORMAT_EAC_R11G11_SNORM_BLOCK:
		return 16
	case FORMAT_ASTC_4x4_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_4x4_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_5x4_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_5x4_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_5x5_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_5x5_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_6x5_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_6x5_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_6x6_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_6x6_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_8x5_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_8x5_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_8x6_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_8x6_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_8x8_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_8x8_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_10x5_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_10x5_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_10x6_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_10x6_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_10x8_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_10x8_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_10x10_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_10x10_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_12x10_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_12x10_SRGB_BLOCK:
		return 16
	case FORMAT_ASTC_12x12_UNORM_BLOCK:
		return 16
	case FORMAT_ASTC_12x12_SRGB_BLOCK:
		return 16
	case FORMAT_G8B8G8R8_422_UNORM:
		return 4
	case FORMAT_B8G8R8G8_422_UNORM:
		return 4
	case FORMAT_R10X6_UNORM_PACK16:
		return 2
	case FORMAT_R10X6G10X6_UNORM_2PACK16:
		return 4
	case FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:
		return 8
	case FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
		return 8
	case FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
		return 8
	case FORMAT_R12X4_UNORM_PACK16:
		return 2
	case FORMAT_R12X4G12X4_UNORM_2PACK16:
		return 4
	case FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:
		return 8
	case FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
		return 8
	case FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
		return 8
	case FORMAT_G16B16G16R16_422_UNORM:
		return 8
	case FORMAT_B16G16R16G16_422_UNORM:
		return 8
	case FORMAT_A4R4G4B4_UNORM_PACK16:
		return 2
	case FORMAT_A4B4G4R4_UNORM_PACK16:
		return 2
	case FORMAT_ASTC_4x4_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_5x4_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_5x5_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_6x5_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_6x6_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_8x5_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_8x6_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_8x8_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_10x5_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_10x6_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_10x8_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_10x10_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_12x10_SFLOAT_BLOCK:
		return 16
	case FORMAT_ASTC_12x12_SFLOAT_BLOCK:
		return 16
	case FORMAT_A1B5G5R5_UNORM_PACK16:
		return 2
	case FORMAT_A8_UNORM:
		return 1
	case FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
		return 8
	case FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
		return 8
	case FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
		return 8
	case FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
		return 8
	case FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
		return 8
	case FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
		return 8
	case FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
		return 8
	case FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
		return 8
	case FORMAT_R16G16_SFIXED5_NV:
		return 4
	}
	abort("Unknown format: %d", v)
	return 0
}

func (v Format) ColorComponentFlags() ColorComponentFlags {
	switch v {
	case FORMAT_R4G4_UNORM_PACK8:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R4G4B4A4_UNORM_PACK16:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_B4G4R4A4_UNORM_PACK16:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_R5G6B5_UNORM_PACK16:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_B5G6R5_UNORM_PACK16:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_R5G5B5A1_UNORM_PACK16:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_B5G5R5A1_UNORM_PACK16:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_A1R5G5B5_UNORM_PACK16:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R8_UNORM:
		return COLOR_COMPONENT_R
	case FORMAT_R8_SNORM:
		return COLOR_COMPONENT_R
	case FORMAT_R8_USCALED:
		return COLOR_COMPONENT_R
	case FORMAT_R8_SSCALED:
		return COLOR_COMPONENT_R
	case FORMAT_R8_UINT:
		return COLOR_COMPONENT_R
	case FORMAT_R8_SINT:
		return COLOR_COMPONENT_R
	case FORMAT_R8_SRGB:
		return COLOR_COMPONENT_R
	case FORMAT_R8G8_UNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R8G8_SNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R8G8_USCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R8G8_SSCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R8G8_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R8G8_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R8G8_SRGB:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R8G8B8_UNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R8G8B8_SNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R8G8B8_USCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R8G8B8_SSCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R8G8B8_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R8G8B8_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R8G8B8_SRGB:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_B8G8R8_UNORM:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B8G8R8_SNORM:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B8G8R8_USCALED:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B8G8R8_SSCALED:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B8G8R8_UINT:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B8G8R8_SINT:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B8G8R8_SRGB:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_R8G8B8A8_UNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R8G8B8A8_SNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R8G8B8A8_USCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R8G8B8A8_SSCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R8G8B8A8_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R8G8B8A8_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R8G8B8A8_SRGB:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_B8G8R8A8_UNORM:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_B8G8R8A8_SNORM:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_B8G8R8A8_USCALED:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_B8G8R8A8_SSCALED:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_B8G8R8A8_UINT:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_B8G8R8A8_SINT:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_B8G8R8A8_SRGB:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_A
	case FORMAT_A8B8G8R8_UNORM_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A8B8G8R8_SNORM_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A8B8G8R8_USCALED_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A8B8G8R8_SSCALED_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A8B8G8R8_UINT_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A8B8G8R8_SINT_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A8B8G8R8_SRGB_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A2R10G10B10_UNORM_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_A2R10G10B10_SNORM_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_A2R10G10B10_USCALED_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_A2R10G10B10_SSCALED_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_A2R10G10B10_UINT_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_A2R10G10B10_SINT_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_A2B10G10R10_UNORM_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A2B10G10R10_SNORM_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A2B10G10R10_USCALED_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A2B10G10R10_SSCALED_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A2B10G10R10_UINT_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A2B10G10R10_SINT_PACK32:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_R16_UNORM:
		return COLOR_COMPONENT_R
	case FORMAT_R16_SNORM:
		return COLOR_COMPONENT_R
	case FORMAT_R16_USCALED:
		return COLOR_COMPONENT_R
	case FORMAT_R16_SSCALED:
		return COLOR_COMPONENT_R
	case FORMAT_R16_UINT:
		return COLOR_COMPONENT_R
	case FORMAT_R16_SINT:
		return COLOR_COMPONENT_R
	case FORMAT_R16_SFLOAT:
		return COLOR_COMPONENT_R
	case FORMAT_R16G16_UNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R16G16_SNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R16G16_USCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R16G16_SSCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R16G16_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R16G16_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R16G16_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R16G16B16_UNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R16G16B16_SNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R16G16B16_USCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R16G16B16_SSCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R16G16B16_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R16G16B16_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R16G16B16_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R16G16B16A16_UNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R16G16B16A16_SNORM:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R16G16B16A16_USCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R16G16B16A16_SSCALED:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R16G16B16A16_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R16G16B16A16_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R16G16B16A16_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R32_UINT:
		return COLOR_COMPONENT_R
	case FORMAT_R32_SINT:
		return COLOR_COMPONENT_R
	case FORMAT_R32_SFLOAT:
		return COLOR_COMPONENT_R
	case FORMAT_R32G32_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R32G32_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R32G32_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R32G32B32_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R32G32B32_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R32G32B32_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R32G32B32A32_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R32G32B32A32_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R32G32B32A32_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R64_UINT:
		return COLOR_COMPONENT_R
	case FORMAT_R64_SINT:
		return COLOR_COMPONENT_R
	case FORMAT_R64_SFLOAT:
		return COLOR_COMPONENT_R
	case FORMAT_R64G64_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R64G64_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R64G64_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R64G64B64_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R64G64B64_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R64G64B64_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_R64G64B64A64_UINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R64G64B64A64_SINT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R64G64B64A64_SFLOAT:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_B10G11R11_UFLOAT_PACK32:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_E5B9G9R9_UFLOAT_PACK32:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_BC1_RGB_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_BC1_RGB_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_BC1_RGBA_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_BC1_RGBA_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_BC2_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_BC2_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_BC3_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_BC3_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_BC4_UNORM_BLOCK:
		return COLOR_COMPONENT_R
	case FORMAT_BC4_SNORM_BLOCK:
		return COLOR_COMPONENT_R
	case FORMAT_BC5_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_BC5_SNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_BC6H_UFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_BC6H_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_BC7_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_BC7_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_EAC_R11_UNORM_BLOCK:
		return COLOR_COMPONENT_R
	case FORMAT_EAC_R11_SNORM_BLOCK:
		return COLOR_COMPONENT_R
	case FORMAT_EAC_R11G11_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_EAC_R11G11_SNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_ASTC_4x4_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_4x4_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_5x4_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_5x4_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_5x5_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_5x5_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_6x5_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_6x5_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_6x6_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_6x6_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x5_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x5_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x6_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x6_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x8_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x8_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x5_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x5_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x6_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x6_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x8_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x8_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x10_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x10_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_12x10_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_12x10_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_12x12_UNORM_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_12x12_SRGB_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_G8B8G8R8_422_UNORM:
		return COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B8G8R8G8_422_UNORM:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R10X6_UNORM_PACK16:
		return COLOR_COMPONENT_R
	case FORMAT_R10X6G10X6_UNORM_2PACK16:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
		return COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R12X4_UNORM_PACK16:
		return COLOR_COMPONENT_R
	case FORMAT_R12X4G12X4_UNORM_2PACK16:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
		return COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_G16B16G16R16_422_UNORM:
		return COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_B16G16R16G16_422_UNORM:
		return COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R | COLOR_COMPONENT_G
	case FORMAT_A4R4G4B4_UNORM_PACK16:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B
	case FORMAT_A4B4G4R4_UNORM_PACK16:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_ASTC_4x4_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_5x4_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_5x5_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_6x5_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_6x6_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x5_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x6_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_8x8_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x5_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x6_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x8_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_10x10_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_12x10_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_ASTC_12x12_SFLOAT_BLOCK:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_A1B5G5R5_UNORM_PACK16:
		return COLOR_COMPONENT_A | COLOR_COMPONENT_B | COLOR_COMPONENT_G | COLOR_COMPONENT_R
	case FORMAT_A8_UNORM:
		return COLOR_COMPONENT_A
	case FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G | COLOR_COMPONENT_B | COLOR_COMPONENT_A
	case FORMAT_R16G16_SFIXED5_NV:
		return COLOR_COMPONENT_R | COLOR_COMPONENT_G
	}
	abort("Unknown format: %d", v)
	return 0
}

func (v Format) BlockExtent() gmath.Extent3i32 {
	switch v {
	case FORMAT_BC1_RGB_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC1_RGB_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC1_RGBA_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC1_RGBA_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC2_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC2_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC3_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC3_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC4_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC4_SNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC5_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC5_SNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC6H_UFLOAT_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC6H_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC7_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_BC7_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ETC2_R8G8B8_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ETC2_R8G8B8_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_EAC_R11_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_EAC_R11_SNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_EAC_R11G11_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_EAC_R11G11_SNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ASTC_4x4_UNORM_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ASTC_4x4_SRGB_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ASTC_5x4_UNORM_BLOCK:
		return gmath.Extent3i32{X: 5, Y: 4, Z: 1}
	case FORMAT_ASTC_5x4_SRGB_BLOCK:
		return gmath.Extent3i32{X: 5, Y: 4, Z: 1}
	case FORMAT_ASTC_5x5_UNORM_BLOCK:
		return gmath.Extent3i32{X: 5, Y: 5, Z: 1}
	case FORMAT_ASTC_5x5_SRGB_BLOCK:
		return gmath.Extent3i32{X: 5, Y: 5, Z: 1}
	case FORMAT_ASTC_6x5_UNORM_BLOCK:
		return gmath.Extent3i32{X: 6, Y: 5, Z: 1}
	case FORMAT_ASTC_6x5_SRGB_BLOCK:
		return gmath.Extent3i32{X: 6, Y: 5, Z: 1}
	case FORMAT_ASTC_6x6_UNORM_BLOCK:
		return gmath.Extent3i32{X: 6, Y: 6, Z: 1}
	case FORMAT_ASTC_6x6_SRGB_BLOCK:
		return gmath.Extent3i32{X: 6, Y: 6, Z: 1}
	case FORMAT_ASTC_8x5_UNORM_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 5, Z: 1}
	case FORMAT_ASTC_8x5_SRGB_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 5, Z: 1}
	case FORMAT_ASTC_8x6_UNORM_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 6, Z: 1}
	case FORMAT_ASTC_8x6_SRGB_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 6, Z: 1}
	case FORMAT_ASTC_8x8_UNORM_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 8, Z: 1}
	case FORMAT_ASTC_8x8_SRGB_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 8, Z: 1}
	case FORMAT_ASTC_10x5_UNORM_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 5, Z: 1}
	case FORMAT_ASTC_10x5_SRGB_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 5, Z: 1}
	case FORMAT_ASTC_10x6_UNORM_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 6, Z: 1}
	case FORMAT_ASTC_10x6_SRGB_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 6, Z: 1}
	case FORMAT_ASTC_10x8_UNORM_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 8, Z: 1}
	case FORMAT_ASTC_10x8_SRGB_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 8, Z: 1}
	case FORMAT_ASTC_10x10_UNORM_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 10, Z: 1}
	case FORMAT_ASTC_10x10_SRGB_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 10, Z: 1}
	case FORMAT_ASTC_12x10_UNORM_BLOCK:
		return gmath.Extent3i32{X: 12, Y: 10, Z: 1}
	case FORMAT_ASTC_12x10_SRGB_BLOCK:
		return gmath.Extent3i32{X: 12, Y: 10, Z: 1}
	case FORMAT_ASTC_12x12_UNORM_BLOCK:
		return gmath.Extent3i32{X: 12, Y: 12, Z: 1}
	case FORMAT_ASTC_12x12_SRGB_BLOCK:
		return gmath.Extent3i32{X: 12, Y: 12, Z: 1}
	case FORMAT_G8B8G8R8_422_UNORM:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_B8G8R8G8_422_UNORM:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_G16B16G16R16_422_UNORM:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_B16G16R16G16_422_UNORM:
		return gmath.Extent3i32{X: 2, Y: 1, Z: 1}
	case FORMAT_ASTC_4x4_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_ASTC_5x4_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 5, Y: 4, Z: 1}
	case FORMAT_ASTC_5x5_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 5, Y: 5, Z: 1}
	case FORMAT_ASTC_6x5_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 6, Y: 5, Z: 1}
	case FORMAT_ASTC_6x6_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 6, Y: 6, Z: 1}
	case FORMAT_ASTC_8x5_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 5, Z: 1}
	case FORMAT_ASTC_8x6_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 6, Z: 1}
	case FORMAT_ASTC_8x8_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 8, Y: 8, Z: 1}
	case FORMAT_ASTC_10x5_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 5, Z: 1}
	case FORMAT_ASTC_10x6_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 6, Z: 1}
	case FORMAT_ASTC_10x8_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 8, Z: 1}
	case FORMAT_ASTC_10x10_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 10, Y: 10, Z: 1}
	case FORMAT_ASTC_12x10_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 12, Y: 10, Z: 1}
	case FORMAT_ASTC_12x12_SFLOAT_BLOCK:
		return gmath.Extent3i32{X: 12, Y: 12, Z: 1}
	case FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG:
		return gmath.Extent3i32{X: 8, Y: 4, Z: 1}
	case FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG:
		return gmath.Extent3i32{X: 8, Y: 4, Z: 1}
	case FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG:
		return gmath.Extent3i32{X: 8, Y: 4, Z: 1}
	case FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	case FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG:
		return gmath.Extent3i32{X: 8, Y: 4, Z: 1}
	case FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG:
		return gmath.Extent3i32{X: 4, Y: 4, Z: 1}
	default:
		return gmath.Extent3i32{X: 1, Y: 1, Z: 1}
	}
}

func (v DepthStencilFormat) HasFeatures(want FormatFeatureFlags) bool {
	return instance.formatProperties.depthFeatures(v).HasBits(want) 
}

func (v DepthStencilFormat) String() string {
	switch v {
	case 0:
		return "UNDEFINED"
	case DEPTH_STENCIL_FORMAT_D16_UNORM:
		return "D16_UNORM"
	case DEPTH_STENCIL_FORMAT_X8_D24_UNORM_PACK32:
		return "X8_D24_UNORM_PACK32"
	case DEPTH_STENCIL_FORMAT_D32_SFLOAT:
		return "D32_SFLOAT"
	case DEPTH_STENCIL_FORMAT_S8_UINT:
		return "S8_UINT"
	case DEPTH_STENCIL_FORMAT_D16_UNORM_S8_UINT:
		return "D16_UNORM_S8_UINT"
	case DEPTH_STENCIL_FORMAT_D24_UNORM_S8_UINT:
		return "D24_UNORM_S8_UINT"
	case DEPTH_STENCIL_FORMAT_D32_SFLOAT_S8_UINT:
		return "D32_SFLOAT_S8_UINT"
	}
	abort("Unknown depth stencil format: %d", v)
	return ""
}
