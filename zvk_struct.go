// go run vk_gen.go
// Code generated by the command above; DO NOT EDIT.

package vxr

/*
	#cgo pkg-config: vxr

	#include "vxr/vxr.h"
*/
import "C"
import (
	"encoding/json"
	"goarrg.com/debug"
	"goarrg.com/rhi/vxr/internal/vk"
)

type VkFeatureStruct interface {
	sType() C.VkStructureType
	enabledList() []C.size_t
	extension() string
}

type VkFeatureMap map[string]VkFeatureStruct
func (m VkFeatureMap) UnmarshalJSON(b []byte) error {
	var rawMap map[string]json.RawMessage
	if err := json.Unmarshal(b, &rawMap); err != nil {
		return err
	}
	for k, v := range rawMap {
		switch k {
		case "VkPhysicalDevice16BitStorageFeatures":
			target := VkPhysicalDevice16BitStorageFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevice8BitStorageFeatures":
			target := VkPhysicalDevice8BitStorageFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceASTCDecodeFeaturesEXT":
			target := VkPhysicalDeviceASTCDecodeFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceAccelerationStructureFeaturesKHR":
			target := VkPhysicalDeviceAccelerationStructureFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceAddressBindingReportFeaturesEXT":
			target := VkPhysicalDeviceAddressBindingReportFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceAmigoProfilingFeaturesSEC":
			target := VkPhysicalDeviceAmigoProfilingFeaturesSEC{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceAntiLagFeaturesAMD":
			target := VkPhysicalDeviceAntiLagFeaturesAMD{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT":
			target := VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT":
			target := VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT":
			target := VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceBorderColorSwizzleFeaturesEXT":
			target := VkPhysicalDeviceBorderColorSwizzleFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceBufferDeviceAddressFeatures":
			target := VkPhysicalDeviceBufferDeviceAddressFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceClusterAccelerationStructureFeaturesNV":
			target := VkPhysicalDeviceClusterAccelerationStructureFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI":
			target := VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI":
			target := VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCoherentMemoryFeaturesAMD":
			target := VkPhysicalDeviceCoherentMemoryFeaturesAMD{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceColorWriteEnableFeaturesEXT":
			target := VkPhysicalDeviceColorWriteEnableFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCommandBufferInheritanceFeaturesNV":
			target := VkPhysicalDeviceCommandBufferInheritanceFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR":
			target := VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceComputeShaderDerivativesFeaturesNV":
			target := VkPhysicalDeviceComputeShaderDerivativesFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceConditionalRenderingFeaturesEXT":
			target := VkPhysicalDeviceConditionalRenderingFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCooperativeMatrix2FeaturesNV":
			target := VkPhysicalDeviceCooperativeMatrix2FeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCooperativeMatrixFeaturesKHR":
			target := VkPhysicalDeviceCooperativeMatrixFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCooperativeMatrixFeaturesNV":
			target := VkPhysicalDeviceCooperativeMatrixFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCooperativeVectorFeaturesNV":
			target := VkPhysicalDeviceCooperativeVectorFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCopyMemoryIndirectFeaturesNV":
			target := VkPhysicalDeviceCopyMemoryIndirectFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCornerSampledImageFeaturesNV":
			target := VkPhysicalDeviceCornerSampledImageFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCoverageReductionModeFeaturesNV":
			target := VkPhysicalDeviceCoverageReductionModeFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCubicClampFeaturesQCOM":
			target := VkPhysicalDeviceCubicClampFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCubicWeightsFeaturesQCOM":
			target := VkPhysicalDeviceCubicWeightsFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceCustomBorderColorFeaturesEXT":
			target := VkPhysicalDeviceCustomBorderColorFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDataGraphFeaturesARM":
			target := VkPhysicalDeviceDataGraphFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV":
			target := VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDepthBiasControlFeaturesEXT":
			target := VkPhysicalDeviceDepthBiasControlFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDepthClampControlFeaturesEXT":
			target := VkPhysicalDeviceDepthClampControlFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDepthClampZeroOneFeaturesEXT":
			target := VkPhysicalDeviceDepthClampZeroOneFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDepthClampZeroOneFeaturesKHR":
			target := VkPhysicalDeviceDepthClampZeroOneFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDepthClipControlFeaturesEXT":
			target := VkPhysicalDeviceDepthClipControlFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDepthClipEnableFeaturesEXT":
			target := VkPhysicalDeviceDepthClipEnableFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDescriptorBufferFeaturesEXT":
			target := VkPhysicalDeviceDescriptorBufferFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDescriptorBufferTensorFeaturesARM":
			target := VkPhysicalDeviceDescriptorBufferTensorFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDescriptorIndexingFeatures":
			target := VkPhysicalDeviceDescriptorIndexingFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV":
			target := VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE":
			target := VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV":
			target := VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT":
			target := VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV":
			target := VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDeviceMemoryReportFeaturesEXT":
			target := VkPhysicalDeviceDeviceMemoryReportFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDiagnosticsConfigFeaturesNV":
			target := VkPhysicalDeviceDiagnosticsConfigFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDynamicRenderingFeatures":
			target := VkPhysicalDeviceDynamicRenderingFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDynamicRenderingLocalReadFeatures":
			target := VkPhysicalDeviceDynamicRenderingLocalReadFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR":
			target := VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT":
			target := VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceExclusiveScissorFeaturesNV":
			target := VkPhysicalDeviceExclusiveScissorFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceExtendedDynamicState3FeaturesEXT":
			target := VkPhysicalDeviceExtendedDynamicState3FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV":
			target := VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceExternalMemoryRDMAFeaturesNV":
			target := VkPhysicalDeviceExternalMemoryRDMAFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFaultFeaturesEXT":
			target := VkPhysicalDeviceFaultFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFeatures":
			target := VkPhysicalDeviceFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFormatPackFeaturesARM":
			target := VkPhysicalDeviceFormatPackFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentDensityMap2FeaturesEXT":
			target := VkPhysicalDeviceFragmentDensityMap2FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentDensityMapFeaturesEXT":
			target := VkPhysicalDeviceFragmentDensityMapFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE":
			target := VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT":
			target := VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM":
			target := VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR":
			target := VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV":
			target := VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT":
			target := VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV":
			target := VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFragmentShadingRateFeaturesKHR":
			target := VkPhysicalDeviceFragmentShadingRateFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceFrameBoundaryFeaturesEXT":
			target := VkPhysicalDeviceFrameBoundaryFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceGlobalPriorityQueryFeatures":
			target := VkPhysicalDeviceGlobalPriorityQueryFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT":
			target := VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR":
			target := VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT":
			target := VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceHdrVividFeaturesHUAWEI":
			target := VkPhysicalDeviceHdrVividFeaturesHUAWEI{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceHostImageCopyFeatures":
			target := VkPhysicalDeviceHostImageCopyFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceHostImageCopyFeaturesEXT":
			target := VkPhysicalDeviceHostImageCopyFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceHostQueryResetFeatures":
			target := VkPhysicalDeviceHostQueryResetFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImage2DViewOf3DFeaturesEXT":
			target := VkPhysicalDeviceImage2DViewOf3DFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageAlignmentControlFeaturesMESA":
			target := VkPhysicalDeviceImageAlignmentControlFeaturesMESA{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageCompressionControlFeaturesEXT":
			target := VkPhysicalDeviceImageCompressionControlFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT":
			target := VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageProcessing2FeaturesQCOM":
			target := VkPhysicalDeviceImageProcessing2FeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageProcessingFeaturesQCOM":
			target := VkPhysicalDeviceImageProcessingFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageRobustnessFeatures":
			target := VkPhysicalDeviceImageRobustnessFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT":
			target := VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImageViewMinLodFeaturesEXT":
			target := VkPhysicalDeviceImageViewMinLodFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceImagelessFramebufferFeatures":
			target := VkPhysicalDeviceImagelessFramebufferFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceIndexTypeUint8Features":
			target := VkPhysicalDeviceIndexTypeUint8Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceIndexTypeUint8FeaturesEXT":
			target := VkPhysicalDeviceIndexTypeUint8FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceIndexTypeUint8FeaturesKHR":
			target := VkPhysicalDeviceIndexTypeUint8FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceInheritedViewportScissorFeaturesNV":
			target := VkPhysicalDeviceInheritedViewportScissorFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceInlineUniformBlockFeatures":
			target := VkPhysicalDeviceInlineUniformBlockFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceInvocationMaskFeaturesHUAWEI":
			target := VkPhysicalDeviceInvocationMaskFeaturesHUAWEI{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceLegacyDitheringFeaturesEXT":
			target := VkPhysicalDeviceLegacyDitheringFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT":
			target := VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceLineRasterizationFeatures":
			target := VkPhysicalDeviceLineRasterizationFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceLineRasterizationFeaturesEXT":
			target := VkPhysicalDeviceLineRasterizationFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceLineRasterizationFeaturesKHR":
			target := VkPhysicalDeviceLineRasterizationFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceLinearColorAttachmentFeaturesNV":
			target := VkPhysicalDeviceLinearColorAttachmentFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance4Features":
			target := VkPhysicalDeviceMaintenance4Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance5Features":
			target := VkPhysicalDeviceMaintenance5Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance5FeaturesKHR":
			target := VkPhysicalDeviceMaintenance5FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance6Features":
			target := VkPhysicalDeviceMaintenance6Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance6FeaturesKHR":
			target := VkPhysicalDeviceMaintenance6FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance7FeaturesKHR":
			target := VkPhysicalDeviceMaintenance7FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance8FeaturesKHR":
			target := VkPhysicalDeviceMaintenance8FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMaintenance9FeaturesKHR":
			target := VkPhysicalDeviceMaintenance9FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMapMemoryPlacedFeaturesEXT":
			target := VkPhysicalDeviceMapMemoryPlacedFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMemoryDecompressionFeaturesNV":
			target := VkPhysicalDeviceMemoryDecompressionFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMemoryPriorityFeaturesEXT":
			target := VkPhysicalDeviceMemoryPriorityFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMeshShaderFeaturesEXT":
			target := VkPhysicalDeviceMeshShaderFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMeshShaderFeaturesNV":
			target := VkPhysicalDeviceMeshShaderFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMultiDrawFeaturesEXT":
			target := VkPhysicalDeviceMultiDrawFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT":
			target := VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMultiviewFeatures":
			target := VkPhysicalDeviceMultiviewFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM":
			target := VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM":
			target := VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT":
			target := VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE":
			target := VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceNestedCommandBufferFeaturesEXT":
			target := VkPhysicalDeviceNestedCommandBufferFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT":
			target := VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceOpacityMicromapFeaturesEXT":
			target := VkPhysicalDeviceOpacityMicromapFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceOpticalFlowFeaturesNV":
			target := VkPhysicalDeviceOpticalFlowFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT":
			target := VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV":
			target := VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePerStageDescriptorSetFeaturesNV":
			target := VkPhysicalDevicePerStageDescriptorSetFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePerformanceQueryFeaturesKHR":
			target := VkPhysicalDevicePerformanceQueryFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineBinaryFeaturesKHR":
			target := VkPhysicalDevicePipelineBinaryFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC":
			target := VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineCreationCacheControlFeatures":
			target := VkPhysicalDevicePipelineCreationCacheControlFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR":
			target := VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT":
			target := VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineOpacityMicromapFeaturesARM":
			target := VkPhysicalDevicePipelineOpacityMicromapFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelinePropertiesFeaturesEXT":
			target := VkPhysicalDevicePipelinePropertiesFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineProtectedAccessFeatures":
			target := VkPhysicalDevicePipelineProtectedAccessFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineProtectedAccessFeaturesEXT":
			target := VkPhysicalDevicePipelineProtectedAccessFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineRobustnessFeatures":
			target := VkPhysicalDevicePipelineRobustnessFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePipelineRobustnessFeaturesEXT":
			target := VkPhysicalDevicePipelineRobustnessFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePresentBarrierFeaturesNV":
			target := VkPhysicalDevicePresentBarrierFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePresentId2FeaturesKHR":
			target := VkPhysicalDevicePresentId2FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePresentIdFeaturesKHR":
			target := VkPhysicalDevicePresentIdFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT":
			target := VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR":
			target := VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePresentWait2FeaturesKHR":
			target := VkPhysicalDevicePresentWait2FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePresentWaitFeaturesKHR":
			target := VkPhysicalDevicePresentWaitFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT":
			target := VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT":
			target := VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDevicePrivateDataFeatures":
			target := VkPhysicalDevicePrivateDataFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceProtectedMemoryFeatures":
			target := VkPhysicalDeviceProtectedMemoryFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceProvokingVertexFeaturesEXT":
			target := VkPhysicalDeviceProvokingVertexFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT":
			target := VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM":
			target := VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT":
			target := VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRawAccessChainsFeaturesNV":
			target := VkPhysicalDeviceRawAccessChainsFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayQueryFeaturesKHR":
			target := VkPhysicalDeviceRayQueryFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV":
			target := VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV":
			target := VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR":
			target := VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayTracingMotionBlurFeaturesNV":
			target := VkPhysicalDeviceRayTracingMotionBlurFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayTracingPipelineFeaturesKHR":
			target := VkPhysicalDeviceRayTracingPipelineFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR":
			target := VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRayTracingValidationFeaturesNV":
			target := VkPhysicalDeviceRayTracingValidationFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG":
			target := VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRenderPassStripedFeaturesARM":
			target := VkPhysicalDeviceRenderPassStripedFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV":
			target := VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRobustness2FeaturesEXT":
			target := VkPhysicalDeviceRobustness2FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceRobustness2FeaturesKHR":
			target := VkPhysicalDeviceRobustness2FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSamplerYcbcrConversionFeatures":
			target := VkPhysicalDeviceSamplerYCbCrConversionFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceScalarBlockLayoutFeatures":
			target := VkPhysicalDeviceScalarBlockLayoutFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSchedulingControlsFeaturesARM":
			target := VkPhysicalDeviceSchedulingControlsFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures":
			target := VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV":
			target := VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT":
			target := VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderAtomicFloatFeaturesEXT":
			target := VkPhysicalDeviceShaderAtomicFloatFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderAtomicInt64Features":
			target := VkPhysicalDeviceShaderAtomicInt64Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderBfloat16FeaturesKHR":
			target := VkPhysicalDeviceShaderBfloat16FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderClockFeaturesKHR":
			target := VkPhysicalDeviceShaderClockFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM":
			target := VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures":
			target := VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderDrawParametersFeatures":
			target := VkPhysicalDeviceShaderDrawParametersFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD":
			target := VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderExpectAssumeFeatures":
			target := VkPhysicalDeviceShaderExpectAssumeFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderExpectAssumeFeaturesKHR":
			target := VkPhysicalDeviceShaderExpectAssumeFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderFloat16Int8Features":
			target := VkPhysicalDeviceShaderFloat16Int8Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderFloat8FeaturesEXT":
			target := VkPhysicalDeviceShaderFloat8FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderFloatControls2Features":
			target := VkPhysicalDeviceShaderFloatControls2Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderFloatControls2FeaturesKHR":
			target := VkPhysicalDeviceShaderFloatControls2FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT":
			target := VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderImageFootprintFeaturesNV":
			target := VkPhysicalDeviceShaderImageFootprintFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderIntegerDotProductFeatures":
			target := VkPhysicalDeviceShaderIntegerDotProductFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL":
			target := VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR":
			target := VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT":
			target := VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderObjectFeaturesEXT":
			target := VkPhysicalDeviceShaderObjectFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderQuadControlFeaturesKHR":
			target := VkPhysicalDeviceShaderQuadControlFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR":
			target := VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT":
			target := VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderSMBuiltinsFeaturesNV":
			target := VkPhysicalDeviceShaderSMBuiltinsFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures":
			target := VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderSubgroupRotateFeatures":
			target := VkPhysicalDeviceShaderSubgroupRotateFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR":
			target := VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR":
			target := VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderTerminateInvocationFeatures":
			target := VkPhysicalDeviceShaderTerminateInvocationFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShaderTileImageFeaturesEXT":
			target := VkPhysicalDeviceShaderTileImageFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceShadingRateImageFeaturesNV":
			target := VkPhysicalDeviceShadingRateImageFeaturesNV{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSubgroupSizeControlFeatures":
			target := VkPhysicalDeviceSubgroupSizeControlFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT":
			target := VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSubpassShadingFeaturesHUAWEI":
			target := VkPhysicalDeviceSubpassShadingFeaturesHUAWEI{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT":
			target := VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR":
			target := VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceSynchronization2Features":
			target := VkPhysicalDeviceSynchronization2Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceTensorFeaturesARM":
			target := VkPhysicalDeviceTensorFeaturesARM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceTextureCompressionASTCHDRFeatures":
			target := VkPhysicalDeviceTextureCompressionASTCHDRFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceTileMemoryHeapFeaturesQCOM":
			target := VkPhysicalDeviceTileMemoryHeapFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceTilePropertiesFeaturesQCOM":
			target := VkPhysicalDeviceTilePropertiesFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceTileShadingFeaturesQCOM":
			target := VkPhysicalDeviceTileShadingFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceTimelineSemaphoreFeatures":
			target := VkPhysicalDeviceTimelineSemaphoreFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceTransformFeedbackFeaturesEXT":
			target := VkPhysicalDeviceTransformFeedbackFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR":
			target := VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceUniformBufferStandardLayoutFeatures":
			target := VkPhysicalDeviceUniformBufferStandardLayoutFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVariablePointersFeatures":
			target := VkPhysicalDeviceVariablePointersFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVertexAttributeDivisorFeatures":
			target := VkPhysicalDeviceVertexAttributeDivisorFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT":
			target := VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR":
			target := VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT":
			target := VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT":
			target := VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVideoDecodeVP9FeaturesKHR":
			target := VkPhysicalDeviceVideoDecodeVP9FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVideoEncodeAV1FeaturesKHR":
			target := VkPhysicalDeviceVideoEncodeAV1FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR":
			target := VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR":
			target := VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVideoMaintenance1FeaturesKHR":
			target := VkPhysicalDeviceVideoMaintenance1FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVideoMaintenance2FeaturesKHR":
			target := VkPhysicalDeviceVideoMaintenance2FeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVulkan11Features":
			target := VkPhysicalDeviceVulkan11Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVulkan12Features":
			target := VkPhysicalDeviceVulkan12Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVulkan13Features":
			target := VkPhysicalDeviceVulkan13Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVulkan14Features":
			target := VkPhysicalDeviceVulkan14Features{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceVulkanMemoryModelFeatures":
			target := VkPhysicalDeviceVulkanMemoryModelFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR":
			target := VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceYcbcrDegammaFeaturesQCOM":
			target := VkPhysicalDeviceYCbCrDegammaFeaturesQCOM{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceYcbcrImageArraysFeaturesEXT":
			target := VkPhysicalDeviceYCbCrImageArraysFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT":
			target := VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		case "VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures":
			target := VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures{}
			if err := json.Unmarshal([]byte(v), &target); err != nil {
				return err
			}
			m[k] = target
		default:
			return debug.Errorf("Unknown/Invalid struct name: %q", k)
		}
	}
	return nil
}

type VkPhysicalDevice16BitStorageFeatures struct {
	StorageBuffer16BitAccess bool `json:"storageBuffer16BitAccess,omitempty"`
	UniformAndStorageBuffer16BitAccess bool `json:"uniformAndStorageBuffer16BitAccess,omitempty"`
	StoragePushConstant16 bool `json:"storagePushConstant16,omitempty"`
	StorageInputOutput16 bool `json:"storageInputOutput16,omitempty"`
}
func (VkPhysicalDevice16BitStorageFeatures) extension() string {
	return ""
}
func (VkPhysicalDevice16BitStorageFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
}
func (s VkPhysicalDevice16BitStorageFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.StorageBuffer16BitAccess {
		list = append(list, 2)
	}
	if s.UniformAndStorageBuffer16BitAccess {
		list = append(list, 3)
	}
	if s.StoragePushConstant16 {
		list = append(list, 4)
	}
	if s.StorageInputOutput16 {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDevice8BitStorageFeatures struct {
	StorageBuffer8BitAccess bool `json:"storageBuffer8BitAccess,omitempty"`
	UniformAndStorageBuffer8BitAccess bool `json:"uniformAndStorageBuffer8BitAccess,omitempty"`
	StoragePushConstant8 bool `json:"storagePushConstant8,omitempty"`
}
func (VkPhysicalDevice8BitStorageFeatures) extension() string {
	return ""
}
func (VkPhysicalDevice8BitStorageFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES
}
func (s VkPhysicalDevice8BitStorageFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.StorageBuffer8BitAccess {
		list = append(list, 2)
	}
	if s.UniformAndStorageBuffer8BitAccess {
		list = append(list, 3)
	}
	if s.StoragePushConstant8 {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceASTCDecodeFeaturesEXT struct {
	DecodeModeSharedExponent bool `json:"decodeModeSharedExponent,omitempty"`
}
func (VkPhysicalDeviceASTCDecodeFeaturesEXT) extension() string {
	return "VK_EXT_astc_decode_mode"
}
func (VkPhysicalDeviceASTCDecodeFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT
}
func (s VkPhysicalDeviceASTCDecodeFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DecodeModeSharedExponent {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAccelerationStructureFeaturesKHR struct {
	AccelerationStructure bool `json:"accelerationStructure,omitempty"`
	AccelerationStructureCaptureReplay bool `json:"accelerationStructureCaptureReplay,omitempty"`
	AccelerationStructureIndirectBuild bool `json:"accelerationStructureIndirectBuild,omitempty"`
	AccelerationStructureHostCommands bool `json:"accelerationStructureHostCommands,omitempty"`
	DescriptorBindingAccelerationStructureUpdateAfterBind bool `json:"descriptorBindingAccelerationStructureUpdateAfterBind,omitempty"`
}
func (VkPhysicalDeviceAccelerationStructureFeaturesKHR) extension() string {
	return "VK_KHR_acceleration_structure"
}
func (VkPhysicalDeviceAccelerationStructureFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR
}
func (s VkPhysicalDeviceAccelerationStructureFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 5)
	if s.AccelerationStructure {
		list = append(list, 2)
	}
	if s.AccelerationStructureCaptureReplay {
		list = append(list, 3)
	}
	if s.AccelerationStructureIndirectBuild {
		list = append(list, 4)
	}
	if s.AccelerationStructureHostCommands {
		list = append(list, 5)
	}
	if s.DescriptorBindingAccelerationStructureUpdateAfterBind {
		list = append(list, 6)
	}
	return list
}
type VkPhysicalDeviceAddressBindingReportFeaturesEXT struct {
	ReportAddressBinding bool `json:"reportAddressBinding,omitempty"`
}
func (VkPhysicalDeviceAddressBindingReportFeaturesEXT) extension() string {
	return "VK_EXT_device_address_binding_report"
}
func (VkPhysicalDeviceAddressBindingReportFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT
}
func (s VkPhysicalDeviceAddressBindingReportFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ReportAddressBinding {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAmigoProfilingFeaturesSEC struct {
	AmigoProfiling bool `json:"amigoProfiling,omitempty"`
}
func (VkPhysicalDeviceAmigoProfilingFeaturesSEC) extension() string {
	return "VK_SEC_amigo_profiling"
}
func (VkPhysicalDeviceAmigoProfilingFeaturesSEC) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC
}
func (s VkPhysicalDeviceAmigoProfilingFeaturesSEC) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AmigoProfiling {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAntiLagFeaturesAMD struct {
	AntiLag bool `json:"antiLag,omitempty"`
}
func (VkPhysicalDeviceAntiLagFeaturesAMD) extension() string {
	return "VK_AMD_anti_lag"
}
func (VkPhysicalDeviceAntiLagFeaturesAMD) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD
}
func (s VkPhysicalDeviceAntiLagFeaturesAMD) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AntiLag {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT struct {
	AttachmentFeedbackLoopDynamicState bool `json:"attachmentFeedbackLoopDynamicState,omitempty"`
}
func (VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) extension() string {
	return "VK_EXT_attachment_feedback_loop_dynamic_state"
}
func (VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT
}
func (s VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AttachmentFeedbackLoopDynamicState {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT struct {
	AttachmentFeedbackLoopLayout bool `json:"attachmentFeedbackLoopLayout,omitempty"`
}
func (VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) extension() string {
	return "VK_EXT_attachment_feedback_loop_layout"
}
func (VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT
}
func (s VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AttachmentFeedbackLoopLayout {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT struct {
	AdvancedBlendCoherentOperations bool `json:"advancedBlendCoherentOperations,omitempty"`
}
func (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) extension() string {
	return "VK_EXT_blend_operation_advanced"
}
func (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT
}
func (s VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AdvancedBlendCoherentOperations {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceBorderColorSwizzleFeaturesEXT struct {
	BorderColorSwizzle bool `json:"borderColorSwizzle,omitempty"`
	BorderColorSwizzleFromImage bool `json:"borderColorSwizzleFromImage,omitempty"`
}
func (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) extension() string {
	return "VK_EXT_border_color_swizzle"
}
func (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT
}
func (s VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.BorderColorSwizzle {
		list = append(list, 2)
	}
	if s.BorderColorSwizzleFromImage {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceBufferDeviceAddressFeatures struct {
	BufferDeviceAddress bool `json:"bufferDeviceAddress,omitempty"`
	BufferDeviceAddressCaptureReplay bool `json:"bufferDeviceAddressCaptureReplay,omitempty"`
	BufferDeviceAddressMultiDevice bool `json:"bufferDeviceAddressMultiDevice,omitempty"`
}
func (VkPhysicalDeviceBufferDeviceAddressFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceBufferDeviceAddressFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES
}
func (s VkPhysicalDeviceBufferDeviceAddressFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.BufferDeviceAddress {
		list = append(list, 2)
	}
	if s.BufferDeviceAddressCaptureReplay {
		list = append(list, 3)
	}
	if s.BufferDeviceAddressMultiDevice {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceClusterAccelerationStructureFeaturesNV struct {
	ClusterAccelerationStructure bool `json:"clusterAccelerationStructure,omitempty"`
}
func (VkPhysicalDeviceClusterAccelerationStructureFeaturesNV) extension() string {
	return "VK_NV_cluster_acceleration_structure"
}
func (VkPhysicalDeviceClusterAccelerationStructureFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_ACCELERATION_STRUCTURE_FEATURES_NV
}
func (s VkPhysicalDeviceClusterAccelerationStructureFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ClusterAccelerationStructure {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI struct {
	ClustercullingShader bool `json:"clustercullingShader,omitempty"`
	MultiviewClusterCullingShader bool `json:"multiviewClusterCullingShader,omitempty"`
}
func (VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_cluster_culling_shader"
}
func (VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ClustercullingShader {
		list = append(list, 2)
	}
	if s.MultiviewClusterCullingShader {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI struct {
	ClusterShadingRate bool `json:"clusterShadingRate,omitempty"`
}
func (VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_cluster_culling_shader"
}
func (VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ClusterShadingRate {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCoherentMemoryFeaturesAMD struct {
	DeviceCoherentMemory bool `json:"deviceCoherentMemory,omitempty"`
}
func (VkPhysicalDeviceCoherentMemoryFeaturesAMD) extension() string {
	return "VK_AMD_device_coherent_memory"
}
func (VkPhysicalDeviceCoherentMemoryFeaturesAMD) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD
}
func (s VkPhysicalDeviceCoherentMemoryFeaturesAMD) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DeviceCoherentMemory {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceColorWriteEnableFeaturesEXT struct {
	ColorWriteEnable bool `json:"colorWriteEnable,omitempty"`
}
func (VkPhysicalDeviceColorWriteEnableFeaturesEXT) extension() string {
	return "VK_EXT_color_write_enable"
}
func (VkPhysicalDeviceColorWriteEnableFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT
}
func (s VkPhysicalDeviceColorWriteEnableFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ColorWriteEnable {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCommandBufferInheritanceFeaturesNV struct {
	CommandBufferInheritance bool `json:"commandBufferInheritance,omitempty"`
}
func (VkPhysicalDeviceCommandBufferInheritanceFeaturesNV) extension() string {
	return "VK_NV_command_buffer_inheritance"
}
func (VkPhysicalDeviceCommandBufferInheritanceFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV
}
func (s VkPhysicalDeviceCommandBufferInheritanceFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CommandBufferInheritance {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR struct {
	ComputeDerivativeGroupQuads bool `json:"computeDerivativeGroupQuads,omitempty"`
	ComputeDerivativeGroupLinear bool `json:"computeDerivativeGroupLinear,omitempty"`
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR) extension() string {
	return "VK_KHR_compute_shader_derivatives"
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR
}
func (s VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ComputeDerivativeGroupQuads {
		list = append(list, 2)
	}
	if s.ComputeDerivativeGroupLinear {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV struct {
	ComputeDerivativeGroupQuads bool `json:"computeDerivativeGroupQuads,omitempty"`
	ComputeDerivativeGroupLinear bool `json:"computeDerivativeGroupLinear,omitempty"`
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) extension() string {
	return "VK_NV_compute_shader_derivatives"
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV
}
func (s VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ComputeDerivativeGroupQuads {
		list = append(list, 2)
	}
	if s.ComputeDerivativeGroupLinear {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceConditionalRenderingFeaturesEXT struct {
	ConditionalRendering bool `json:"conditionalRendering,omitempty"`
	InheritedConditionalRendering bool `json:"inheritedConditionalRendering,omitempty"`
}
func (VkPhysicalDeviceConditionalRenderingFeaturesEXT) extension() string {
	return "VK_EXT_conditional_rendering"
}
func (VkPhysicalDeviceConditionalRenderingFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT
}
func (s VkPhysicalDeviceConditionalRenderingFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ConditionalRendering {
		list = append(list, 2)
	}
	if s.InheritedConditionalRendering {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceCooperativeMatrix2FeaturesNV struct {
	CooperativeMatrixWorkgroupScope bool `json:"cooperativeMatrixWorkgroupScope,omitempty"`
	CooperativeMatrixFlexibleDimensions bool `json:"cooperativeMatrixFlexibleDimensions,omitempty"`
	CooperativeMatrixReductions bool `json:"cooperativeMatrixReductions,omitempty"`
	CooperativeMatrixConversions bool `json:"cooperativeMatrixConversions,omitempty"`
	CooperativeMatrixPerElementOperations bool `json:"cooperativeMatrixPerElementOperations,omitempty"`
	CooperativeMatrixTensorAddressing bool `json:"cooperativeMatrixTensorAddressing,omitempty"`
	CooperativeMatrixBlockLoads bool `json:"cooperativeMatrixBlockLoads,omitempty"`
}
func (VkPhysicalDeviceCooperativeMatrix2FeaturesNV) extension() string {
	return "VK_NV_cooperative_matrix2"
}
func (VkPhysicalDeviceCooperativeMatrix2FeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV
}
func (s VkPhysicalDeviceCooperativeMatrix2FeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 7)
	if s.CooperativeMatrixWorkgroupScope {
		list = append(list, 2)
	}
	if s.CooperativeMatrixFlexibleDimensions {
		list = append(list, 3)
	}
	if s.CooperativeMatrixReductions {
		list = append(list, 4)
	}
	if s.CooperativeMatrixConversions {
		list = append(list, 5)
	}
	if s.CooperativeMatrixPerElementOperations {
		list = append(list, 6)
	}
	if s.CooperativeMatrixTensorAddressing {
		list = append(list, 7)
	}
	if s.CooperativeMatrixBlockLoads {
		list = append(list, 8)
	}
	return list
}
type VkPhysicalDeviceCooperativeMatrixFeaturesKHR struct {
	CooperativeMatrix bool `json:"cooperativeMatrix,omitempty"`
	CooperativeMatrixRobustBufferAccess bool `json:"cooperativeMatrixRobustBufferAccess,omitempty"`
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesKHR) extension() string {
	return "VK_KHR_cooperative_matrix"
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR
}
func (s VkPhysicalDeviceCooperativeMatrixFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.CooperativeMatrix {
		list = append(list, 2)
	}
	if s.CooperativeMatrixRobustBufferAccess {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceCooperativeMatrixFeaturesNV struct {
	CooperativeMatrix bool `json:"cooperativeMatrix,omitempty"`
	CooperativeMatrixRobustBufferAccess bool `json:"cooperativeMatrixRobustBufferAccess,omitempty"`
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesNV) extension() string {
	return "VK_NV_cooperative_matrix"
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV
}
func (s VkPhysicalDeviceCooperativeMatrixFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.CooperativeMatrix {
		list = append(list, 2)
	}
	if s.CooperativeMatrixRobustBufferAccess {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceCooperativeVectorFeaturesNV struct {
	CooperativeVector bool `json:"cooperativeVector,omitempty"`
	CooperativeVectorTraining bool `json:"cooperativeVectorTraining,omitempty"`
}
func (VkPhysicalDeviceCooperativeVectorFeaturesNV) extension() string {
	return "VK_NV_cooperative_vector"
}
func (VkPhysicalDeviceCooperativeVectorFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_VECTOR_FEATURES_NV
}
func (s VkPhysicalDeviceCooperativeVectorFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.CooperativeVector {
		list = append(list, 2)
	}
	if s.CooperativeVectorTraining {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceCopyMemoryIndirectFeaturesNV struct {
	IndirectCopy bool `json:"indirectCopy,omitempty"`
}
func (VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) extension() string {
	return "VK_NV_copy_memory_indirect"
}
func (VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV
}
func (s VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndirectCopy {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCornerSampledImageFeaturesNV struct {
	CornerSampledImage bool `json:"cornerSampledImage,omitempty"`
}
func (VkPhysicalDeviceCornerSampledImageFeaturesNV) extension() string {
	return "VK_NV_corner_sampled_image"
}
func (VkPhysicalDeviceCornerSampledImageFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV
}
func (s VkPhysicalDeviceCornerSampledImageFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CornerSampledImage {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCoverageReductionModeFeaturesNV struct {
	CoverageReductionMode bool `json:"coverageReductionMode,omitempty"`
}
func (VkPhysicalDeviceCoverageReductionModeFeaturesNV) extension() string {
	return "VK_NV_coverage_reduction_mode"
}
func (VkPhysicalDeviceCoverageReductionModeFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV
}
func (s VkPhysicalDeviceCoverageReductionModeFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CoverageReductionMode {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCubicClampFeaturesQCOM struct {
	CubicRangeClamp bool `json:"cubicRangeClamp,omitempty"`
}
func (VkPhysicalDeviceCubicClampFeaturesQCOM) extension() string {
	return "VK_QCOM_filter_cubic_clamp"
}
func (VkPhysicalDeviceCubicClampFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM
}
func (s VkPhysicalDeviceCubicClampFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CubicRangeClamp {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCubicWeightsFeaturesQCOM struct {
	SelectableCubicWeights bool `json:"selectableCubicWeights,omitempty"`
}
func (VkPhysicalDeviceCubicWeightsFeaturesQCOM) extension() string {
	return "VK_QCOM_filter_cubic_weights"
}
func (VkPhysicalDeviceCubicWeightsFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM
}
func (s VkPhysicalDeviceCubicWeightsFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SelectableCubicWeights {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCustomBorderColorFeaturesEXT struct {
	CustomBorderColors bool `json:"customBorderColors,omitempty"`
	CustomBorderColorWithoutFormat bool `json:"customBorderColorWithoutFormat,omitempty"`
}
func (VkPhysicalDeviceCustomBorderColorFeaturesEXT) extension() string {
	return "VK_EXT_custom_border_color"
}
func (VkPhysicalDeviceCustomBorderColorFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT
}
func (s VkPhysicalDeviceCustomBorderColorFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.CustomBorderColors {
		list = append(list, 2)
	}
	if s.CustomBorderColorWithoutFormat {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceDataGraphFeaturesARM struct {
	DataGraph bool `json:"dataGraph,omitempty"`
	DataGraphUpdateAfterBind bool `json:"dataGraphUpdateAfterBind,omitempty"`
	DataGraphSpecializationConstants bool `json:"dataGraphSpecializationConstants,omitempty"`
	DataGraphDescriptorBuffer bool `json:"dataGraphDescriptorBuffer,omitempty"`
	DataGraphShaderModule bool `json:"dataGraphShaderModule,omitempty"`
}
func (VkPhysicalDeviceDataGraphFeaturesARM) extension() string {
	return "VK_ARM_data_graph"
}
func (VkPhysicalDeviceDataGraphFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DATA_GRAPH_FEATURES_ARM
}
func (s VkPhysicalDeviceDataGraphFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 5)
	if s.DataGraph {
		list = append(list, 2)
	}
	if s.DataGraphUpdateAfterBind {
		list = append(list, 3)
	}
	if s.DataGraphSpecializationConstants {
		list = append(list, 4)
	}
	if s.DataGraphDescriptorBuffer {
		list = append(list, 5)
	}
	if s.DataGraphShaderModule {
		list = append(list, 6)
	}
	return list
}
type VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV struct {
	DedicatedAllocationImageAliasing bool `json:"dedicatedAllocationImageAliasing,omitempty"`
}
func (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) extension() string {
	return "VK_NV_dedicated_allocation_image_aliasing"
}
func (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV
}
func (s VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DedicatedAllocationImageAliasing {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthBiasControlFeaturesEXT struct {
	DepthBiasControl bool `json:"depthBiasControl,omitempty"`
	LeastRepresentableValueForceUnormRepresentation bool `json:"leastRepresentableValueForceUnormRepresentation,omitempty"`
	FloatRepresentation bool `json:"floatRepresentation,omitempty"`
	DepthBiasExact bool `json:"depthBiasExact,omitempty"`
}
func (VkPhysicalDeviceDepthBiasControlFeaturesEXT) extension() string {
	return "VK_EXT_depth_bias_control"
}
func (VkPhysicalDeviceDepthBiasControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthBiasControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.DepthBiasControl {
		list = append(list, 2)
	}
	if s.LeastRepresentableValueForceUnormRepresentation {
		list = append(list, 3)
	}
	if s.FloatRepresentation {
		list = append(list, 4)
	}
	if s.DepthBiasExact {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDeviceDepthClampControlFeaturesEXT struct {
	DepthClampControl bool `json:"depthClampControl,omitempty"`
}
func (VkPhysicalDeviceDepthClampControlFeaturesEXT) extension() string {
	return "VK_EXT_depth_clamp_control"
}
func (VkPhysicalDeviceDepthClampControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClampControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClampControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthClampZeroOneFeaturesEXT struct {
	DepthClampZeroOne bool `json:"depthClampZeroOne,omitempty"`
}
func (VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) extension() string {
	return "VK_EXT_depth_clamp_zero_one"
}
func (VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClampZeroOne {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthClampZeroOneFeaturesKHR struct {
	DepthClampZeroOne bool `json:"depthClampZeroOne,omitempty"`
}
func (VkPhysicalDeviceDepthClampZeroOneFeaturesKHR) extension() string {
	return "VK_KHR_depth_clamp_zero_one"
}
func (VkPhysicalDeviceDepthClampZeroOneFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_KHR
}
func (s VkPhysicalDeviceDepthClampZeroOneFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClampZeroOne {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthClipControlFeaturesEXT struct {
	DepthClipControl bool `json:"depthClipControl,omitempty"`
}
func (VkPhysicalDeviceDepthClipControlFeaturesEXT) extension() string {
	return "VK_EXT_depth_clip_control"
}
func (VkPhysicalDeviceDepthClipControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClipControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClipControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthClipEnableFeaturesEXT struct {
	DepthClipEnable bool `json:"depthClipEnable,omitempty"`
}
func (VkPhysicalDeviceDepthClipEnableFeaturesEXT) extension() string {
	return "VK_EXT_depth_clip_enable"
}
func (VkPhysicalDeviceDepthClipEnableFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClipEnableFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClipEnable {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDescriptorBufferFeaturesEXT struct {
	DescriptorBuffer bool `json:"descriptorBuffer,omitempty"`
	DescriptorBufferCaptureReplay bool `json:"descriptorBufferCaptureReplay,omitempty"`
	DescriptorBufferImageLayoutIgnored bool `json:"descriptorBufferImageLayoutIgnored,omitempty"`
	DescriptorBufferPushDescriptors bool `json:"descriptorBufferPushDescriptors,omitempty"`
}
func (VkPhysicalDeviceDescriptorBufferFeaturesEXT) extension() string {
	return "VK_EXT_descriptor_buffer"
}
func (VkPhysicalDeviceDescriptorBufferFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT
}
func (s VkPhysicalDeviceDescriptorBufferFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.DescriptorBuffer {
		list = append(list, 2)
	}
	if s.DescriptorBufferCaptureReplay {
		list = append(list, 3)
	}
	if s.DescriptorBufferImageLayoutIgnored {
		list = append(list, 4)
	}
	if s.DescriptorBufferPushDescriptors {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDeviceDescriptorBufferTensorFeaturesARM struct {
	DescriptorBufferTensorDescriptors bool `json:"descriptorBufferTensorDescriptors,omitempty"`
}
func (VkPhysicalDeviceDescriptorBufferTensorFeaturesARM) extension() string {
	return "VK_ARM_tensors"
}
func (VkPhysicalDeviceDescriptorBufferTensorFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_TENSOR_FEATURES_ARM
}
func (s VkPhysicalDeviceDescriptorBufferTensorFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DescriptorBufferTensorDescriptors {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDescriptorIndexingFeatures struct {
	ShaderInputAttachmentArrayDynamicIndexing bool `json:"shaderInputAttachmentArrayDynamicIndexing,omitempty"`
	ShaderUniformTexelBufferArrayDynamicIndexing bool `json:"shaderUniformTexelBufferArrayDynamicIndexing,omitempty"`
	ShaderStorageTexelBufferArrayDynamicIndexing bool `json:"shaderStorageTexelBufferArrayDynamicIndexing,omitempty"`
	ShaderUniformBufferArrayNonUniformIndexing bool `json:"shaderUniformBufferArrayNonUniformIndexing,omitempty"`
	ShaderSampledImageArrayNonUniformIndexing bool `json:"shaderSampledImageArrayNonUniformIndexing,omitempty"`
	ShaderStorageBufferArrayNonUniformIndexing bool `json:"shaderStorageBufferArrayNonUniformIndexing,omitempty"`
	ShaderStorageImageArrayNonUniformIndexing bool `json:"shaderStorageImageArrayNonUniformIndexing,omitempty"`
	ShaderInputAttachmentArrayNonUniformIndexing bool `json:"shaderInputAttachmentArrayNonUniformIndexing,omitempty"`
	ShaderUniformTexelBufferArrayNonUniformIndexing bool `json:"shaderUniformTexelBufferArrayNonUniformIndexing,omitempty"`
	ShaderStorageTexelBufferArrayNonUniformIndexing bool `json:"shaderStorageTexelBufferArrayNonUniformIndexing,omitempty"`
	DescriptorBindingUniformBufferUpdateAfterBind bool `json:"descriptorBindingUniformBufferUpdateAfterBind,omitempty"`
	DescriptorBindingSampledImageUpdateAfterBind bool `json:"descriptorBindingSampledImageUpdateAfterBind,omitempty"`
	DescriptorBindingStorageImageUpdateAfterBind bool `json:"descriptorBindingStorageImageUpdateAfterBind,omitempty"`
	DescriptorBindingStorageBufferUpdateAfterBind bool `json:"descriptorBindingStorageBufferUpdateAfterBind,omitempty"`
	DescriptorBindingUniformTexelBufferUpdateAfterBind bool `json:"descriptorBindingUniformTexelBufferUpdateAfterBind,omitempty"`
	DescriptorBindingStorageTexelBufferUpdateAfterBind bool `json:"descriptorBindingStorageTexelBufferUpdateAfterBind,omitempty"`
	DescriptorBindingUpdateUnusedWhilePending bool `json:"descriptorBindingUpdateUnusedWhilePending,omitempty"`
	DescriptorBindingPartiallyBound bool `json:"descriptorBindingPartiallyBound,omitempty"`
	DescriptorBindingVariableDescriptorCount bool `json:"descriptorBindingVariableDescriptorCount,omitempty"`
	RuntimeDescriptorArray bool `json:"runtimeDescriptorArray,omitempty"`
}
func (VkPhysicalDeviceDescriptorIndexingFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceDescriptorIndexingFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES
}
func (s VkPhysicalDeviceDescriptorIndexingFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 20)
	if s.ShaderInputAttachmentArrayDynamicIndexing {
		list = append(list, 2)
	}
	if s.ShaderUniformTexelBufferArrayDynamicIndexing {
		list = append(list, 3)
	}
	if s.ShaderStorageTexelBufferArrayDynamicIndexing {
		list = append(list, 4)
	}
	if s.ShaderUniformBufferArrayNonUniformIndexing {
		list = append(list, 5)
	}
	if s.ShaderSampledImageArrayNonUniformIndexing {
		list = append(list, 6)
	}
	if s.ShaderStorageBufferArrayNonUniformIndexing {
		list = append(list, 7)
	}
	if s.ShaderStorageImageArrayNonUniformIndexing {
		list = append(list, 8)
	}
	if s.ShaderInputAttachmentArrayNonUniformIndexing {
		list = append(list, 9)
	}
	if s.ShaderUniformTexelBufferArrayNonUniformIndexing {
		list = append(list, 10)
	}
	if s.ShaderStorageTexelBufferArrayNonUniformIndexing {
		list = append(list, 11)
	}
	if s.DescriptorBindingUniformBufferUpdateAfterBind {
		list = append(list, 12)
	}
	if s.DescriptorBindingSampledImageUpdateAfterBind {
		list = append(list, 13)
	}
	if s.DescriptorBindingStorageImageUpdateAfterBind {
		list = append(list, 14)
	}
	if s.DescriptorBindingStorageBufferUpdateAfterBind {
		list = append(list, 15)
	}
	if s.DescriptorBindingUniformTexelBufferUpdateAfterBind {
		list = append(list, 16)
	}
	if s.DescriptorBindingStorageTexelBufferUpdateAfterBind {
		list = append(list, 17)
	}
	if s.DescriptorBindingUpdateUnusedWhilePending {
		list = append(list, 18)
	}
	if s.DescriptorBindingPartiallyBound {
		list = append(list, 19)
	}
	if s.DescriptorBindingVariableDescriptorCount {
		list = append(list, 20)
	}
	if s.RuntimeDescriptorArray {
		list = append(list, 21)
	}
	return list
}
type VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV struct {
	DescriptorPoolOverallocation bool `json:"descriptorPoolOverallocation,omitempty"`
}
func (VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) extension() string {
	return "VK_NV_descriptor_pool_overallocation"
}
func (VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV
}
func (s VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DescriptorPoolOverallocation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE struct {
	DescriptorSetHostMapping bool `json:"descriptorSetHostMapping,omitempty"`
}
func (VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) extension() string {
	return "VK_VALVE_descriptor_set_host_mapping"
}
func (VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE
}
func (s VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DescriptorSetHostMapping {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV struct {
	DeviceGeneratedCompute bool `json:"deviceGeneratedCompute,omitempty"`
	DeviceGeneratedComputePipelines bool `json:"deviceGeneratedComputePipelines,omitempty"`
	DeviceGeneratedComputeCaptureReplay bool `json:"deviceGeneratedComputeCaptureReplay,omitempty"`
}
func (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) extension() string {
	return "VK_NV_device_generated_commands_compute"
}
func (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV
}
func (s VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.DeviceGeneratedCompute {
		list = append(list, 2)
	}
	if s.DeviceGeneratedComputePipelines {
		list = append(list, 3)
	}
	if s.DeviceGeneratedComputeCaptureReplay {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT struct {
	DeviceGeneratedCommands bool `json:"deviceGeneratedCommands,omitempty"`
	DynamicGeneratedPipelineLayout bool `json:"dynamicGeneratedPipelineLayout,omitempty"`
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT) extension() string {
	return "VK_EXT_device_generated_commands"
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT
}
func (s VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.DeviceGeneratedCommands {
		list = append(list, 2)
	}
	if s.DynamicGeneratedPipelineLayout {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV struct {
	DeviceGeneratedCommands bool `json:"deviceGeneratedCommands,omitempty"`
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) extension() string {
	return "VK_NV_device_generated_commands"
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV
}
func (s VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DeviceGeneratedCommands {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDeviceMemoryReportFeaturesEXT struct {
	DeviceMemoryReport bool `json:"deviceMemoryReport,omitempty"`
}
func (VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) extension() string {
	return "VK_EXT_device_memory_report"
}
func (VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT
}
func (s VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DeviceMemoryReport {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDiagnosticsConfigFeaturesNV struct {
	DiagnosticsConfig bool `json:"diagnosticsConfig,omitempty"`
}
func (VkPhysicalDeviceDiagnosticsConfigFeaturesNV) extension() string {
	return "VK_NV_device_diagnostics_config"
}
func (VkPhysicalDeviceDiagnosticsConfigFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV
}
func (s VkPhysicalDeviceDiagnosticsConfigFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DiagnosticsConfig {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingFeatures struct {
	DynamicRendering bool `json:"dynamicRendering,omitempty"`
}
func (VkPhysicalDeviceDynamicRenderingFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceDynamicRenderingFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES
}
func (s VkPhysicalDeviceDynamicRenderingFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRendering {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingLocalReadFeatures struct {
	DynamicRenderingLocalRead bool `json:"dynamicRenderingLocalRead,omitempty"`
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES
}
func (s VkPhysicalDeviceDynamicRenderingLocalReadFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRenderingLocalRead {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR struct {
	DynamicRenderingLocalRead bool `json:"dynamicRenderingLocalRead,omitempty"`
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR) extension() string {
	return "VK_KHR_dynamic_rendering_local_read"
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR
}
func (s VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRenderingLocalRead {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT struct {
	DynamicRenderingUnusedAttachments bool `json:"dynamicRenderingUnusedAttachments,omitempty"`
}
func (VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) extension() string {
	return "VK_EXT_dynamic_rendering_unused_attachments"
}
func (VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT
}
func (s VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRenderingUnusedAttachments {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceExclusiveScissorFeaturesNV struct {
	ExclusiveScissor bool `json:"exclusiveScissor,omitempty"`
}
func (VkPhysicalDeviceExclusiveScissorFeaturesNV) extension() string {
	return "VK_NV_scissor_exclusive"
}
func (VkPhysicalDeviceExclusiveScissorFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV
}
func (s VkPhysicalDeviceExclusiveScissorFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ExclusiveScissor {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceExtendedDynamicState3FeaturesEXT struct {
	ExtendedDynamicState3TessellationDomainOrigin bool `json:"extendedDynamicState3TessellationDomainOrigin,omitempty"`
	ExtendedDynamicState3DepthClampEnable bool `json:"extendedDynamicState3DepthClampEnable,omitempty"`
	ExtendedDynamicState3PolygonMode bool `json:"extendedDynamicState3PolygonMode,omitempty"`
	ExtendedDynamicState3RasterizationSamples bool `json:"extendedDynamicState3RasterizationSamples,omitempty"`
	ExtendedDynamicState3SampleMask bool `json:"extendedDynamicState3SampleMask,omitempty"`
	ExtendedDynamicState3AlphaToCoverageEnable bool `json:"extendedDynamicState3AlphaToCoverageEnable,omitempty"`
	ExtendedDynamicState3AlphaToOneEnable bool `json:"extendedDynamicState3AlphaToOneEnable,omitempty"`
	ExtendedDynamicState3LogicOpEnable bool `json:"extendedDynamicState3LogicOpEnable,omitempty"`
	ExtendedDynamicState3ColorBlendEnable bool `json:"extendedDynamicState3ColorBlendEnable,omitempty"`
	ExtendedDynamicState3ColorBlendEquation bool `json:"extendedDynamicState3ColorBlendEquation,omitempty"`
	ExtendedDynamicState3ColorWriteMask bool `json:"extendedDynamicState3ColorWriteMask,omitempty"`
	ExtendedDynamicState3RasterizationStream bool `json:"extendedDynamicState3RasterizationStream,omitempty"`
	ExtendedDynamicState3ConservativeRasterizationMode bool `json:"extendedDynamicState3ConservativeRasterizationMode,omitempty"`
	ExtendedDynamicState3ExtraPrimitiveOverestimationSize bool `json:"extendedDynamicState3ExtraPrimitiveOverestimationSize,omitempty"`
	ExtendedDynamicState3DepthClipEnable bool `json:"extendedDynamicState3DepthClipEnable,omitempty"`
	ExtendedDynamicState3SampleLocationsEnable bool `json:"extendedDynamicState3SampleLocationsEnable,omitempty"`
	ExtendedDynamicState3ColorBlendAdvanced bool `json:"extendedDynamicState3ColorBlendAdvanced,omitempty"`
	ExtendedDynamicState3ProvokingVertexMode bool `json:"extendedDynamicState3ProvokingVertexMode,omitempty"`
	ExtendedDynamicState3LineRasterizationMode bool `json:"extendedDynamicState3LineRasterizationMode,omitempty"`
	ExtendedDynamicState3LineStippleEnable bool `json:"extendedDynamicState3LineStippleEnable,omitempty"`
	ExtendedDynamicState3DepthClipNegativeOneToOne bool `json:"extendedDynamicState3DepthClipNegativeOneToOne,omitempty"`
	ExtendedDynamicState3ViewportWScalingEnable bool `json:"extendedDynamicState3ViewportWScalingEnable,omitempty"`
	ExtendedDynamicState3ViewportSwizzle bool `json:"extendedDynamicState3ViewportSwizzle,omitempty"`
	ExtendedDynamicState3CoverageToColorEnable bool `json:"extendedDynamicState3CoverageToColorEnable,omitempty"`
	ExtendedDynamicState3CoverageToColorLocation bool `json:"extendedDynamicState3CoverageToColorLocation,omitempty"`
	ExtendedDynamicState3CoverageModulationMode bool `json:"extendedDynamicState3CoverageModulationMode,omitempty"`
	ExtendedDynamicState3CoverageModulationTableEnable bool `json:"extendedDynamicState3CoverageModulationTableEnable,omitempty"`
	ExtendedDynamicState3CoverageModulationTable bool `json:"extendedDynamicState3CoverageModulationTable,omitempty"`
	ExtendedDynamicState3CoverageReductionMode bool `json:"extendedDynamicState3CoverageReductionMode,omitempty"`
	ExtendedDynamicState3RepresentativeFragmentTestEnable bool `json:"extendedDynamicState3RepresentativeFragmentTestEnable,omitempty"`
	ExtendedDynamicState3ShadingRateImageEnable bool `json:"extendedDynamicState3ShadingRateImageEnable,omitempty"`
}
func (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) extension() string {
	return "VK_EXT_extended_dynamic_state3"
}
func (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT
}
func (s VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 31)
	if s.ExtendedDynamicState3TessellationDomainOrigin {
		list = append(list, 2)
	}
	if s.ExtendedDynamicState3DepthClampEnable {
		list = append(list, 3)
	}
	if s.ExtendedDynamicState3PolygonMode {
		list = append(list, 4)
	}
	if s.ExtendedDynamicState3RasterizationSamples {
		list = append(list, 5)
	}
	if s.ExtendedDynamicState3SampleMask {
		list = append(list, 6)
	}
	if s.ExtendedDynamicState3AlphaToCoverageEnable {
		list = append(list, 7)
	}
	if s.ExtendedDynamicState3AlphaToOneEnable {
		list = append(list, 8)
	}
	if s.ExtendedDynamicState3LogicOpEnable {
		list = append(list, 9)
	}
	if s.ExtendedDynamicState3ColorBlendEnable {
		list = append(list, 10)
	}
	if s.ExtendedDynamicState3ColorBlendEquation {
		list = append(list, 11)
	}
	if s.ExtendedDynamicState3ColorWriteMask {
		list = append(list, 12)
	}
	if s.ExtendedDynamicState3RasterizationStream {
		list = append(list, 13)
	}
	if s.ExtendedDynamicState3ConservativeRasterizationMode {
		list = append(list, 14)
	}
	if s.ExtendedDynamicState3ExtraPrimitiveOverestimationSize {
		list = append(list, 15)
	}
	if s.ExtendedDynamicState3DepthClipEnable {
		list = append(list, 16)
	}
	if s.ExtendedDynamicState3SampleLocationsEnable {
		list = append(list, 17)
	}
	if s.ExtendedDynamicState3ColorBlendAdvanced {
		list = append(list, 18)
	}
	if s.ExtendedDynamicState3ProvokingVertexMode {
		list = append(list, 19)
	}
	if s.ExtendedDynamicState3LineRasterizationMode {
		list = append(list, 20)
	}
	if s.ExtendedDynamicState3LineStippleEnable {
		list = append(list, 21)
	}
	if s.ExtendedDynamicState3DepthClipNegativeOneToOne {
		list = append(list, 22)
	}
	if s.ExtendedDynamicState3ViewportWScalingEnable {
		list = append(list, 23)
	}
	if s.ExtendedDynamicState3ViewportSwizzle {
		list = append(list, 24)
	}
	if s.ExtendedDynamicState3CoverageToColorEnable {
		list = append(list, 25)
	}
	if s.ExtendedDynamicState3CoverageToColorLocation {
		list = append(list, 26)
	}
	if s.ExtendedDynamicState3CoverageModulationMode {
		list = append(list, 27)
	}
	if s.ExtendedDynamicState3CoverageModulationTableEnable {
		list = append(list, 28)
	}
	if s.ExtendedDynamicState3CoverageModulationTable {
		list = append(list, 29)
	}
	if s.ExtendedDynamicState3CoverageReductionMode {
		list = append(list, 30)
	}
	if s.ExtendedDynamicState3RepresentativeFragmentTestEnable {
		list = append(list, 31)
	}
	if s.ExtendedDynamicState3ShadingRateImageEnable {
		list = append(list, 32)
	}
	return list
}
type VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV struct {
	ExtendedSparseAddressSpace bool `json:"extendedSparseAddressSpace,omitempty"`
}
func (VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV) extension() string {
	return "VK_NV_extended_sparse_address_space"
}
func (VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV
}
func (s VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ExtendedSparseAddressSpace {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceExternalMemoryRDMAFeaturesNV struct {
	ExternalMemoryRDMA bool `json:"externalMemoryRDMA,omitempty"`
}
func (VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) extension() string {
	return "VK_NV_external_memory_rdma"
}
func (VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV
}
func (s VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ExternalMemoryRDMA {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFaultFeaturesEXT struct {
	DeviceFault bool `json:"deviceFault,omitempty"`
	DeviceFaultVendorBinary bool `json:"deviceFaultVendorBinary,omitempty"`
}
func (VkPhysicalDeviceFaultFeaturesEXT) extension() string {
	return "VK_EXT_device_fault"
}
func (VkPhysicalDeviceFaultFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT
}
func (s VkPhysicalDeviceFaultFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.DeviceFault {
		list = append(list, 2)
	}
	if s.DeviceFaultVendorBinary {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceFeatures struct {
	RobustBufferAccess bool `json:"robustBufferAccess,omitempty"`
	FullDrawIndexUint32 bool `json:"fullDrawIndexUint32,omitempty"`
	ImageCubeArray bool `json:"imageCubeArray,omitempty"`
	IndependentBlend bool `json:"independentBlend,omitempty"`
	GeometryShader bool `json:"geometryShader,omitempty"`
	TessellationShader bool `json:"tessellationShader,omitempty"`
	SampleRateShading bool `json:"sampleRateShading,omitempty"`
	DualSrcBlend bool `json:"dualSrcBlend,omitempty"`
	LogicOp bool `json:"logicOp,omitempty"`
	MultiDrawIndirect bool `json:"multiDrawIndirect,omitempty"`
	DrawIndirectFirstInstance bool `json:"drawIndirectFirstInstance,omitempty"`
	DepthClamp bool `json:"depthClamp,omitempty"`
	DepthBiasClamp bool `json:"depthBiasClamp,omitempty"`
	FillModeNonSolid bool `json:"fillModeNonSolid,omitempty"`
	DepthBounds bool `json:"depthBounds,omitempty"`
	WideLines bool `json:"wideLines,omitempty"`
	LargePoints bool `json:"largePoints,omitempty"`
	AlphaToOne bool `json:"alphaToOne,omitempty"`
	MultiViewport bool `json:"multiViewport,omitempty"`
	SamplerAnisotropy bool `json:"samplerAnisotropy,omitempty"`
	TextureCompressionETC2 bool `json:"textureCompressionETC2,omitempty"`
	TextureCompressionASTC_LDR bool `json:"textureCompressionASTC_LDR,omitempty"`
	TextureCompressionBC bool `json:"textureCompressionBC,omitempty"`
	OcclusionQueryPrecise bool `json:"occlusionQueryPrecise,omitempty"`
	PipelineStatisticsQuery bool `json:"pipelineStatisticsQuery,omitempty"`
	VertexPipelineStoresAndAtomics bool `json:"vertexPipelineStoresAndAtomics,omitempty"`
	FragmentStoresAndAtomics bool `json:"fragmentStoresAndAtomics,omitempty"`
	ShaderTessellationAndGeometryPointSize bool `json:"shaderTessellationAndGeometryPointSize,omitempty"`
	ShaderImageGatherExtended bool `json:"shaderImageGatherExtended,omitempty"`
	ShaderStorageImageExtendedFormats bool `json:"shaderStorageImageExtendedFormats,omitempty"`
	ShaderStorageImageMultisample bool `json:"shaderStorageImageMultisample,omitempty"`
	ShaderStorageImageReadWithoutFormat bool `json:"shaderStorageImageReadWithoutFormat,omitempty"`
	ShaderStorageImageWriteWithoutFormat bool `json:"shaderStorageImageWriteWithoutFormat,omitempty"`
	ShaderUniformBufferArrayDynamicIndexing bool `json:"shaderUniformBufferArrayDynamicIndexing,omitempty"`
	ShaderSampledImageArrayDynamicIndexing bool `json:"shaderSampledImageArrayDynamicIndexing,omitempty"`
	ShaderStorageBufferArrayDynamicIndexing bool `json:"shaderStorageBufferArrayDynamicIndexing,omitempty"`
	ShaderStorageImageArrayDynamicIndexing bool `json:"shaderStorageImageArrayDynamicIndexing,omitempty"`
	ShaderClipDistance bool `json:"shaderClipDistance,omitempty"`
	ShaderCullDistance bool `json:"shaderCullDistance,omitempty"`
	ShaderFloat64 bool `json:"shaderFloat64,omitempty"`
	ShaderInt64 bool `json:"shaderInt64,omitempty"`
	ShaderInt16 bool `json:"shaderInt16,omitempty"`
	ShaderResourceResidency bool `json:"shaderResourceResidency,omitempty"`
	ShaderResourceMinLod bool `json:"shaderResourceMinLod,omitempty"`
	SparseBinding bool `json:"sparseBinding,omitempty"`
	SparseResidencyBuffer bool `json:"sparseResidencyBuffer,omitempty"`
	SparseResidencyImage2D bool `json:"sparseResidencyImage2D,omitempty"`
	SparseResidencyImage3D bool `json:"sparseResidencyImage3D,omitempty"`
	SparseResidency2Samples bool `json:"sparseResidency2Samples,omitempty"`
	SparseResidency4Samples bool `json:"sparseResidency4Samples,omitempty"`
	SparseResidency8Samples bool `json:"sparseResidency8Samples,omitempty"`
	SparseResidency16Samples bool `json:"sparseResidency16Samples,omitempty"`
	SparseResidencyAliased bool `json:"sparseResidencyAliased,omitempty"`
	VariableMultisampleRate bool `json:"variableMultisampleRate,omitempty"`
	InheritedQueries bool `json:"inheritedQueries,omitempty"`
}
func (VkPhysicalDeviceFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
}
func (s VkPhysicalDeviceFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 55)
	if s.RobustBufferAccess {
		list = append(list, 0)
	}
	if s.FullDrawIndexUint32 {
		list = append(list, 1)
	}
	if s.ImageCubeArray {
		list = append(list, 2)
	}
	if s.IndependentBlend {
		list = append(list, 3)
	}
	if s.GeometryShader {
		list = append(list, 4)
	}
	if s.TessellationShader {
		list = append(list, 5)
	}
	if s.SampleRateShading {
		list = append(list, 6)
	}
	if s.DualSrcBlend {
		list = append(list, 7)
	}
	if s.LogicOp {
		list = append(list, 8)
	}
	if s.MultiDrawIndirect {
		list = append(list, 9)
	}
	if s.DrawIndirectFirstInstance {
		list = append(list, 10)
	}
	if s.DepthClamp {
		list = append(list, 11)
	}
	if s.DepthBiasClamp {
		list = append(list, 12)
	}
	if s.FillModeNonSolid {
		list = append(list, 13)
	}
	if s.DepthBounds {
		list = append(list, 14)
	}
	if s.WideLines {
		list = append(list, 15)
	}
	if s.LargePoints {
		list = append(list, 16)
	}
	if s.AlphaToOne {
		list = append(list, 17)
	}
	if s.MultiViewport {
		list = append(list, 18)
	}
	if s.SamplerAnisotropy {
		list = append(list, 19)
	}
	if s.TextureCompressionETC2 {
		list = append(list, 20)
	}
	if s.TextureCompressionASTC_LDR {
		list = append(list, 21)
	}
	if s.TextureCompressionBC {
		list = append(list, 22)
	}
	if s.OcclusionQueryPrecise {
		list = append(list, 23)
	}
	if s.PipelineStatisticsQuery {
		list = append(list, 24)
	}
	if s.VertexPipelineStoresAndAtomics {
		list = append(list, 25)
	}
	if s.FragmentStoresAndAtomics {
		list = append(list, 26)
	}
	if s.ShaderTessellationAndGeometryPointSize {
		list = append(list, 27)
	}
	if s.ShaderImageGatherExtended {
		list = append(list, 28)
	}
	if s.ShaderStorageImageExtendedFormats {
		list = append(list, 29)
	}
	if s.ShaderStorageImageMultisample {
		list = append(list, 30)
	}
	if s.ShaderStorageImageReadWithoutFormat {
		list = append(list, 31)
	}
	if s.ShaderStorageImageWriteWithoutFormat {
		list = append(list, 32)
	}
	if s.ShaderUniformBufferArrayDynamicIndexing {
		list = append(list, 33)
	}
	if s.ShaderSampledImageArrayDynamicIndexing {
		list = append(list, 34)
	}
	if s.ShaderStorageBufferArrayDynamicIndexing {
		list = append(list, 35)
	}
	if s.ShaderStorageImageArrayDynamicIndexing {
		list = append(list, 36)
	}
	if s.ShaderClipDistance {
		list = append(list, 37)
	}
	if s.ShaderCullDistance {
		list = append(list, 38)
	}
	if s.ShaderFloat64 {
		list = append(list, 39)
	}
	if s.ShaderInt64 {
		list = append(list, 40)
	}
	if s.ShaderInt16 {
		list = append(list, 41)
	}
	if s.ShaderResourceResidency {
		list = append(list, 42)
	}
	if s.ShaderResourceMinLod {
		list = append(list, 43)
	}
	if s.SparseBinding {
		list = append(list, 44)
	}
	if s.SparseResidencyBuffer {
		list = append(list, 45)
	}
	if s.SparseResidencyImage2D {
		list = append(list, 46)
	}
	if s.SparseResidencyImage3D {
		list = append(list, 47)
	}
	if s.SparseResidency2Samples {
		list = append(list, 48)
	}
	if s.SparseResidency4Samples {
		list = append(list, 49)
	}
	if s.SparseResidency8Samples {
		list = append(list, 50)
	}
	if s.SparseResidency16Samples {
		list = append(list, 51)
	}
	if s.SparseResidencyAliased {
		list = append(list, 52)
	}
	if s.VariableMultisampleRate {
		list = append(list, 53)
	}
	if s.InheritedQueries {
		list = append(list, 54)
	}
	return list
}
type VkPhysicalDeviceFormatPackFeaturesARM struct {
	FormatPack bool `json:"formatPack,omitempty"`
}
func (VkPhysicalDeviceFormatPackFeaturesARM) extension() string {
	return "VK_ARM_format_pack"
}
func (VkPhysicalDeviceFormatPackFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FORMAT_PACK_FEATURES_ARM
}
func (s VkPhysicalDeviceFormatPackFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FormatPack {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMap2FeaturesEXT struct {
	FragmentDensityMapDeferred bool `json:"fragmentDensityMapDeferred,omitempty"`
}
func (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) extension() string {
	return "VK_EXT_fragment_density_map2"
}
func (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT
}
func (s VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentDensityMapDeferred {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMapFeaturesEXT struct {
	FragmentDensityMap bool `json:"fragmentDensityMap,omitempty"`
	FragmentDensityMapDynamic bool `json:"fragmentDensityMapDynamic,omitempty"`
	FragmentDensityMapNonSubsampledImages bool `json:"fragmentDensityMapNonSubsampledImages,omitempty"`
}
func (VkPhysicalDeviceFragmentDensityMapFeaturesEXT) extension() string {
	return "VK_EXT_fragment_density_map"
}
func (VkPhysicalDeviceFragmentDensityMapFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT
}
func (s VkPhysicalDeviceFragmentDensityMapFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.FragmentDensityMap {
		list = append(list, 2)
	}
	if s.FragmentDensityMapDynamic {
		list = append(list, 3)
	}
	if s.FragmentDensityMapNonSubsampledImages {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE struct {
	FragmentDensityMapLayered bool `json:"fragmentDensityMapLayered,omitempty"`
}
func (VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE) extension() string {
	return "VK_VALVE_fragment_density_map_layered"
}
func (VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_LAYERED_FEATURES_VALVE
}
func (s VkPhysicalDeviceFragmentDensityMapLayeredFeaturesVALVE) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentDensityMapLayered {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT struct {
	FragmentDensityMapOffset bool `json:"fragmentDensityMapOffset,omitempty"`
}
func (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT) extension() string {
	return "VK_EXT_fragment_density_map_offset"
}
func (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_EXT
}
func (s VkPhysicalDeviceFragmentDensityMapOffsetFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentDensityMapOffset {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM struct {
	FragmentDensityMapOffset bool `json:"fragmentDensityMapOffset,omitempty"`
}
func (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) extension() string {
	return "VK_QCOM_fragment_density_map_offset"
}
func (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM
}
func (s VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentDensityMapOffset {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR struct {
	FragmentShaderBarycentric bool `json:"fragmentShaderBarycentric,omitempty"`
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) extension() string {
	return "VK_KHR_fragment_shader_barycentric"
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR
}
func (s VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentShaderBarycentric {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV struct {
	FragmentShaderBarycentric bool `json:"fragmentShaderBarycentric,omitempty"`
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV) extension() string {
	return "VK_NV_fragment_shader_barycentric"
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV
}
func (s VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentShaderBarycentric {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT struct {
	FragmentShaderSampleInterlock bool `json:"fragmentShaderSampleInterlock,omitempty"`
	FragmentShaderPixelInterlock bool `json:"fragmentShaderPixelInterlock,omitempty"`
	FragmentShaderShadingRateInterlock bool `json:"fragmentShaderShadingRateInterlock,omitempty"`
}
func (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) extension() string {
	return "VK_EXT_fragment_shader_interlock"
}
func (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT
}
func (s VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.FragmentShaderSampleInterlock {
		list = append(list, 2)
	}
	if s.FragmentShaderPixelInterlock {
		list = append(list, 3)
	}
	if s.FragmentShaderShadingRateInterlock {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV struct {
	FragmentShadingRateEnums bool `json:"fragmentShadingRateEnums,omitempty"`
	SupersampleFragmentShadingRates bool `json:"supersampleFragmentShadingRates,omitempty"`
	NoInvocationFragmentShadingRates bool `json:"noInvocationFragmentShadingRates,omitempty"`
}
func (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) extension() string {
	return "VK_NV_fragment_shading_rate_enums"
}
func (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV
}
func (s VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.FragmentShadingRateEnums {
		list = append(list, 2)
	}
	if s.SupersampleFragmentShadingRates {
		list = append(list, 3)
	}
	if s.NoInvocationFragmentShadingRates {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFragmentShadingRateFeaturesKHR struct {
	PipelineFragmentShadingRate bool `json:"pipelineFragmentShadingRate,omitempty"`
	PrimitiveFragmentShadingRate bool `json:"primitiveFragmentShadingRate,omitempty"`
	AttachmentFragmentShadingRate bool `json:"attachmentFragmentShadingRate,omitempty"`
}
func (VkPhysicalDeviceFragmentShadingRateFeaturesKHR) extension() string {
	return "VK_KHR_fragment_shading_rate"
}
func (VkPhysicalDeviceFragmentShadingRateFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR
}
func (s VkPhysicalDeviceFragmentShadingRateFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.PipelineFragmentShadingRate {
		list = append(list, 2)
	}
	if s.PrimitiveFragmentShadingRate {
		list = append(list, 3)
	}
	if s.AttachmentFragmentShadingRate {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFrameBoundaryFeaturesEXT struct {
	FrameBoundary bool `json:"frameBoundary,omitempty"`
}
func (VkPhysicalDeviceFrameBoundaryFeaturesEXT) extension() string {
	return "VK_EXT_frame_boundary"
}
func (VkPhysicalDeviceFrameBoundaryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT
}
func (s VkPhysicalDeviceFrameBoundaryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FrameBoundary {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGlobalPriorityQueryFeatures struct {
	GlobalPriorityQuery bool `json:"globalPriorityQuery,omitempty"`
}
func (VkPhysicalDeviceGlobalPriorityQueryFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceGlobalPriorityQueryFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES
}
func (s VkPhysicalDeviceGlobalPriorityQueryFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT struct {
	GlobalPriorityQuery bool `json:"globalPriorityQuery,omitempty"`
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT) extension() string {
	return "VK_EXT_global_priority_query"
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT
}
func (s VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR struct {
	GlobalPriorityQuery bool `json:"globalPriorityQuery,omitempty"`
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) extension() string {
	return "VK_KHR_global_priority"
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR
}
func (s VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT struct {
	GraphicsPipelineLibrary bool `json:"graphicsPipelineLibrary,omitempty"`
}
func (VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) extension() string {
	return "VK_EXT_graphics_pipeline_library"
}
func (VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT
}
func (s VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GraphicsPipelineLibrary {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHdrVividFeaturesHUAWEI struct {
	HdrVivid bool `json:"hdrVivid,omitempty"`
}
func (VkPhysicalDeviceHdrVividFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_hdr_vivid"
}
func (VkPhysicalDeviceHdrVividFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceHdrVividFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HdrVivid {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHostImageCopyFeatures struct {
	HostImageCopy bool `json:"hostImageCopy,omitempty"`
}
func (VkPhysicalDeviceHostImageCopyFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceHostImageCopyFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES
}
func (s VkPhysicalDeviceHostImageCopyFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HostImageCopy {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHostImageCopyFeaturesEXT struct {
	HostImageCopy bool `json:"hostImageCopy,omitempty"`
}
func (VkPhysicalDeviceHostImageCopyFeaturesEXT) extension() string {
	return "VK_EXT_host_image_copy"
}
func (VkPhysicalDeviceHostImageCopyFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT
}
func (s VkPhysicalDeviceHostImageCopyFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HostImageCopy {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHostQueryResetFeatures struct {
	HostQueryReset bool `json:"hostQueryReset,omitempty"`
}
func (VkPhysicalDeviceHostQueryResetFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceHostQueryResetFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES
}
func (s VkPhysicalDeviceHostQueryResetFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HostQueryReset {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImage2DViewOf3DFeaturesEXT struct {
	Image2DViewOf3D bool `json:"image2DViewOf3D,omitempty"`
	Sampler2DViewOf3D bool `json:"sampler2DViewOf3D,omitempty"`
}
func (VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) extension() string {
	return "VK_EXT_image_2d_view_of_3d"
}
func (VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT
}
func (s VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.Image2DViewOf3D {
		list = append(list, 2)
	}
	if s.Sampler2DViewOf3D {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceImageAlignmentControlFeaturesMESA struct {
	ImageAlignmentControl bool `json:"imageAlignmentControl,omitempty"`
}
func (VkPhysicalDeviceImageAlignmentControlFeaturesMESA) extension() string {
	return "VK_MESA_image_alignment_control"
}
func (VkPhysicalDeviceImageAlignmentControlFeaturesMESA) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA
}
func (s VkPhysicalDeviceImageAlignmentControlFeaturesMESA) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageAlignmentControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageCompressionControlFeaturesEXT struct {
	ImageCompressionControl bool `json:"imageCompressionControl,omitempty"`
}
func (VkPhysicalDeviceImageCompressionControlFeaturesEXT) extension() string {
	return "VK_EXT_image_compression_control"
}
func (VkPhysicalDeviceImageCompressionControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceImageCompressionControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageCompressionControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT struct {
	ImageCompressionControlSwapchain bool `json:"imageCompressionControlSwapchain,omitempty"`
}
func (VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) extension() string {
	return "VK_EXT_image_compression_control_swapchain"
}
func (VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT
}
func (s VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageCompressionControlSwapchain {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageProcessing2FeaturesQCOM struct {
	TextureBlockMatch2 bool `json:"textureBlockMatch2,omitempty"`
}
func (VkPhysicalDeviceImageProcessing2FeaturesQCOM) extension() string {
	return "VK_QCOM_image_processing2"
}
func (VkPhysicalDeviceImageProcessing2FeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM
}
func (s VkPhysicalDeviceImageProcessing2FeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TextureBlockMatch2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageProcessingFeaturesQCOM struct {
	TextureSampleWeighted bool `json:"textureSampleWeighted,omitempty"`
	TextureBoxFilter bool `json:"textureBoxFilter,omitempty"`
	TextureBlockMatch bool `json:"textureBlockMatch,omitempty"`
}
func (VkPhysicalDeviceImageProcessingFeaturesQCOM) extension() string {
	return "VK_QCOM_image_processing"
}
func (VkPhysicalDeviceImageProcessingFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM
}
func (s VkPhysicalDeviceImageProcessingFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.TextureSampleWeighted {
		list = append(list, 2)
	}
	if s.TextureBoxFilter {
		list = append(list, 3)
	}
	if s.TextureBlockMatch {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceImageRobustnessFeatures struct {
	RobustImageAccess bool `json:"robustImageAccess,omitempty"`
}
func (VkPhysicalDeviceImageRobustnessFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceImageRobustnessFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES
}
func (s VkPhysicalDeviceImageRobustnessFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RobustImageAccess {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT struct {
	ImageSlicedViewOf3D bool `json:"imageSlicedViewOf3D,omitempty"`
}
func (VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) extension() string {
	return "VK_EXT_image_sliced_view_of_3d"
}
func (VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT
}
func (s VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageSlicedViewOf3D {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageViewMinLodFeaturesEXT struct {
	MinLod bool `json:"minLod,omitempty"`
}
func (VkPhysicalDeviceImageViewMinLodFeaturesEXT) extension() string {
	return "VK_EXT_image_view_min_lod"
}
func (VkPhysicalDeviceImageViewMinLodFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT
}
func (s VkPhysicalDeviceImageViewMinLodFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MinLod {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImagelessFramebufferFeatures struct {
	ImagelessFramebuffer bool `json:"imagelessFramebuffer,omitempty"`
}
func (VkPhysicalDeviceImagelessFramebufferFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceImagelessFramebufferFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES
}
func (s VkPhysicalDeviceImagelessFramebufferFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImagelessFramebuffer {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceIndexTypeUint8Features struct {
	IndexTypeUint8 bool `json:"indexTypeUint8,omitempty"`
}
func (VkPhysicalDeviceIndexTypeUint8Features) extension() string {
	return ""
}
func (VkPhysicalDeviceIndexTypeUint8Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES
}
func (s VkPhysicalDeviceIndexTypeUint8Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndexTypeUint8 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceIndexTypeUint8FeaturesEXT struct {
	IndexTypeUint8 bool `json:"indexTypeUint8,omitempty"`
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesEXT) extension() string {
	return "VK_EXT_index_type_uint8"
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT
}
func (s VkPhysicalDeviceIndexTypeUint8FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndexTypeUint8 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceIndexTypeUint8FeaturesKHR struct {
	IndexTypeUint8 bool `json:"indexTypeUint8,omitempty"`
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesKHR) extension() string {
	return "VK_KHR_index_type_uint8"
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR
}
func (s VkPhysicalDeviceIndexTypeUint8FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndexTypeUint8 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceInheritedViewportScissorFeaturesNV struct {
	InheritedViewportScissor2D bool `json:"inheritedViewportScissor2D,omitempty"`
}
func (VkPhysicalDeviceInheritedViewportScissorFeaturesNV) extension() string {
	return "VK_NV_inherited_viewport_scissor"
}
func (VkPhysicalDeviceInheritedViewportScissorFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV
}
func (s VkPhysicalDeviceInheritedViewportScissorFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.InheritedViewportScissor2D {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceInlineUniformBlockFeatures struct {
	InlineUniformBlock bool `json:"inlineUniformBlock,omitempty"`
	DescriptorBindingInlineUniformBlockUpdateAfterBind bool `json:"descriptorBindingInlineUniformBlockUpdateAfterBind,omitempty"`
}
func (VkPhysicalDeviceInlineUniformBlockFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceInlineUniformBlockFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES
}
func (s VkPhysicalDeviceInlineUniformBlockFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.InlineUniformBlock {
		list = append(list, 2)
	}
	if s.DescriptorBindingInlineUniformBlockUpdateAfterBind {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceInvocationMaskFeaturesHUAWEI struct {
	InvocationMask bool `json:"invocationMask,omitempty"`
}
func (VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_invocation_mask"
}
func (VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.InvocationMask {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceLegacyDitheringFeaturesEXT struct {
	LegacyDithering bool `json:"legacyDithering,omitempty"`
}
func (VkPhysicalDeviceLegacyDitheringFeaturesEXT) extension() string {
	return "VK_EXT_legacy_dithering"
}
func (VkPhysicalDeviceLegacyDitheringFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT
}
func (s VkPhysicalDeviceLegacyDitheringFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.LegacyDithering {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT struct {
	LegacyVertexAttributes bool `json:"legacyVertexAttributes,omitempty"`
}
func (VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT) extension() string {
	return "VK_EXT_legacy_vertex_attributes"
}
func (VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT
}
func (s VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.LegacyVertexAttributes {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceLineRasterizationFeatures struct {
	RectangularLines bool `json:"rectangularLines,omitempty"`
	BresenhamLines bool `json:"bresenhamLines,omitempty"`
	SmoothLines bool `json:"smoothLines,omitempty"`
	StippledRectangularLines bool `json:"stippledRectangularLines,omitempty"`
	StippledBresenhamLines bool `json:"stippledBresenhamLines,omitempty"`
	StippledSmoothLines bool `json:"stippledSmoothLines,omitempty"`
}
func (VkPhysicalDeviceLineRasterizationFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceLineRasterizationFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES
}
func (s VkPhysicalDeviceLineRasterizationFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 6)
	if s.RectangularLines {
		list = append(list, 2)
	}
	if s.BresenhamLines {
		list = append(list, 3)
	}
	if s.SmoothLines {
		list = append(list, 4)
	}
	if s.StippledRectangularLines {
		list = append(list, 5)
	}
	if s.StippledBresenhamLines {
		list = append(list, 6)
	}
	if s.StippledSmoothLines {
		list = append(list, 7)
	}
	return list
}
type VkPhysicalDeviceLineRasterizationFeaturesEXT struct {
	RectangularLines bool `json:"rectangularLines,omitempty"`
	BresenhamLines bool `json:"bresenhamLines,omitempty"`
	SmoothLines bool `json:"smoothLines,omitempty"`
	StippledRectangularLines bool `json:"stippledRectangularLines,omitempty"`
	StippledBresenhamLines bool `json:"stippledBresenhamLines,omitempty"`
	StippledSmoothLines bool `json:"stippledSmoothLines,omitempty"`
}
func (VkPhysicalDeviceLineRasterizationFeaturesEXT) extension() string {
	return "VK_EXT_line_rasterization"
}
func (VkPhysicalDeviceLineRasterizationFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT
}
func (s VkPhysicalDeviceLineRasterizationFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 6)
	if s.RectangularLines {
		list = append(list, 2)
	}
	if s.BresenhamLines {
		list = append(list, 3)
	}
	if s.SmoothLines {
		list = append(list, 4)
	}
	if s.StippledRectangularLines {
		list = append(list, 5)
	}
	if s.StippledBresenhamLines {
		list = append(list, 6)
	}
	if s.StippledSmoothLines {
		list = append(list, 7)
	}
	return list
}
type VkPhysicalDeviceLineRasterizationFeaturesKHR struct {
	RectangularLines bool `json:"rectangularLines,omitempty"`
	BresenhamLines bool `json:"bresenhamLines,omitempty"`
	SmoothLines bool `json:"smoothLines,omitempty"`
	StippledRectangularLines bool `json:"stippledRectangularLines,omitempty"`
	StippledBresenhamLines bool `json:"stippledBresenhamLines,omitempty"`
	StippledSmoothLines bool `json:"stippledSmoothLines,omitempty"`
}
func (VkPhysicalDeviceLineRasterizationFeaturesKHR) extension() string {
	return "VK_KHR_line_rasterization"
}
func (VkPhysicalDeviceLineRasterizationFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR
}
func (s VkPhysicalDeviceLineRasterizationFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 6)
	if s.RectangularLines {
		list = append(list, 2)
	}
	if s.BresenhamLines {
		list = append(list, 3)
	}
	if s.SmoothLines {
		list = append(list, 4)
	}
	if s.StippledRectangularLines {
		list = append(list, 5)
	}
	if s.StippledBresenhamLines {
		list = append(list, 6)
	}
	if s.StippledSmoothLines {
		list = append(list, 7)
	}
	return list
}
type VkPhysicalDeviceLinearColorAttachmentFeaturesNV struct {
	LinearColorAttachment bool `json:"linearColorAttachment,omitempty"`
}
func (VkPhysicalDeviceLinearColorAttachmentFeaturesNV) extension() string {
	return "VK_NV_linear_color_attachment"
}
func (VkPhysicalDeviceLinearColorAttachmentFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV
}
func (s VkPhysicalDeviceLinearColorAttachmentFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.LinearColorAttachment {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance4Features struct {
	Maintenance4 bool `json:"maintenance4,omitempty"`
}
func (VkPhysicalDeviceMaintenance4Features) extension() string {
	return ""
}
func (VkPhysicalDeviceMaintenance4Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES
}
func (s VkPhysicalDeviceMaintenance4Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance4 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance5Features struct {
	Maintenance5 bool `json:"maintenance5,omitempty"`
}
func (VkPhysicalDeviceMaintenance5Features) extension() string {
	return ""
}
func (VkPhysicalDeviceMaintenance5Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES
}
func (s VkPhysicalDeviceMaintenance5Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance5 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance5FeaturesKHR struct {
	Maintenance5 bool `json:"maintenance5,omitempty"`
}
func (VkPhysicalDeviceMaintenance5FeaturesKHR) extension() string {
	return "VK_KHR_maintenance5"
}
func (VkPhysicalDeviceMaintenance5FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance5FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance5 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance6Features struct {
	Maintenance6 bool `json:"maintenance6,omitempty"`
}
func (VkPhysicalDeviceMaintenance6Features) extension() string {
	return ""
}
func (VkPhysicalDeviceMaintenance6Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES
}
func (s VkPhysicalDeviceMaintenance6Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance6 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance6FeaturesKHR struct {
	Maintenance6 bool `json:"maintenance6,omitempty"`
}
func (VkPhysicalDeviceMaintenance6FeaturesKHR) extension() string {
	return "VK_KHR_maintenance6"
}
func (VkPhysicalDeviceMaintenance6FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance6FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance6 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance7FeaturesKHR struct {
	Maintenance7 bool `json:"maintenance7,omitempty"`
}
func (VkPhysicalDeviceMaintenance7FeaturesKHR) extension() string {
	return "VK_KHR_maintenance7"
}
func (VkPhysicalDeviceMaintenance7FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance7FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance7 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance8FeaturesKHR struct {
	Maintenance8 bool `json:"maintenance8,omitempty"`
}
func (VkPhysicalDeviceMaintenance8FeaturesKHR) extension() string {
	return "VK_KHR_maintenance8"
}
func (VkPhysicalDeviceMaintenance8FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_8_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance8FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance8 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance9FeaturesKHR struct {
	Maintenance9 bool `json:"maintenance9,omitempty"`
}
func (VkPhysicalDeviceMaintenance9FeaturesKHR) extension() string {
	return "VK_KHR_maintenance9"
}
func (VkPhysicalDeviceMaintenance9FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_9_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance9FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance9 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMapMemoryPlacedFeaturesEXT struct {
	MemoryMapPlaced bool `json:"memoryMapPlaced,omitempty"`
	MemoryMapRangePlaced bool `json:"memoryMapRangePlaced,omitempty"`
	MemoryUnmapReserve bool `json:"memoryUnmapReserve,omitempty"`
}
func (VkPhysicalDeviceMapMemoryPlacedFeaturesEXT) extension() string {
	return "VK_EXT_map_memory_placed"
}
func (VkPhysicalDeviceMapMemoryPlacedFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT
}
func (s VkPhysicalDeviceMapMemoryPlacedFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.MemoryMapPlaced {
		list = append(list, 2)
	}
	if s.MemoryMapRangePlaced {
		list = append(list, 3)
	}
	if s.MemoryUnmapReserve {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceMemoryDecompressionFeaturesNV struct {
	MemoryDecompression bool `json:"memoryDecompression,omitempty"`
}
func (VkPhysicalDeviceMemoryDecompressionFeaturesNV) extension() string {
	return "VK_NV_memory_decompression"
}
func (VkPhysicalDeviceMemoryDecompressionFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV
}
func (s VkPhysicalDeviceMemoryDecompressionFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MemoryDecompression {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMemoryPriorityFeaturesEXT struct {
	MemoryPriority bool `json:"memoryPriority,omitempty"`
}
func (VkPhysicalDeviceMemoryPriorityFeaturesEXT) extension() string {
	return "VK_EXT_memory_priority"
}
func (VkPhysicalDeviceMemoryPriorityFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT
}
func (s VkPhysicalDeviceMemoryPriorityFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MemoryPriority {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMeshShaderFeaturesEXT struct {
	TaskShader bool `json:"taskShader,omitempty"`
	MeshShader bool `json:"meshShader,omitempty"`
	MultiviewMeshShader bool `json:"multiviewMeshShader,omitempty"`
	PrimitiveFragmentShadingRateMeshShader bool `json:"primitiveFragmentShadingRateMeshShader,omitempty"`
	MeshShaderQueries bool `json:"meshShaderQueries,omitempty"`
}
func (VkPhysicalDeviceMeshShaderFeaturesEXT) extension() string {
	return "VK_EXT_mesh_shader"
}
func (VkPhysicalDeviceMeshShaderFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT
}
func (s VkPhysicalDeviceMeshShaderFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 5)
	if s.TaskShader {
		list = append(list, 2)
	}
	if s.MeshShader {
		list = append(list, 3)
	}
	if s.MultiviewMeshShader {
		list = append(list, 4)
	}
	if s.PrimitiveFragmentShadingRateMeshShader {
		list = append(list, 5)
	}
	if s.MeshShaderQueries {
		list = append(list, 6)
	}
	return list
}
type VkPhysicalDeviceMeshShaderFeaturesNV struct {
	TaskShader bool `json:"taskShader,omitempty"`
	MeshShader bool `json:"meshShader,omitempty"`
}
func (VkPhysicalDeviceMeshShaderFeaturesNV) extension() string {
	return "VK_NV_mesh_shader"
}
func (VkPhysicalDeviceMeshShaderFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV
}
func (s VkPhysicalDeviceMeshShaderFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.TaskShader {
		list = append(list, 2)
	}
	if s.MeshShader {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceMultiDrawFeaturesEXT struct {
	MultiDraw bool `json:"multiDraw,omitempty"`
}
func (VkPhysicalDeviceMultiDrawFeaturesEXT) extension() string {
	return "VK_EXT_multi_draw"
}
func (VkPhysicalDeviceMultiDrawFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT
}
func (s VkPhysicalDeviceMultiDrawFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultiDraw {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT struct {
	MultisampledRenderToSingleSampled bool `json:"multisampledRenderToSingleSampled,omitempty"`
}
func (VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) extension() string {
	return "VK_EXT_multisampled_render_to_single_sampled"
}
func (VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT
}
func (s VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultisampledRenderToSingleSampled {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMultiviewFeatures struct {
	Multiview bool `json:"multiview,omitempty"`
	MultiviewGeometryShader bool `json:"multiviewGeometryShader,omitempty"`
	MultiviewTessellationShader bool `json:"multiviewTessellationShader,omitempty"`
}
func (VkPhysicalDeviceMultiviewFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceMultiviewFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
}
func (s VkPhysicalDeviceMultiviewFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.Multiview {
		list = append(list, 2)
	}
	if s.MultiviewGeometryShader {
		list = append(list, 3)
	}
	if s.MultiviewTessellationShader {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM struct {
	MultiviewPerViewRenderAreas bool `json:"multiviewPerViewRenderAreas,omitempty"`
}
func (VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) extension() string {
	return "VK_QCOM_multiview_per_view_render_areas"
}
func (VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM
}
func (s VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultiviewPerViewRenderAreas {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM struct {
	MultiviewPerViewViewports bool `json:"multiviewPerViewViewports,omitempty"`
}
func (VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) extension() string {
	return "VK_QCOM_multiview_per_view_viewports"
}
func (VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM
}
func (s VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultiviewPerViewViewports {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT struct {
	MutableDescriptorType bool `json:"mutableDescriptorType,omitempty"`
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) extension() string {
	return "VK_EXT_mutable_descriptor_type"
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT
}
func (s VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MutableDescriptorType {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE struct {
	MutableDescriptorType bool `json:"mutableDescriptorType,omitempty"`
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE) extension() string {
	return "VK_VALVE_mutable_descriptor_type"
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE
}
func (s VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MutableDescriptorType {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceNestedCommandBufferFeaturesEXT struct {
	NestedCommandBuffer bool `json:"nestedCommandBuffer,omitempty"`
	NestedCommandBufferRendering bool `json:"nestedCommandBufferRendering,omitempty"`
	NestedCommandBufferSimultaneousUse bool `json:"nestedCommandBufferSimultaneousUse,omitempty"`
}
func (VkPhysicalDeviceNestedCommandBufferFeaturesEXT) extension() string {
	return "VK_EXT_nested_command_buffer"
}
func (VkPhysicalDeviceNestedCommandBufferFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT
}
func (s VkPhysicalDeviceNestedCommandBufferFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.NestedCommandBuffer {
		list = append(list, 2)
	}
	if s.NestedCommandBufferRendering {
		list = append(list, 3)
	}
	if s.NestedCommandBufferSimultaneousUse {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT struct {
	NonSeamlessCubeMap bool `json:"nonSeamlessCubeMap,omitempty"`
}
func (VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) extension() string {
	return "VK_EXT_non_seamless_cube_map"
}
func (VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT
}
func (s VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.NonSeamlessCubeMap {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceOpacityMicromapFeaturesEXT struct {
	Micromap bool `json:"micromap,omitempty"`
	MicromapCaptureReplay bool `json:"micromapCaptureReplay,omitempty"`
	MicromapHostCommands bool `json:"micromapHostCommands,omitempty"`
}
func (VkPhysicalDeviceOpacityMicromapFeaturesEXT) extension() string {
	return "VK_EXT_opacity_micromap"
}
func (VkPhysicalDeviceOpacityMicromapFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT
}
func (s VkPhysicalDeviceOpacityMicromapFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.Micromap {
		list = append(list, 2)
	}
	if s.MicromapCaptureReplay {
		list = append(list, 3)
	}
	if s.MicromapHostCommands {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceOpticalFlowFeaturesNV struct {
	OpticalFlow bool `json:"opticalFlow,omitempty"`
}
func (VkPhysicalDeviceOpticalFlowFeaturesNV) extension() string {
	return "VK_NV_optical_flow"
}
func (VkPhysicalDeviceOpticalFlowFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV
}
func (s VkPhysicalDeviceOpticalFlowFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.OpticalFlow {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT struct {
	PageableDeviceLocalMemory bool `json:"pageableDeviceLocalMemory,omitempty"`
}
func (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) extension() string {
	return "VK_EXT_pageable_device_local_memory"
}
func (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT
}
func (s VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PageableDeviceLocalMemory {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV struct {
	PartitionedAccelerationStructure bool `json:"partitionedAccelerationStructure,omitempty"`
}
func (VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV) extension() string {
	return "VK_NV_partitioned_acceleration_structure"
}
func (VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PARTITIONED_ACCELERATION_STRUCTURE_FEATURES_NV
}
func (s VkPhysicalDevicePartitionedAccelerationStructureFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PartitionedAccelerationStructure {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePerStageDescriptorSetFeaturesNV struct {
	PerStageDescriptorSet bool `json:"perStageDescriptorSet,omitempty"`
	DynamicPipelineLayout bool `json:"dynamicPipelineLayout,omitempty"`
}
func (VkPhysicalDevicePerStageDescriptorSetFeaturesNV) extension() string {
	return "VK_NV_per_stage_descriptor_set"
}
func (VkPhysicalDevicePerStageDescriptorSetFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV
}
func (s VkPhysicalDevicePerStageDescriptorSetFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.PerStageDescriptorSet {
		list = append(list, 2)
	}
	if s.DynamicPipelineLayout {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDevicePerformanceQueryFeaturesKHR struct {
	PerformanceCounterQueryPools bool `json:"performanceCounterQueryPools,omitempty"`
	PerformanceCounterMultipleQueryPools bool `json:"performanceCounterMultipleQueryPools,omitempty"`
}
func (VkPhysicalDevicePerformanceQueryFeaturesKHR) extension() string {
	return "VK_KHR_performance_query"
}
func (VkPhysicalDevicePerformanceQueryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR
}
func (s VkPhysicalDevicePerformanceQueryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.PerformanceCounterQueryPools {
		list = append(list, 2)
	}
	if s.PerformanceCounterMultipleQueryPools {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDevicePipelineBinaryFeaturesKHR struct {
	PipelineBinaries bool `json:"pipelineBinaries,omitempty"`
}
func (VkPhysicalDevicePipelineBinaryFeaturesKHR) extension() string {
	return "VK_KHR_pipeline_binary"
}
func (VkPhysicalDevicePipelineBinaryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR
}
func (s VkPhysicalDevicePipelineBinaryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineBinaries {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC struct {
	PipelineCacheIncrementalMode bool `json:"pipelineCacheIncrementalMode,omitempty"`
}
func (VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC) extension() string {
	return "VK_SEC_pipeline_cache_incremental_mode"
}
func (VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CACHE_INCREMENTAL_MODE_FEATURES_SEC
}
func (s VkPhysicalDevicePipelineCacheIncrementalModeFeaturesSEC) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineCacheIncrementalMode {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineCreationCacheControlFeatures struct {
	PipelineCreationCacheControl bool `json:"pipelineCreationCacheControl,omitempty"`
}
func (VkPhysicalDevicePipelineCreationCacheControlFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePipelineCreationCacheControlFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES
}
func (s VkPhysicalDevicePipelineCreationCacheControlFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineCreationCacheControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR struct {
	PipelineExecutableInfo bool `json:"pipelineExecutableInfo,omitempty"`
}
func (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) extension() string {
	return "VK_KHR_pipeline_executable_properties"
}
func (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR
}
func (s VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineExecutableInfo {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT struct {
	PipelineLibraryGroupHandles bool `json:"pipelineLibraryGroupHandles,omitempty"`
}
func (VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_library_group_handles"
}
func (VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT
}
func (s VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineLibraryGroupHandles {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineOpacityMicromapFeaturesARM struct {
	PipelineOpacityMicromap bool `json:"pipelineOpacityMicromap,omitempty"`
}
func (VkPhysicalDevicePipelineOpacityMicromapFeaturesARM) extension() string {
	return "VK_ARM_pipeline_opacity_micromap"
}
func (VkPhysicalDevicePipelineOpacityMicromapFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_OPACITY_MICROMAP_FEATURES_ARM
}
func (s VkPhysicalDevicePipelineOpacityMicromapFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineOpacityMicromap {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelinePropertiesFeaturesEXT struct {
	PipelinePropertiesIdentifier bool `json:"pipelinePropertiesIdentifier,omitempty"`
}
func (VkPhysicalDevicePipelinePropertiesFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_properties"
}
func (VkPhysicalDevicePipelinePropertiesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT
}
func (s VkPhysicalDevicePipelinePropertiesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelinePropertiesIdentifier {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineProtectedAccessFeatures struct {
	PipelineProtectedAccess bool `json:"pipelineProtectedAccess,omitempty"`
}
func (VkPhysicalDevicePipelineProtectedAccessFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePipelineProtectedAccessFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES
}
func (s VkPhysicalDevicePipelineProtectedAccessFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineProtectedAccess {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineProtectedAccessFeaturesEXT struct {
	PipelineProtectedAccess bool `json:"pipelineProtectedAccess,omitempty"`
}
func (VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_protected_access"
}
func (VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT
}
func (s VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineProtectedAccess {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineRobustnessFeatures struct {
	PipelineRobustness bool `json:"pipelineRobustness,omitempty"`
}
func (VkPhysicalDevicePipelineRobustnessFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePipelineRobustnessFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES
}
func (s VkPhysicalDevicePipelineRobustnessFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineRobustness {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineRobustnessFeaturesEXT struct {
	PipelineRobustness bool `json:"pipelineRobustness,omitempty"`
}
func (VkPhysicalDevicePipelineRobustnessFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_robustness"
}
func (VkPhysicalDevicePipelineRobustnessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT
}
func (s VkPhysicalDevicePipelineRobustnessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineRobustness {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentBarrierFeaturesNV struct {
	PresentBarrier bool `json:"presentBarrier,omitempty"`
}
func (VkPhysicalDevicePresentBarrierFeaturesNV) extension() string {
	return "VK_NV_present_barrier"
}
func (VkPhysicalDevicePresentBarrierFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV
}
func (s VkPhysicalDevicePresentBarrierFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentBarrier {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentId2FeaturesKHR struct {
	PresentId2 bool `json:"presentId2,omitempty"`
}
func (VkPhysicalDevicePresentId2FeaturesKHR) extension() string {
	return "VK_KHR_present_id2"
}
func (VkPhysicalDevicePresentId2FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_2_FEATURES_KHR
}
func (s VkPhysicalDevicePresentId2FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentId2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentIdFeaturesKHR struct {
	PresentId bool `json:"presentId,omitempty"`
}
func (VkPhysicalDevicePresentIdFeaturesKHR) extension() string {
	return "VK_KHR_present_id"
}
func (VkPhysicalDevicePresentIdFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR
}
func (s VkPhysicalDevicePresentIdFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentId {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT struct {
	PresentModeFifoLatestReady bool `json:"presentModeFifoLatestReady,omitempty"`
}
func (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT) extension() string {
	return "VK_EXT_present_mode_fifo_latest_ready"
}
func (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT
}
func (s VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentModeFifoLatestReady {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR struct {
	PresentModeFifoLatestReady bool `json:"presentModeFifoLatestReady,omitempty"`
}
func (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR) extension() string {
	return "VK_KHR_present_mode_fifo_latest_ready"
}
func (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_KHR
}
func (s VkPhysicalDevicePresentModeFifoLatestReadyFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentModeFifoLatestReady {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentWait2FeaturesKHR struct {
	PresentWait2 bool `json:"presentWait2,omitempty"`
}
func (VkPhysicalDevicePresentWait2FeaturesKHR) extension() string {
	return "VK_KHR_present_wait2"
}
func (VkPhysicalDevicePresentWait2FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_2_FEATURES_KHR
}
func (s VkPhysicalDevicePresentWait2FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentWait2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentWaitFeaturesKHR struct {
	PresentWait bool `json:"presentWait,omitempty"`
}
func (VkPhysicalDevicePresentWaitFeaturesKHR) extension() string {
	return "VK_KHR_present_wait"
}
func (VkPhysicalDevicePresentWaitFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR
}
func (s VkPhysicalDevicePresentWaitFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentWait {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT struct {
	PrimitiveTopologyListRestart bool `json:"primitiveTopologyListRestart,omitempty"`
	PrimitiveTopologyPatchListRestart bool `json:"primitiveTopologyPatchListRestart,omitempty"`
}
func (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) extension() string {
	return "VK_EXT_primitive_topology_list_restart"
}
func (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT
}
func (s VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.PrimitiveTopologyListRestart {
		list = append(list, 2)
	}
	if s.PrimitiveTopologyPatchListRestart {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT struct {
	PrimitivesGeneratedQuery bool `json:"primitivesGeneratedQuery,omitempty"`
	PrimitivesGeneratedQueryWithRasterizerDiscard bool `json:"primitivesGeneratedQueryWithRasterizerDiscard,omitempty"`
	PrimitivesGeneratedQueryWithNonZeroStreams bool `json:"primitivesGeneratedQueryWithNonZeroStreams,omitempty"`
}
func (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) extension() string {
	return "VK_EXT_primitives_generated_query"
}
func (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT
}
func (s VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.PrimitivesGeneratedQuery {
		list = append(list, 2)
	}
	if s.PrimitivesGeneratedQueryWithRasterizerDiscard {
		list = append(list, 3)
	}
	if s.PrimitivesGeneratedQueryWithNonZeroStreams {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDevicePrivateDataFeatures struct {
	PrivateData bool `json:"privateData,omitempty"`
}
func (VkPhysicalDevicePrivateDataFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePrivateDataFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES
}
func (s VkPhysicalDevicePrivateDataFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PrivateData {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceProtectedMemoryFeatures struct {
	ProtectedMemory bool `json:"protectedMemory,omitempty"`
}
func (VkPhysicalDeviceProtectedMemoryFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceProtectedMemoryFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
}
func (s VkPhysicalDeviceProtectedMemoryFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ProtectedMemory {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceProvokingVertexFeaturesEXT struct {
	ProvokingVertexLast bool `json:"provokingVertexLast,omitempty"`
	TransformFeedbackPreservesProvokingVertex bool `json:"transformFeedbackPreservesProvokingVertex,omitempty"`
}
func (VkPhysicalDeviceProvokingVertexFeaturesEXT) extension() string {
	return "VK_EXT_provoking_vertex"
}
func (VkPhysicalDeviceProvokingVertexFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT
}
func (s VkPhysicalDeviceProvokingVertexFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ProvokingVertexLast {
		list = append(list, 2)
	}
	if s.TransformFeedbackPreservesProvokingVertex {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT struct {
	FormatRgba10x6WithoutYCbCrSampler bool `json:"formatRgba10x6WithoutYCbCrSampler,omitempty"`
}
func (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) extension() string {
	return "VK_EXT_rgba10x6_formats"
}
func (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT
}
func (s VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FormatRgba10x6WithoutYCbCrSampler {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM struct {
	RasterizationOrderColorAttachmentAccess bool `json:"rasterizationOrderColorAttachmentAccess,omitempty"`
	RasterizationOrderDepthAttachmentAccess bool `json:"rasterizationOrderDepthAttachmentAccess,omitempty"`
	RasterizationOrderStencilAttachmentAccess bool `json:"rasterizationOrderStencilAttachmentAccess,omitempty"`
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM) extension() string {
	return "VK_ARM_rasterization_order_attachment_access"
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM
}
func (s VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.RasterizationOrderColorAttachmentAccess {
		list = append(list, 2)
	}
	if s.RasterizationOrderDepthAttachmentAccess {
		list = append(list, 3)
	}
	if s.RasterizationOrderStencilAttachmentAccess {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT struct {
	RasterizationOrderColorAttachmentAccess bool `json:"rasterizationOrderColorAttachmentAccess,omitempty"`
	RasterizationOrderDepthAttachmentAccess bool `json:"rasterizationOrderDepthAttachmentAccess,omitempty"`
	RasterizationOrderStencilAttachmentAccess bool `json:"rasterizationOrderStencilAttachmentAccess,omitempty"`
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) extension() string {
	return "VK_EXT_rasterization_order_attachment_access"
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT
}
func (s VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.RasterizationOrderColorAttachmentAccess {
		list = append(list, 2)
	}
	if s.RasterizationOrderDepthAttachmentAccess {
		list = append(list, 3)
	}
	if s.RasterizationOrderStencilAttachmentAccess {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceRawAccessChainsFeaturesNV struct {
	ShaderRawAccessChains bool `json:"shaderRawAccessChains,omitempty"`
}
func (VkPhysicalDeviceRawAccessChainsFeaturesNV) extension() string {
	return "VK_NV_raw_access_chains"
}
func (VkPhysicalDeviceRawAccessChainsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV
}
func (s VkPhysicalDeviceRawAccessChainsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderRawAccessChains {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayQueryFeaturesKHR struct {
	RayQuery bool `json:"rayQuery,omitempty"`
}
func (VkPhysicalDeviceRayQueryFeaturesKHR) extension() string {
	return "VK_KHR_ray_query"
}
func (VkPhysicalDeviceRayQueryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR
}
func (s VkPhysicalDeviceRayQueryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV struct {
	RayTracingInvocationReorder bool `json:"rayTracingInvocationReorder,omitempty"`
}
func (VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) extension() string {
	return "VK_NV_ray_tracing_invocation_reorder"
}
func (VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV
}
func (s VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayTracingInvocationReorder {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV struct {
	Spheres bool `json:"spheres,omitempty"`
	LinearSweptSpheres bool `json:"linearSweptSpheres,omitempty"`
}
func (VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV) extension() string {
	return "VK_NV_ray_tracing_linear_swept_spheres"
}
func (VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_LINEAR_SWEPT_SPHERES_FEATURES_NV
}
func (s VkPhysicalDeviceRayTracingLinearSweptSpheresFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.Spheres {
		list = append(list, 2)
	}
	if s.LinearSweptSpheres {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR struct {
	RayTracingMaintenance1 bool `json:"rayTracingMaintenance1,omitempty"`
	RayTracingPipelineTraceRaysIndirect2 bool `json:"rayTracingPipelineTraceRaysIndirect2,omitempty"`
}
func (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) extension() string {
	return "VK_KHR_ray_tracing_maintenance1"
}
func (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR
}
func (s VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.RayTracingMaintenance1 {
		list = append(list, 2)
	}
	if s.RayTracingPipelineTraceRaysIndirect2 {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceRayTracingMotionBlurFeaturesNV struct {
	RayTracingMotionBlur bool `json:"rayTracingMotionBlur,omitempty"`
	RayTracingMotionBlurPipelineTraceRaysIndirect bool `json:"rayTracingMotionBlurPipelineTraceRaysIndirect,omitempty"`
}
func (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) extension() string {
	return "VK_NV_ray_tracing_motion_blur"
}
func (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV
}
func (s VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.RayTracingMotionBlur {
		list = append(list, 2)
	}
	if s.RayTracingMotionBlurPipelineTraceRaysIndirect {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceRayTracingPipelineFeaturesKHR struct {
	RayTracingPipeline bool `json:"rayTracingPipeline,omitempty"`
	RayTracingPipelineShaderGroupHandleCaptureReplay bool `json:"rayTracingPipelineShaderGroupHandleCaptureReplay,omitempty"`
	RayTracingPipelineShaderGroupHandleCaptureReplayMixed bool `json:"rayTracingPipelineShaderGroupHandleCaptureReplayMixed,omitempty"`
	RayTracingPipelineTraceRaysIndirect bool `json:"rayTracingPipelineTraceRaysIndirect,omitempty"`
	RayTraversalPrimitiveCulling bool `json:"rayTraversalPrimitiveCulling,omitempty"`
}
func (VkPhysicalDeviceRayTracingPipelineFeaturesKHR) extension() string {
	return "VK_KHR_ray_tracing_pipeline"
}
func (VkPhysicalDeviceRayTracingPipelineFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR
}
func (s VkPhysicalDeviceRayTracingPipelineFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 5)
	if s.RayTracingPipeline {
		list = append(list, 2)
	}
	if s.RayTracingPipelineShaderGroupHandleCaptureReplay {
		list = append(list, 3)
	}
	if s.RayTracingPipelineShaderGroupHandleCaptureReplayMixed {
		list = append(list, 4)
	}
	if s.RayTracingPipelineTraceRaysIndirect {
		list = append(list, 5)
	}
	if s.RayTraversalPrimitiveCulling {
		list = append(list, 6)
	}
	return list
}
type VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR struct {
	RayTracingPositionFetch bool `json:"rayTracingPositionFetch,omitempty"`
}
func (VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) extension() string {
	return "VK_KHR_ray_tracing_position_fetch"
}
func (VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR
}
func (s VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayTracingPositionFetch {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayTracingValidationFeaturesNV struct {
	RayTracingValidation bool `json:"rayTracingValidation,omitempty"`
}
func (VkPhysicalDeviceRayTracingValidationFeaturesNV) extension() string {
	return "VK_NV_ray_tracing_validation"
}
func (VkPhysicalDeviceRayTracingValidationFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV
}
func (s VkPhysicalDeviceRayTracingValidationFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayTracingValidation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG struct {
	RelaxedLineRasterization bool `json:"relaxedLineRasterization,omitempty"`
}
func (VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG) extension() string {
	return "VK_IMG_relaxed_line_rasterization"
}
func (VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG
}
func (s VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RelaxedLineRasterization {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRenderPassStripedFeaturesARM struct {
	RenderPassStriped bool `json:"renderPassStriped,omitempty"`
}
func (VkPhysicalDeviceRenderPassStripedFeaturesARM) extension() string {
	return "VK_ARM_render_pass_striped"
}
func (VkPhysicalDeviceRenderPassStripedFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM
}
func (s VkPhysicalDeviceRenderPassStripedFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RenderPassStriped {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV struct {
	RepresentativeFragmentTest bool `json:"representativeFragmentTest,omitempty"`
}
func (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) extension() string {
	return "VK_NV_representative_fragment_test"
}
func (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV
}
func (s VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RepresentativeFragmentTest {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRobustness2FeaturesEXT struct {
	RobustBufferAccess2 bool `json:"robustBufferAccess2,omitempty"`
	RobustImageAccess2 bool `json:"robustImageAccess2,omitempty"`
	NullDescriptor bool `json:"nullDescriptor,omitempty"`
}
func (VkPhysicalDeviceRobustness2FeaturesEXT) extension() string {
	return "VK_EXT_robustness2"
}
func (VkPhysicalDeviceRobustness2FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT
}
func (s VkPhysicalDeviceRobustness2FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.RobustBufferAccess2 {
		list = append(list, 2)
	}
	if s.RobustImageAccess2 {
		list = append(list, 3)
	}
	if s.NullDescriptor {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceRobustness2FeaturesKHR struct {
	RobustBufferAccess2 bool `json:"robustBufferAccess2,omitempty"`
	RobustImageAccess2 bool `json:"robustImageAccess2,omitempty"`
	NullDescriptor bool `json:"nullDescriptor,omitempty"`
}
func (VkPhysicalDeviceRobustness2FeaturesKHR) extension() string {
	return "VK_KHR_robustness2"
}
func (VkPhysicalDeviceRobustness2FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_KHR
}
func (s VkPhysicalDeviceRobustness2FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.RobustBufferAccess2 {
		list = append(list, 2)
	}
	if s.RobustImageAccess2 {
		list = append(list, 3)
	}
	if s.NullDescriptor {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceSamplerYCbCrConversionFeatures struct {
	SamplerYCbCrConversion bool `json:"samplerYcbcrConversion,omitempty"`
}
func (VkPhysicalDeviceSamplerYCbCrConversionFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceSamplerYCbCrConversionFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
}
func (s VkPhysicalDeviceSamplerYCbCrConversionFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SamplerYCbCrConversion {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceScalarBlockLayoutFeatures struct {
	ScalarBlockLayout bool `json:"scalarBlockLayout,omitempty"`
}
func (VkPhysicalDeviceScalarBlockLayoutFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceScalarBlockLayoutFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES
}
func (s VkPhysicalDeviceScalarBlockLayoutFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ScalarBlockLayout {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSchedulingControlsFeaturesARM struct {
	SchedulingControls bool `json:"schedulingControls,omitempty"`
}
func (VkPhysicalDeviceSchedulingControlsFeaturesARM) extension() string {
	return "VK_ARM_scheduling_controls"
}
func (VkPhysicalDeviceSchedulingControlsFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM
}
func (s VkPhysicalDeviceSchedulingControlsFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SchedulingControls {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures struct {
	SeparateDepthStencilLayouts bool `json:"separateDepthStencilLayouts,omitempty"`
}
func (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES
}
func (s VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SeparateDepthStencilLayouts {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV struct {
	ShaderFloat16VectorAtomics bool `json:"shaderFloat16VectorAtomics,omitempty"`
}
func (VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV) extension() string {
	return "VK_NV_shader_atomic_float16_vector"
}
func (VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV
}
func (s VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderFloat16VectorAtomics {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT struct {
	ShaderBufferFloat16Atomics bool `json:"shaderBufferFloat16Atomics,omitempty"`
	ShaderBufferFloat16AtomicAdd bool `json:"shaderBufferFloat16AtomicAdd,omitempty"`
	ShaderBufferFloat16AtomicMinMax bool `json:"shaderBufferFloat16AtomicMinMax,omitempty"`
	ShaderBufferFloat32AtomicMinMax bool `json:"shaderBufferFloat32AtomicMinMax,omitempty"`
	ShaderBufferFloat64AtomicMinMax bool `json:"shaderBufferFloat64AtomicMinMax,omitempty"`
	ShaderSharedFloat16Atomics bool `json:"shaderSharedFloat16Atomics,omitempty"`
	ShaderSharedFloat16AtomicAdd bool `json:"shaderSharedFloat16AtomicAdd,omitempty"`
	ShaderSharedFloat16AtomicMinMax bool `json:"shaderSharedFloat16AtomicMinMax,omitempty"`
	ShaderSharedFloat32AtomicMinMax bool `json:"shaderSharedFloat32AtomicMinMax,omitempty"`
	ShaderSharedFloat64AtomicMinMax bool `json:"shaderSharedFloat64AtomicMinMax,omitempty"`
	ShaderImageFloat32AtomicMinMax bool `json:"shaderImageFloat32AtomicMinMax,omitempty"`
	SparseImageFloat32AtomicMinMax bool `json:"sparseImageFloat32AtomicMinMax,omitempty"`
}
func (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) extension() string {
	return "VK_EXT_shader_atomic_float2"
}
func (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 12)
	if s.ShaderBufferFloat16Atomics {
		list = append(list, 2)
	}
	if s.ShaderBufferFloat16AtomicAdd {
		list = append(list, 3)
	}
	if s.ShaderBufferFloat16AtomicMinMax {
		list = append(list, 4)
	}
	if s.ShaderBufferFloat32AtomicMinMax {
		list = append(list, 5)
	}
	if s.ShaderBufferFloat64AtomicMinMax {
		list = append(list, 6)
	}
	if s.ShaderSharedFloat16Atomics {
		list = append(list, 7)
	}
	if s.ShaderSharedFloat16AtomicAdd {
		list = append(list, 8)
	}
	if s.ShaderSharedFloat16AtomicMinMax {
		list = append(list, 9)
	}
	if s.ShaderSharedFloat32AtomicMinMax {
		list = append(list, 10)
	}
	if s.ShaderSharedFloat64AtomicMinMax {
		list = append(list, 11)
	}
	if s.ShaderImageFloat32AtomicMinMax {
		list = append(list, 12)
	}
	if s.SparseImageFloat32AtomicMinMax {
		list = append(list, 13)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicFloatFeaturesEXT struct {
	ShaderBufferFloat32Atomics bool `json:"shaderBufferFloat32Atomics,omitempty"`
	ShaderBufferFloat32AtomicAdd bool `json:"shaderBufferFloat32AtomicAdd,omitempty"`
	ShaderBufferFloat64Atomics bool `json:"shaderBufferFloat64Atomics,omitempty"`
	ShaderBufferFloat64AtomicAdd bool `json:"shaderBufferFloat64AtomicAdd,omitempty"`
	ShaderSharedFloat32Atomics bool `json:"shaderSharedFloat32Atomics,omitempty"`
	ShaderSharedFloat32AtomicAdd bool `json:"shaderSharedFloat32AtomicAdd,omitempty"`
	ShaderSharedFloat64Atomics bool `json:"shaderSharedFloat64Atomics,omitempty"`
	ShaderSharedFloat64AtomicAdd bool `json:"shaderSharedFloat64AtomicAdd,omitempty"`
	ShaderImageFloat32Atomics bool `json:"shaderImageFloat32Atomics,omitempty"`
	ShaderImageFloat32AtomicAdd bool `json:"shaderImageFloat32AtomicAdd,omitempty"`
	SparseImageFloat32Atomics bool `json:"sparseImageFloat32Atomics,omitempty"`
	SparseImageFloat32AtomicAdd bool `json:"sparseImageFloat32AtomicAdd,omitempty"`
}
func (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) extension() string {
	return "VK_EXT_shader_atomic_float"
}
func (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 12)
	if s.ShaderBufferFloat32Atomics {
		list = append(list, 2)
	}
	if s.ShaderBufferFloat32AtomicAdd {
		list = append(list, 3)
	}
	if s.ShaderBufferFloat64Atomics {
		list = append(list, 4)
	}
	if s.ShaderBufferFloat64AtomicAdd {
		list = append(list, 5)
	}
	if s.ShaderSharedFloat32Atomics {
		list = append(list, 6)
	}
	if s.ShaderSharedFloat32AtomicAdd {
		list = append(list, 7)
	}
	if s.ShaderSharedFloat64Atomics {
		list = append(list, 8)
	}
	if s.ShaderSharedFloat64AtomicAdd {
		list = append(list, 9)
	}
	if s.ShaderImageFloat32Atomics {
		list = append(list, 10)
	}
	if s.ShaderImageFloat32AtomicAdd {
		list = append(list, 11)
	}
	if s.SparseImageFloat32Atomics {
		list = append(list, 12)
	}
	if s.SparseImageFloat32AtomicAdd {
		list = append(list, 13)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicInt64Features struct {
	ShaderBufferInt64Atomics bool `json:"shaderBufferInt64Atomics,omitempty"`
	ShaderSharedInt64Atomics bool `json:"shaderSharedInt64Atomics,omitempty"`
}
func (VkPhysicalDeviceShaderAtomicInt64Features) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderAtomicInt64Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES
}
func (s VkPhysicalDeviceShaderAtomicInt64Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderBufferInt64Atomics {
		list = append(list, 2)
	}
	if s.ShaderSharedInt64Atomics {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderBfloat16FeaturesKHR struct {
	ShaderBFloat16Type bool `json:"shaderBFloat16Type,omitempty"`
	ShaderBFloat16DotProduct bool `json:"shaderBFloat16DotProduct,omitempty"`
	ShaderBFloat16CooperativeMatrix bool `json:"shaderBFloat16CooperativeMatrix,omitempty"`
}
func (VkPhysicalDeviceShaderBfloat16FeaturesKHR) extension() string {
	return "VK_KHR_shader_bfloat16"
}
func (VkPhysicalDeviceShaderBfloat16FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_BFLOAT16_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderBfloat16FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.ShaderBFloat16Type {
		list = append(list, 2)
	}
	if s.ShaderBFloat16DotProduct {
		list = append(list, 3)
	}
	if s.ShaderBFloat16CooperativeMatrix {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceShaderClockFeaturesKHR struct {
	ShaderSubgroupClock bool `json:"shaderSubgroupClock,omitempty"`
	ShaderDeviceClock bool `json:"shaderDeviceClock,omitempty"`
}
func (VkPhysicalDeviceShaderClockFeaturesKHR) extension() string {
	return "VK_KHR_shader_clock"
}
func (VkPhysicalDeviceShaderClockFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderClockFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderSubgroupClock {
		list = append(list, 2)
	}
	if s.ShaderDeviceClock {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM struct {
	ShaderCoreBuiltins bool `json:"shaderCoreBuiltins,omitempty"`
}
func (VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) extension() string {
	return "VK_ARM_shader_core_builtins"
}
func (VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM
}
func (s VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderCoreBuiltins {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures struct {
	ShaderDemoteToHelperInvocation bool `json:"shaderDemoteToHelperInvocation,omitempty"`
}
func (VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES
}
func (s VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderDemoteToHelperInvocation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderDrawParametersFeatures struct {
	ShaderDrawParameters bool `json:"shaderDrawParameters,omitempty"`
}
func (VkPhysicalDeviceShaderDrawParametersFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderDrawParametersFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
}
func (s VkPhysicalDeviceShaderDrawParametersFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderDrawParameters {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD struct {
	ShaderEarlyAndLateFragmentTests bool `json:"shaderEarlyAndLateFragmentTests,omitempty"`
}
func (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) extension() string {
	return "VK_AMD_shader_early_and_late_fragment_tests"
}
func (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD
}
func (s VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderEarlyAndLateFragmentTests {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderExpectAssumeFeatures struct {
	ShaderExpectAssume bool `json:"shaderExpectAssume,omitempty"`
}
func (VkPhysicalDeviceShaderExpectAssumeFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderExpectAssumeFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES
}
func (s VkPhysicalDeviceShaderExpectAssumeFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderExpectAssume {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderExpectAssumeFeaturesKHR struct {
	ShaderExpectAssume bool `json:"shaderExpectAssume,omitempty"`
}
func (VkPhysicalDeviceShaderExpectAssumeFeaturesKHR) extension() string {
	return "VK_KHR_shader_expect_assume"
}
func (VkPhysicalDeviceShaderExpectAssumeFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderExpectAssumeFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderExpectAssume {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderFloat16Int8Features struct {
	ShaderFloat16 bool `json:"shaderFloat16,omitempty"`
	ShaderInt8 bool `json:"shaderInt8,omitempty"`
}
func (VkPhysicalDeviceShaderFloat16Int8Features) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderFloat16Int8Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES
}
func (s VkPhysicalDeviceShaderFloat16Int8Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderFloat16 {
		list = append(list, 2)
	}
	if s.ShaderInt8 {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderFloat8FeaturesEXT struct {
	ShaderFloat8 bool `json:"shaderFloat8,omitempty"`
	ShaderFloat8CooperativeMatrix bool `json:"shaderFloat8CooperativeMatrix,omitempty"`
}
func (VkPhysicalDeviceShaderFloat8FeaturesEXT) extension() string {
	return "VK_EXT_shader_float8"
}
func (VkPhysicalDeviceShaderFloat8FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT8_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderFloat8FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderFloat8 {
		list = append(list, 2)
	}
	if s.ShaderFloat8CooperativeMatrix {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderFloatControls2Features struct {
	ShaderFloatControls2 bool `json:"shaderFloatControls2,omitempty"`
}
func (VkPhysicalDeviceShaderFloatControls2Features) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderFloatControls2Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES
}
func (s VkPhysicalDeviceShaderFloatControls2Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderFloatControls2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderFloatControls2FeaturesKHR struct {
	ShaderFloatControls2 bool `json:"shaderFloatControls2,omitempty"`
}
func (VkPhysicalDeviceShaderFloatControls2FeaturesKHR) extension() string {
	return "VK_KHR_shader_float_controls2"
}
func (VkPhysicalDeviceShaderFloatControls2FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderFloatControls2FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderFloatControls2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT struct {
	ShaderImageInt64Atomics bool `json:"shaderImageInt64Atomics,omitempty"`
	SparseImageInt64Atomics bool `json:"sparseImageInt64Atomics,omitempty"`
}
func (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) extension() string {
	return "VK_EXT_shader_image_atomic_int64"
}
func (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderImageInt64Atomics {
		list = append(list, 2)
	}
	if s.SparseImageInt64Atomics {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderImageFootprintFeaturesNV struct {
	ImageFootprint bool `json:"imageFootprint,omitempty"`
}
func (VkPhysicalDeviceShaderImageFootprintFeaturesNV) extension() string {
	return "VK_NV_shader_image_footprint"
}
func (VkPhysicalDeviceShaderImageFootprintFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV
}
func (s VkPhysicalDeviceShaderImageFootprintFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageFootprint {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderIntegerDotProductFeatures struct {
	ShaderIntegerDotProduct bool `json:"shaderIntegerDotProduct,omitempty"`
}
func (VkPhysicalDeviceShaderIntegerDotProductFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderIntegerDotProductFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES
}
func (s VkPhysicalDeviceShaderIntegerDotProductFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderIntegerDotProduct {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL struct {
	ShaderIntegerFunctions2 bool `json:"shaderIntegerFunctions2,omitempty"`
}
func (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) extension() string {
	return "VK_INTEL_shader_integer_functions2"
}
func (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL
}
func (s VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderIntegerFunctions2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR struct {
	ShaderMaximalReconvergence bool `json:"shaderMaximalReconvergence,omitempty"`
}
func (VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR) extension() string {
	return "VK_KHR_shader_maximal_reconvergence"
}
func (VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderMaximalReconvergence {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT struct {
	ShaderModuleIdentifier bool `json:"shaderModuleIdentifier,omitempty"`
}
func (VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) extension() string {
	return "VK_EXT_shader_module_identifier"
}
func (VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderModuleIdentifier {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderObjectFeaturesEXT struct {
	ShaderObject bool `json:"shaderObject,omitempty"`
}
func (VkPhysicalDeviceShaderObjectFeaturesEXT) extension() string {
	return "VK_EXT_shader_object"
}
func (VkPhysicalDeviceShaderObjectFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderObjectFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderObject {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderQuadControlFeaturesKHR struct {
	ShaderQuadControl bool `json:"shaderQuadControl,omitempty"`
}
func (VkPhysicalDeviceShaderQuadControlFeaturesKHR) extension() string {
	return "VK_KHR_shader_quad_control"
}
func (VkPhysicalDeviceShaderQuadControlFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderQuadControlFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderQuadControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR struct {
	ShaderRelaxedExtendedInstruction bool `json:"shaderRelaxedExtendedInstruction,omitempty"`
}
func (VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR) extension() string {
	return "VK_KHR_shader_relaxed_extended_instruction"
}
func (VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderRelaxedExtendedInstruction {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT struct {
	ShaderReplicatedComposites bool `json:"shaderReplicatedComposites,omitempty"`
}
func (VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT) extension() string {
	return "VK_EXT_shader_replicated_composites"
}
func (VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderReplicatedComposites {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderSMBuiltinsFeaturesNV struct {
	ShaderSMBuiltins bool `json:"shaderSMBuiltins,omitempty"`
}
func (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) extension() string {
	return "VK_NV_shader_sm_builtins"
}
func (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV
}
func (s VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderSMBuiltins {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures struct {
	ShaderSubgroupExtendedTypes bool `json:"shaderSubgroupExtendedTypes,omitempty"`
}
func (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES
}
func (s VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderSubgroupExtendedTypes {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupRotateFeatures struct {
	ShaderSubgroupRotate bool `json:"shaderSubgroupRotate,omitempty"`
	ShaderSubgroupRotateClustered bool `json:"shaderSubgroupRotateClustered,omitempty"`
}
func (VkPhysicalDeviceShaderSubgroupRotateFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderSubgroupRotateFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES
}
func (s VkPhysicalDeviceShaderSubgroupRotateFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderSubgroupRotate {
		list = append(list, 2)
	}
	if s.ShaderSubgroupRotateClustered {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR struct {
	ShaderSubgroupRotate bool `json:"shaderSubgroupRotate,omitempty"`
	ShaderSubgroupRotateClustered bool `json:"shaderSubgroupRotateClustered,omitempty"`
}
func (VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR) extension() string {
	return "VK_KHR_shader_subgroup_rotate"
}
func (VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderSubgroupRotate {
		list = append(list, 2)
	}
	if s.ShaderSubgroupRotateClustered {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR struct {
	ShaderSubgroupUniformControlFlow bool `json:"shaderSubgroupUniformControlFlow,omitempty"`
}
func (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) extension() string {
	return "VK_KHR_shader_subgroup_uniform_control_flow"
}
func (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderSubgroupUniformControlFlow {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderTerminateInvocationFeatures struct {
	ShaderTerminateInvocation bool `json:"shaderTerminateInvocation,omitempty"`
}
func (VkPhysicalDeviceShaderTerminateInvocationFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderTerminateInvocationFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES
}
func (s VkPhysicalDeviceShaderTerminateInvocationFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderTerminateInvocation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderTileImageFeaturesEXT struct {
	ShaderTileImageColorReadAccess bool `json:"shaderTileImageColorReadAccess,omitempty"`
	ShaderTileImageDepthReadAccess bool `json:"shaderTileImageDepthReadAccess,omitempty"`
	ShaderTileImageStencilReadAccess bool `json:"shaderTileImageStencilReadAccess,omitempty"`
}
func (VkPhysicalDeviceShaderTileImageFeaturesEXT) extension() string {
	return "VK_EXT_shader_tile_image"
}
func (VkPhysicalDeviceShaderTileImageFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderTileImageFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.ShaderTileImageColorReadAccess {
		list = append(list, 2)
	}
	if s.ShaderTileImageDepthReadAccess {
		list = append(list, 3)
	}
	if s.ShaderTileImageStencilReadAccess {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceShadingRateImageFeaturesNV struct {
	ShadingRateImage bool `json:"shadingRateImage,omitempty"`
	ShadingRateCoarseSampleOrder bool `json:"shadingRateCoarseSampleOrder,omitempty"`
}
func (VkPhysicalDeviceShadingRateImageFeaturesNV) extension() string {
	return "VK_NV_shading_rate_image"
}
func (VkPhysicalDeviceShadingRateImageFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV
}
func (s VkPhysicalDeviceShadingRateImageFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShadingRateImage {
		list = append(list, 2)
	}
	if s.ShadingRateCoarseSampleOrder {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceSubgroupSizeControlFeatures struct {
	SubgroupSizeControl bool `json:"subgroupSizeControl,omitempty"`
	ComputeFullSubgroups bool `json:"computeFullSubgroups,omitempty"`
}
func (VkPhysicalDeviceSubgroupSizeControlFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceSubgroupSizeControlFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES
}
func (s VkPhysicalDeviceSubgroupSizeControlFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.SubgroupSizeControl {
		list = append(list, 2)
	}
	if s.ComputeFullSubgroups {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT struct {
	SubpassMergeFeedback bool `json:"subpassMergeFeedback,omitempty"`
}
func (VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) extension() string {
	return "VK_EXT_subpass_merge_feedback"
}
func (VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT
}
func (s VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SubpassMergeFeedback {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSubpassShadingFeaturesHUAWEI struct {
	SubpassShading bool `json:"subpassShading,omitempty"`
}
func (VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_subpass_shading"
}
func (VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SubpassShading {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT struct {
	SwapchainMaintenance1 bool `json:"swapchainMaintenance1,omitempty"`
}
func (VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) extension() string {
	return "VK_EXT_swapchain_maintenance1"
}
func (VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT
}
func (s VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SwapchainMaintenance1 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR struct {
	SwapchainMaintenance1 bool `json:"swapchainMaintenance1,omitempty"`
}
func (VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR) extension() string {
	return "VK_KHR_swapchain_maintenance1"
}
func (VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_KHR
}
func (s VkPhysicalDeviceSwapchainMaintenance1FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SwapchainMaintenance1 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSynchronization2Features struct {
	Synchronization2 bool `json:"synchronization2,omitempty"`
}
func (VkPhysicalDeviceSynchronization2Features) extension() string {
	return ""
}
func (VkPhysicalDeviceSynchronization2Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES
}
func (s VkPhysicalDeviceSynchronization2Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Synchronization2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTensorFeaturesARM struct {
	TensorNonPacked bool `json:"tensorNonPacked,omitempty"`
	ShaderTensorAccess bool `json:"shaderTensorAccess,omitempty"`
	ShaderStorageTensorArrayDynamicIndexing bool `json:"shaderStorageTensorArrayDynamicIndexing,omitempty"`
	ShaderStorageTensorArrayNonUniformIndexing bool `json:"shaderStorageTensorArrayNonUniformIndexing,omitempty"`
	DescriptorBindingStorageTensorUpdateAfterBind bool `json:"descriptorBindingStorageTensorUpdateAfterBind,omitempty"`
	Tensors bool `json:"tensors,omitempty"`
}
func (VkPhysicalDeviceTensorFeaturesARM) extension() string {
	return "VK_ARM_tensors"
}
func (VkPhysicalDeviceTensorFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TENSOR_FEATURES_ARM
}
func (s VkPhysicalDeviceTensorFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 6)
	if s.TensorNonPacked {
		list = append(list, 2)
	}
	if s.ShaderTensorAccess {
		list = append(list, 3)
	}
	if s.ShaderStorageTensorArrayDynamicIndexing {
		list = append(list, 4)
	}
	if s.ShaderStorageTensorArrayNonUniformIndexing {
		list = append(list, 5)
	}
	if s.DescriptorBindingStorageTensorUpdateAfterBind {
		list = append(list, 6)
	}
	if s.Tensors {
		list = append(list, 7)
	}
	return list
}
type VkPhysicalDeviceTextureCompressionASTCHDRFeatures struct {
	TextureCompressionASTC_HDR bool `json:"textureCompressionASTC_HDR,omitempty"`
}
func (VkPhysicalDeviceTextureCompressionASTCHDRFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceTextureCompressionASTCHDRFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES
}
func (s VkPhysicalDeviceTextureCompressionASTCHDRFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TextureCompressionASTC_HDR {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTileMemoryHeapFeaturesQCOM struct {
	TileMemoryHeap bool `json:"tileMemoryHeap,omitempty"`
}
func (VkPhysicalDeviceTileMemoryHeapFeaturesQCOM) extension() string {
	return "VK_QCOM_tile_memory_heap"
}
func (VkPhysicalDeviceTileMemoryHeapFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_MEMORY_HEAP_FEATURES_QCOM
}
func (s VkPhysicalDeviceTileMemoryHeapFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TileMemoryHeap {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTilePropertiesFeaturesQCOM struct {
	TileProperties bool `json:"tileProperties,omitempty"`
}
func (VkPhysicalDeviceTilePropertiesFeaturesQCOM) extension() string {
	return "VK_QCOM_tile_properties"
}
func (VkPhysicalDeviceTilePropertiesFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM
}
func (s VkPhysicalDeviceTilePropertiesFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TileProperties {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTileShadingFeaturesQCOM struct {
	TileShading bool `json:"tileShading,omitempty"`
	TileShadingFragmentStage bool `json:"tileShadingFragmentStage,omitempty"`
	TileShadingColorAttachments bool `json:"tileShadingColorAttachments,omitempty"`
	TileShadingDepthAttachments bool `json:"tileShadingDepthAttachments,omitempty"`
	TileShadingStencilAttachments bool `json:"tileShadingStencilAttachments,omitempty"`
	TileShadingInputAttachments bool `json:"tileShadingInputAttachments,omitempty"`
	TileShadingSampledAttachments bool `json:"tileShadingSampledAttachments,omitempty"`
	TileShadingPerTileDraw bool `json:"tileShadingPerTileDraw,omitempty"`
	TileShadingPerTileDispatch bool `json:"tileShadingPerTileDispatch,omitempty"`
	TileShadingDispatchTile bool `json:"tileShadingDispatchTile,omitempty"`
	TileShadingApron bool `json:"tileShadingApron,omitempty"`
	TileShadingAnisotropicApron bool `json:"tileShadingAnisotropicApron,omitempty"`
	TileShadingAtomicOps bool `json:"tileShadingAtomicOps,omitempty"`
	TileShadingImageProcessing bool `json:"tileShadingImageProcessing,omitempty"`
}
func (VkPhysicalDeviceTileShadingFeaturesQCOM) extension() string {
	return "VK_QCOM_tile_shading"
}
func (VkPhysicalDeviceTileShadingFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_SHADING_FEATURES_QCOM
}
func (s VkPhysicalDeviceTileShadingFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 14)
	if s.TileShading {
		list = append(list, 2)
	}
	if s.TileShadingFragmentStage {
		list = append(list, 3)
	}
	if s.TileShadingColorAttachments {
		list = append(list, 4)
	}
	if s.TileShadingDepthAttachments {
		list = append(list, 5)
	}
	if s.TileShadingStencilAttachments {
		list = append(list, 6)
	}
	if s.TileShadingInputAttachments {
		list = append(list, 7)
	}
	if s.TileShadingSampledAttachments {
		list = append(list, 8)
	}
	if s.TileShadingPerTileDraw {
		list = append(list, 9)
	}
	if s.TileShadingPerTileDispatch {
		list = append(list, 10)
	}
	if s.TileShadingDispatchTile {
		list = append(list, 11)
	}
	if s.TileShadingApron {
		list = append(list, 12)
	}
	if s.TileShadingAnisotropicApron {
		list = append(list, 13)
	}
	if s.TileShadingAtomicOps {
		list = append(list, 14)
	}
	if s.TileShadingImageProcessing {
		list = append(list, 15)
	}
	return list
}
type VkPhysicalDeviceTimelineSemaphoreFeatures struct {
	TimelineSemaphore bool `json:"timelineSemaphore,omitempty"`
}
func (VkPhysicalDeviceTimelineSemaphoreFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceTimelineSemaphoreFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES
}
func (s VkPhysicalDeviceTimelineSemaphoreFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TimelineSemaphore {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTransformFeedbackFeaturesEXT struct {
	TransformFeedback bool `json:"transformFeedback,omitempty"`
	GeometryStreams bool `json:"geometryStreams,omitempty"`
}
func (VkPhysicalDeviceTransformFeedbackFeaturesEXT) extension() string {
	return "VK_EXT_transform_feedback"
}
func (VkPhysicalDeviceTransformFeedbackFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT
}
func (s VkPhysicalDeviceTransformFeedbackFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.TransformFeedback {
		list = append(list, 2)
	}
	if s.GeometryStreams {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR struct {
	UnifiedImageLayouts bool `json:"unifiedImageLayouts,omitempty"`
	UnifiedImageLayoutsVideo bool `json:"unifiedImageLayoutsVideo,omitempty"`
}
func (VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR) extension() string {
	return "VK_KHR_unified_image_layouts"
}
func (VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFIED_IMAGE_LAYOUTS_FEATURES_KHR
}
func (s VkPhysicalDeviceUnifiedImageLayoutsFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.UnifiedImageLayouts {
		list = append(list, 2)
	}
	if s.UnifiedImageLayoutsVideo {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceUniformBufferStandardLayoutFeatures struct {
	UniformBufferStandardLayout bool `json:"uniformBufferStandardLayout,omitempty"`
}
func (VkPhysicalDeviceUniformBufferStandardLayoutFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceUniformBufferStandardLayoutFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES
}
func (s VkPhysicalDeviceUniformBufferStandardLayoutFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.UniformBufferStandardLayout {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVariablePointersFeatures struct {
	VariablePointersStorageBuffer bool `json:"variablePointersStorageBuffer,omitempty"`
	VariablePointers bool `json:"variablePointers,omitempty"`
}
func (VkPhysicalDeviceVariablePointersFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceVariablePointersFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
}
func (s VkPhysicalDeviceVariablePointersFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VariablePointersStorageBuffer {
		list = append(list, 2)
	}
	if s.VariablePointers {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeDivisorFeatures struct {
	VertexAttributeInstanceRateDivisor bool `json:"vertexAttributeInstanceRateDivisor,omitempty"`
	VertexAttributeInstanceRateZeroDivisor bool `json:"vertexAttributeInstanceRateZeroDivisor,omitempty"`
}
func (VkPhysicalDeviceVertexAttributeDivisorFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceVertexAttributeDivisorFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES
}
func (s VkPhysicalDeviceVertexAttributeDivisorFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 2)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT struct {
	VertexAttributeInstanceRateDivisor bool `json:"vertexAttributeInstanceRateDivisor,omitempty"`
	VertexAttributeInstanceRateZeroDivisor bool `json:"vertexAttributeInstanceRateZeroDivisor,omitempty"`
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) extension() string {
	return "VK_EXT_vertex_attribute_divisor"
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT
}
func (s VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 2)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR struct {
	VertexAttributeInstanceRateDivisor bool `json:"vertexAttributeInstanceRateDivisor,omitempty"`
	VertexAttributeInstanceRateZeroDivisor bool `json:"vertexAttributeInstanceRateZeroDivisor,omitempty"`
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR) extension() string {
	return "VK_KHR_vertex_attribute_divisor"
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR
}
func (s VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 2)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT struct {
	VertexAttributeRobustness bool `json:"vertexAttributeRobustness,omitempty"`
}
func (VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT) extension() string {
	return "VK_EXT_vertex_attribute_robustness"
}
func (VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT
}
func (s VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VertexAttributeRobustness {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT struct {
	VertexInputDynamicState bool `json:"vertexInputDynamicState,omitempty"`
}
func (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) extension() string {
	return "VK_EXT_vertex_input_dynamic_state"
}
func (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT
}
func (s VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VertexInputDynamicState {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoDecodeVP9FeaturesKHR struct {
	VideoDecodeVP9 bool `json:"videoDecodeVP9,omitempty"`
}
func (VkPhysicalDeviceVideoDecodeVP9FeaturesKHR) extension() string {
	return "VK_KHR_video_decode_vp9"
}
func (VkPhysicalDeviceVideoDecodeVP9FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_DECODE_VP9_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoDecodeVP9FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoDecodeVP9 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoEncodeAV1FeaturesKHR struct {
	VideoEncodeAV1 bool `json:"videoEncodeAV1,omitempty"`
}
func (VkPhysicalDeviceVideoEncodeAV1FeaturesKHR) extension() string {
	return "VK_KHR_video_encode_av1"
}
func (VkPhysicalDeviceVideoEncodeAV1FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoEncodeAV1FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoEncodeAV1 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR struct {
	VideoEncodeIntraRefresh bool `json:"videoEncodeIntraRefresh,omitempty"`
}
func (VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR) extension() string {
	return "VK_KHR_video_encode_intra_refresh"
}
func (VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_INTRA_REFRESH_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoEncodeIntraRefreshFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoEncodeIntraRefresh {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR struct {
	VideoEncodeQuantizationMap bool `json:"videoEncodeQuantizationMap,omitempty"`
}
func (VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR) extension() string {
	return "VK_KHR_video_encode_quantization_map"
}
func (VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoEncodeQuantizationMap {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoMaintenance1FeaturesKHR struct {
	VideoMaintenance1 bool `json:"videoMaintenance1,omitempty"`
}
func (VkPhysicalDeviceVideoMaintenance1FeaturesKHR) extension() string {
	return "VK_KHR_video_maintenance1"
}
func (VkPhysicalDeviceVideoMaintenance1FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoMaintenance1FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoMaintenance1 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoMaintenance2FeaturesKHR struct {
	VideoMaintenance2 bool `json:"videoMaintenance2,omitempty"`
}
func (VkPhysicalDeviceVideoMaintenance2FeaturesKHR) extension() string {
	return "VK_KHR_video_maintenance2"
}
func (VkPhysicalDeviceVideoMaintenance2FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_2_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoMaintenance2FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoMaintenance2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVulkan11Features struct {
	StorageBuffer16BitAccess bool `json:"storageBuffer16BitAccess,omitempty"`
	UniformAndStorageBuffer16BitAccess bool `json:"uniformAndStorageBuffer16BitAccess,omitempty"`
	StoragePushConstant16 bool `json:"storagePushConstant16,omitempty"`
	StorageInputOutput16 bool `json:"storageInputOutput16,omitempty"`
	Multiview bool `json:"multiview,omitempty"`
	MultiviewGeometryShader bool `json:"multiviewGeometryShader,omitempty"`
	MultiviewTessellationShader bool `json:"multiviewTessellationShader,omitempty"`
	VariablePointersStorageBuffer bool `json:"variablePointersStorageBuffer,omitempty"`
	VariablePointers bool `json:"variablePointers,omitempty"`
	ProtectedMemory bool `json:"protectedMemory,omitempty"`
	SamplerYCbCrConversion bool `json:"samplerYcbcrConversion,omitempty"`
	ShaderDrawParameters bool `json:"shaderDrawParameters,omitempty"`
}
func (VkPhysicalDeviceVulkan11Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan11Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES
}
func (s VkPhysicalDeviceVulkan11Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 12)
	if s.StorageBuffer16BitAccess {
		list = append(list, 2)
	}
	if s.UniformAndStorageBuffer16BitAccess {
		list = append(list, 3)
	}
	if s.StoragePushConstant16 {
		list = append(list, 4)
	}
	if s.StorageInputOutput16 {
		list = append(list, 5)
	}
	if s.Multiview {
		list = append(list, 6)
	}
	if s.MultiviewGeometryShader {
		list = append(list, 7)
	}
	if s.MultiviewTessellationShader {
		list = append(list, 8)
	}
	if s.VariablePointersStorageBuffer {
		list = append(list, 9)
	}
	if s.VariablePointers {
		list = append(list, 10)
	}
	if s.ProtectedMemory {
		list = append(list, 11)
	}
	if s.SamplerYCbCrConversion {
		list = append(list, 12)
	}
	if s.ShaderDrawParameters {
		list = append(list, 13)
	}
	return list
}
type VkPhysicalDeviceVulkan12Features struct {
	SamplerMirrorClampToEdge bool `json:"samplerMirrorClampToEdge,omitempty"`
	DrawIndirectCount bool `json:"drawIndirectCount,omitempty"`
	StorageBuffer8BitAccess bool `json:"storageBuffer8BitAccess,omitempty"`
	UniformAndStorageBuffer8BitAccess bool `json:"uniformAndStorageBuffer8BitAccess,omitempty"`
	StoragePushConstant8 bool `json:"storagePushConstant8,omitempty"`
	ShaderBufferInt64Atomics bool `json:"shaderBufferInt64Atomics,omitempty"`
	ShaderSharedInt64Atomics bool `json:"shaderSharedInt64Atomics,omitempty"`
	ShaderFloat16 bool `json:"shaderFloat16,omitempty"`
	ShaderInt8 bool `json:"shaderInt8,omitempty"`
	DescriptorIndexing bool `json:"descriptorIndexing,omitempty"`
	ShaderInputAttachmentArrayDynamicIndexing bool `json:"shaderInputAttachmentArrayDynamicIndexing,omitempty"`
	ShaderUniformTexelBufferArrayDynamicIndexing bool `json:"shaderUniformTexelBufferArrayDynamicIndexing,omitempty"`
	ShaderStorageTexelBufferArrayDynamicIndexing bool `json:"shaderStorageTexelBufferArrayDynamicIndexing,omitempty"`
	ShaderUniformBufferArrayNonUniformIndexing bool `json:"shaderUniformBufferArrayNonUniformIndexing,omitempty"`
	ShaderSampledImageArrayNonUniformIndexing bool `json:"shaderSampledImageArrayNonUniformIndexing,omitempty"`
	ShaderStorageBufferArrayNonUniformIndexing bool `json:"shaderStorageBufferArrayNonUniformIndexing,omitempty"`
	ShaderStorageImageArrayNonUniformIndexing bool `json:"shaderStorageImageArrayNonUniformIndexing,omitempty"`
	ShaderInputAttachmentArrayNonUniformIndexing bool `json:"shaderInputAttachmentArrayNonUniformIndexing,omitempty"`
	ShaderUniformTexelBufferArrayNonUniformIndexing bool `json:"shaderUniformTexelBufferArrayNonUniformIndexing,omitempty"`
	ShaderStorageTexelBufferArrayNonUniformIndexing bool `json:"shaderStorageTexelBufferArrayNonUniformIndexing,omitempty"`
	DescriptorBindingUniformBufferUpdateAfterBind bool `json:"descriptorBindingUniformBufferUpdateAfterBind,omitempty"`
	DescriptorBindingSampledImageUpdateAfterBind bool `json:"descriptorBindingSampledImageUpdateAfterBind,omitempty"`
	DescriptorBindingStorageImageUpdateAfterBind bool `json:"descriptorBindingStorageImageUpdateAfterBind,omitempty"`
	DescriptorBindingStorageBufferUpdateAfterBind bool `json:"descriptorBindingStorageBufferUpdateAfterBind,omitempty"`
	DescriptorBindingUniformTexelBufferUpdateAfterBind bool `json:"descriptorBindingUniformTexelBufferUpdateAfterBind,omitempty"`
	DescriptorBindingStorageTexelBufferUpdateAfterBind bool `json:"descriptorBindingStorageTexelBufferUpdateAfterBind,omitempty"`
	DescriptorBindingUpdateUnusedWhilePending bool `json:"descriptorBindingUpdateUnusedWhilePending,omitempty"`
	DescriptorBindingPartiallyBound bool `json:"descriptorBindingPartiallyBound,omitempty"`
	DescriptorBindingVariableDescriptorCount bool `json:"descriptorBindingVariableDescriptorCount,omitempty"`
	RuntimeDescriptorArray bool `json:"runtimeDescriptorArray,omitempty"`
	SamplerFilterMinmax bool `json:"samplerFilterMinmax,omitempty"`
	ScalarBlockLayout bool `json:"scalarBlockLayout,omitempty"`
	ImagelessFramebuffer bool `json:"imagelessFramebuffer,omitempty"`
	UniformBufferStandardLayout bool `json:"uniformBufferStandardLayout,omitempty"`
	ShaderSubgroupExtendedTypes bool `json:"shaderSubgroupExtendedTypes,omitempty"`
	SeparateDepthStencilLayouts bool `json:"separateDepthStencilLayouts,omitempty"`
	HostQueryReset bool `json:"hostQueryReset,omitempty"`
	TimelineSemaphore bool `json:"timelineSemaphore,omitempty"`
	BufferDeviceAddress bool `json:"bufferDeviceAddress,omitempty"`
	BufferDeviceAddressCaptureReplay bool `json:"bufferDeviceAddressCaptureReplay,omitempty"`
	BufferDeviceAddressMultiDevice bool `json:"bufferDeviceAddressMultiDevice,omitempty"`
	VulkanMemoryModel bool `json:"vulkanMemoryModel,omitempty"`
	VulkanMemoryModelDeviceScope bool `json:"vulkanMemoryModelDeviceScope,omitempty"`
	VulkanMemoryModelAvailabilityVisibilityChains bool `json:"vulkanMemoryModelAvailabilityVisibilityChains,omitempty"`
	ShaderOutputViewportIndex bool `json:"shaderOutputViewportIndex,omitempty"`
	ShaderOutputLayer bool `json:"shaderOutputLayer,omitempty"`
	SubgroupBroadcastDynamicId bool `json:"subgroupBroadcastDynamicId,omitempty"`
}
func (VkPhysicalDeviceVulkan12Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan12Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES
}
func (s VkPhysicalDeviceVulkan12Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 47)
	if s.SamplerMirrorClampToEdge {
		list = append(list, 2)
	}
	if s.DrawIndirectCount {
		list = append(list, 3)
	}
	if s.StorageBuffer8BitAccess {
		list = append(list, 4)
	}
	if s.UniformAndStorageBuffer8BitAccess {
		list = append(list, 5)
	}
	if s.StoragePushConstant8 {
		list = append(list, 6)
	}
	if s.ShaderBufferInt64Atomics {
		list = append(list, 7)
	}
	if s.ShaderSharedInt64Atomics {
		list = append(list, 8)
	}
	if s.ShaderFloat16 {
		list = append(list, 9)
	}
	if s.ShaderInt8 {
		list = append(list, 10)
	}
	if s.DescriptorIndexing {
		list = append(list, 11)
	}
	if s.ShaderInputAttachmentArrayDynamicIndexing {
		list = append(list, 12)
	}
	if s.ShaderUniformTexelBufferArrayDynamicIndexing {
		list = append(list, 13)
	}
	if s.ShaderStorageTexelBufferArrayDynamicIndexing {
		list = append(list, 14)
	}
	if s.ShaderUniformBufferArrayNonUniformIndexing {
		list = append(list, 15)
	}
	if s.ShaderSampledImageArrayNonUniformIndexing {
		list = append(list, 16)
	}
	if s.ShaderStorageBufferArrayNonUniformIndexing {
		list = append(list, 17)
	}
	if s.ShaderStorageImageArrayNonUniformIndexing {
		list = append(list, 18)
	}
	if s.ShaderInputAttachmentArrayNonUniformIndexing {
		list = append(list, 19)
	}
	if s.ShaderUniformTexelBufferArrayNonUniformIndexing {
		list = append(list, 20)
	}
	if s.ShaderStorageTexelBufferArrayNonUniformIndexing {
		list = append(list, 21)
	}
	if s.DescriptorBindingUniformBufferUpdateAfterBind {
		list = append(list, 22)
	}
	if s.DescriptorBindingSampledImageUpdateAfterBind {
		list = append(list, 23)
	}
	if s.DescriptorBindingStorageImageUpdateAfterBind {
		list = append(list, 24)
	}
	if s.DescriptorBindingStorageBufferUpdateAfterBind {
		list = append(list, 25)
	}
	if s.DescriptorBindingUniformTexelBufferUpdateAfterBind {
		list = append(list, 26)
	}
	if s.DescriptorBindingStorageTexelBufferUpdateAfterBind {
		list = append(list, 27)
	}
	if s.DescriptorBindingUpdateUnusedWhilePending {
		list = append(list, 28)
	}
	if s.DescriptorBindingPartiallyBound {
		list = append(list, 29)
	}
	if s.DescriptorBindingVariableDescriptorCount {
		list = append(list, 30)
	}
	if s.RuntimeDescriptorArray {
		list = append(list, 31)
	}
	if s.SamplerFilterMinmax {
		list = append(list, 32)
	}
	if s.ScalarBlockLayout {
		list = append(list, 33)
	}
	if s.ImagelessFramebuffer {
		list = append(list, 34)
	}
	if s.UniformBufferStandardLayout {
		list = append(list, 35)
	}
	if s.ShaderSubgroupExtendedTypes {
		list = append(list, 36)
	}
	if s.SeparateDepthStencilLayouts {
		list = append(list, 37)
	}
	if s.HostQueryReset {
		list = append(list, 38)
	}
	if s.TimelineSemaphore {
		list = append(list, 39)
	}
	if s.BufferDeviceAddress {
		list = append(list, 40)
	}
	if s.BufferDeviceAddressCaptureReplay {
		list = append(list, 41)
	}
	if s.BufferDeviceAddressMultiDevice {
		list = append(list, 42)
	}
	if s.VulkanMemoryModel {
		list = append(list, 43)
	}
	if s.VulkanMemoryModelDeviceScope {
		list = append(list, 44)
	}
	if s.VulkanMemoryModelAvailabilityVisibilityChains {
		list = append(list, 45)
	}
	if s.ShaderOutputViewportIndex {
		list = append(list, 46)
	}
	if s.ShaderOutputLayer {
		list = append(list, 47)
	}
	if s.SubgroupBroadcastDynamicId {
		list = append(list, 48)
	}
	return list
}
type VkPhysicalDeviceVulkan13Features struct {
	RobustImageAccess bool `json:"robustImageAccess,omitempty"`
	InlineUniformBlock bool `json:"inlineUniformBlock,omitempty"`
	DescriptorBindingInlineUniformBlockUpdateAfterBind bool `json:"descriptorBindingInlineUniformBlockUpdateAfterBind,omitempty"`
	PipelineCreationCacheControl bool `json:"pipelineCreationCacheControl,omitempty"`
	PrivateData bool `json:"privateData,omitempty"`
	ShaderDemoteToHelperInvocation bool `json:"shaderDemoteToHelperInvocation,omitempty"`
	ShaderTerminateInvocation bool `json:"shaderTerminateInvocation,omitempty"`
	SubgroupSizeControl bool `json:"subgroupSizeControl,omitempty"`
	ComputeFullSubgroups bool `json:"computeFullSubgroups,omitempty"`
	Synchronization2 bool `json:"synchronization2,omitempty"`
	TextureCompressionASTC_HDR bool `json:"textureCompressionASTC_HDR,omitempty"`
	ShaderZeroInitializeWorkgroupMemory bool `json:"shaderZeroInitializeWorkgroupMemory,omitempty"`
	DynamicRendering bool `json:"dynamicRendering,omitempty"`
	ShaderIntegerDotProduct bool `json:"shaderIntegerDotProduct,omitempty"`
	Maintenance4 bool `json:"maintenance4,omitempty"`
}
func (VkPhysicalDeviceVulkan13Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan13Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES
}
func (s VkPhysicalDeviceVulkan13Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 15)
	if s.RobustImageAccess {
		list = append(list, 2)
	}
	if s.InlineUniformBlock {
		list = append(list, 3)
	}
	if s.DescriptorBindingInlineUniformBlockUpdateAfterBind {
		list = append(list, 4)
	}
	if s.PipelineCreationCacheControl {
		list = append(list, 5)
	}
	if s.PrivateData {
		list = append(list, 6)
	}
	if s.ShaderDemoteToHelperInvocation {
		list = append(list, 7)
	}
	if s.ShaderTerminateInvocation {
		list = append(list, 8)
	}
	if s.SubgroupSizeControl {
		list = append(list, 9)
	}
	if s.ComputeFullSubgroups {
		list = append(list, 10)
	}
	if s.Synchronization2 {
		list = append(list, 11)
	}
	if s.TextureCompressionASTC_HDR {
		list = append(list, 12)
	}
	if s.ShaderZeroInitializeWorkgroupMemory {
		list = append(list, 13)
	}
	if s.DynamicRendering {
		list = append(list, 14)
	}
	if s.ShaderIntegerDotProduct {
		list = append(list, 15)
	}
	if s.Maintenance4 {
		list = append(list, 16)
	}
	return list
}
type VkPhysicalDeviceVulkan14Features struct {
	GlobalPriorityQuery bool `json:"globalPriorityQuery,omitempty"`
	ShaderSubgroupRotate bool `json:"shaderSubgroupRotate,omitempty"`
	ShaderSubgroupRotateClustered bool `json:"shaderSubgroupRotateClustered,omitempty"`
	ShaderFloatControls2 bool `json:"shaderFloatControls2,omitempty"`
	ShaderExpectAssume bool `json:"shaderExpectAssume,omitempty"`
	RectangularLines bool `json:"rectangularLines,omitempty"`
	BresenhamLines bool `json:"bresenhamLines,omitempty"`
	SmoothLines bool `json:"smoothLines,omitempty"`
	StippledRectangularLines bool `json:"stippledRectangularLines,omitempty"`
	StippledBresenhamLines bool `json:"stippledBresenhamLines,omitempty"`
	StippledSmoothLines bool `json:"stippledSmoothLines,omitempty"`
	VertexAttributeInstanceRateDivisor bool `json:"vertexAttributeInstanceRateDivisor,omitempty"`
	VertexAttributeInstanceRateZeroDivisor bool `json:"vertexAttributeInstanceRateZeroDivisor,omitempty"`
	IndexTypeUint8 bool `json:"indexTypeUint8,omitempty"`
	DynamicRenderingLocalRead bool `json:"dynamicRenderingLocalRead,omitempty"`
	Maintenance5 bool `json:"maintenance5,omitempty"`
	Maintenance6 bool `json:"maintenance6,omitempty"`
	PipelineProtectedAccess bool `json:"pipelineProtectedAccess,omitempty"`
	PipelineRobustness bool `json:"pipelineRobustness,omitempty"`
	HostImageCopy bool `json:"hostImageCopy,omitempty"`
	PushDescriptor bool `json:"pushDescriptor,omitempty"`
}
func (VkPhysicalDeviceVulkan14Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan14Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES
}
func (s VkPhysicalDeviceVulkan14Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 21)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	if s.ShaderSubgroupRotate {
		list = append(list, 3)
	}
	if s.ShaderSubgroupRotateClustered {
		list = append(list, 4)
	}
	if s.ShaderFloatControls2 {
		list = append(list, 5)
	}
	if s.ShaderExpectAssume {
		list = append(list, 6)
	}
	if s.RectangularLines {
		list = append(list, 7)
	}
	if s.BresenhamLines {
		list = append(list, 8)
	}
	if s.SmoothLines {
		list = append(list, 9)
	}
	if s.StippledRectangularLines {
		list = append(list, 10)
	}
	if s.StippledBresenhamLines {
		list = append(list, 11)
	}
	if s.StippledSmoothLines {
		list = append(list, 12)
	}
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 13)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 14)
	}
	if s.IndexTypeUint8 {
		list = append(list, 15)
	}
	if s.DynamicRenderingLocalRead {
		list = append(list, 16)
	}
	if s.Maintenance5 {
		list = append(list, 17)
	}
	if s.Maintenance6 {
		list = append(list, 18)
	}
	if s.PipelineProtectedAccess {
		list = append(list, 19)
	}
	if s.PipelineRobustness {
		list = append(list, 20)
	}
	if s.HostImageCopy {
		list = append(list, 21)
	}
	if s.PushDescriptor {
		list = append(list, 22)
	}
	return list
}
type VkPhysicalDeviceVulkanMemoryModelFeatures struct {
	VulkanMemoryModel bool `json:"vulkanMemoryModel,omitempty"`
	VulkanMemoryModelDeviceScope bool `json:"vulkanMemoryModelDeviceScope,omitempty"`
	VulkanMemoryModelAvailabilityVisibilityChains bool `json:"vulkanMemoryModelAvailabilityVisibilityChains,omitempty"`
}
func (VkPhysicalDeviceVulkanMemoryModelFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkanMemoryModelFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES
}
func (s VkPhysicalDeviceVulkanMemoryModelFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.VulkanMemoryModel {
		list = append(list, 2)
	}
	if s.VulkanMemoryModelDeviceScope {
		list = append(list, 3)
	}
	if s.VulkanMemoryModelAvailabilityVisibilityChains {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR struct {
	WorkgroupMemoryExplicitLayout bool `json:"workgroupMemoryExplicitLayout,omitempty"`
	WorkgroupMemoryExplicitLayoutScalarBlockLayout bool `json:"workgroupMemoryExplicitLayoutScalarBlockLayout,omitempty"`
	WorkgroupMemoryExplicitLayout8BitAccess bool `json:"workgroupMemoryExplicitLayout8BitAccess,omitempty"`
	WorkgroupMemoryExplicitLayout16BitAccess bool `json:"workgroupMemoryExplicitLayout16BitAccess,omitempty"`
}
func (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) extension() string {
	return "VK_KHR_workgroup_memory_explicit_layout"
}
func (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR
}
func (s VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.WorkgroupMemoryExplicitLayout {
		list = append(list, 2)
	}
	if s.WorkgroupMemoryExplicitLayoutScalarBlockLayout {
		list = append(list, 3)
	}
	if s.WorkgroupMemoryExplicitLayout8BitAccess {
		list = append(list, 4)
	}
	if s.WorkgroupMemoryExplicitLayout16BitAccess {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDeviceYCbCrDegammaFeaturesQCOM struct {
	YCbCrDegamma bool `json:"ycbcrDegamma,omitempty"`
}
func (VkPhysicalDeviceYCbCrDegammaFeaturesQCOM) extension() string {
	return "VK_QCOM_ycbcr_degamma"
}
func (VkPhysicalDeviceYCbCrDegammaFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM
}
func (s VkPhysicalDeviceYCbCrDegammaFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.YCbCrDegamma {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceYCbCrImageArraysFeaturesEXT struct {
	YCbCrImageArrays bool `json:"ycbcrImageArrays,omitempty"`
}
func (VkPhysicalDeviceYCbCrImageArraysFeaturesEXT) extension() string {
	return "VK_EXT_ycbcr_image_arrays"
}
func (VkPhysicalDeviceYCbCrImageArraysFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT
}
func (s VkPhysicalDeviceYCbCrImageArraysFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.YCbCrImageArrays {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT struct {
	ZeroInitializeDeviceMemory bool `json:"zeroInitializeDeviceMemory,omitempty"`
}
func (VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT) extension() string {
	return "VK_EXT_zero_initialize_device_memory"
}
func (VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_DEVICE_MEMORY_FEATURES_EXT
}
func (s VkPhysicalDeviceZeroInitializeDeviceMemoryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ZeroInitializeDeviceMemory {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures struct {
	ShaderZeroInitializeWorkgroupMemory bool `json:"shaderZeroInitializeWorkgroupMemory,omitempty"`
}
func (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES
}
func (s VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderZeroInitializeWorkgroupMemory {
		list = append(list, 2)
	}
	return list
}
