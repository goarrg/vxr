// go run vk_gen.go
// Code generated by the command above; DO NOT EDIT.

package vxr

/*
	#cgo pkg-config: vxr

	#include "vxr/vxr.h"
*/
import "C"
import "goarrg.com/rhi/vxr/internal/vk"

type VkFeatureStruct interface {
	sType() C.VkStructureType
	enabledList() []C.size_t
	extension() string
}
type VkPhysicalDevice16BitStorageFeatures struct {
	StorageBuffer16BitAccess bool
	UniformAndStorageBuffer16BitAccess bool
	StoragePushConstant16 bool
	StorageInputOutput16 bool
}
func (VkPhysicalDevice16BitStorageFeatures) extension() string {
	return ""
}
func (VkPhysicalDevice16BitStorageFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES
}
func (s VkPhysicalDevice16BitStorageFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.StorageBuffer16BitAccess {
		list = append(list, 2)
	}
	if s.UniformAndStorageBuffer16BitAccess {
		list = append(list, 3)
	}
	if s.StoragePushConstant16 {
		list = append(list, 4)
	}
	if s.StorageInputOutput16 {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDevice8BitStorageFeatures struct {
	StorageBuffer8BitAccess bool
	UniformAndStorageBuffer8BitAccess bool
	StoragePushConstant8 bool
}
func (VkPhysicalDevice8BitStorageFeatures) extension() string {
	return ""
}
func (VkPhysicalDevice8BitStorageFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES
}
func (s VkPhysicalDevice8BitStorageFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.StorageBuffer8BitAccess {
		list = append(list, 2)
	}
	if s.UniformAndStorageBuffer8BitAccess {
		list = append(list, 3)
	}
	if s.StoragePushConstant8 {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceASTCDecodeFeaturesEXT struct {
	DecodeModeSharedExponent bool
}
func (VkPhysicalDeviceASTCDecodeFeaturesEXT) extension() string {
	return "VK_EXT_astc_decode_mode"
}
func (VkPhysicalDeviceASTCDecodeFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT
}
func (s VkPhysicalDeviceASTCDecodeFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DecodeModeSharedExponent {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAccelerationStructureFeaturesKHR struct {
	AccelerationStructure bool
	AccelerationStructureCaptureReplay bool
	AccelerationStructureIndirectBuild bool
	AccelerationStructureHostCommands bool
	DescriptorBindingAccelerationStructureUpdateAfterBind bool
}
func (VkPhysicalDeviceAccelerationStructureFeaturesKHR) extension() string {
	return "VK_KHR_acceleration_structure"
}
func (VkPhysicalDeviceAccelerationStructureFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR
}
func (s VkPhysicalDeviceAccelerationStructureFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 5)
	if s.AccelerationStructure {
		list = append(list, 2)
	}
	if s.AccelerationStructureCaptureReplay {
		list = append(list, 3)
	}
	if s.AccelerationStructureIndirectBuild {
		list = append(list, 4)
	}
	if s.AccelerationStructureHostCommands {
		list = append(list, 5)
	}
	if s.DescriptorBindingAccelerationStructureUpdateAfterBind {
		list = append(list, 6)
	}
	return list
}
type VkPhysicalDeviceAddressBindingReportFeaturesEXT struct {
	ReportAddressBinding bool
}
func (VkPhysicalDeviceAddressBindingReportFeaturesEXT) extension() string {
	return "VK_EXT_device_address_binding_report"
}
func (VkPhysicalDeviceAddressBindingReportFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ADDRESS_BINDING_REPORT_FEATURES_EXT
}
func (s VkPhysicalDeviceAddressBindingReportFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ReportAddressBinding {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAmigoProfilingFeaturesSEC struct {
	AmigoProfiling bool
}
func (VkPhysicalDeviceAmigoProfilingFeaturesSEC) extension() string {
	return "VK_SEC_amigo_profiling"
}
func (VkPhysicalDeviceAmigoProfilingFeaturesSEC) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC
}
func (s VkPhysicalDeviceAmigoProfilingFeaturesSEC) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AmigoProfiling {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAntiLagFeaturesAMD struct {
	AntiLag bool
}
func (VkPhysicalDeviceAntiLagFeaturesAMD) extension() string {
	return "VK_AMD_anti_lag"
}
func (VkPhysicalDeviceAntiLagFeaturesAMD) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ANTI_LAG_FEATURES_AMD
}
func (s VkPhysicalDeviceAntiLagFeaturesAMD) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AntiLag {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT struct {
	AttachmentFeedbackLoopDynamicState bool
}
func (VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) extension() string {
	return "VK_EXT_attachment_feedback_loop_dynamic_state"
}
func (VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_DYNAMIC_STATE_FEATURES_EXT
}
func (s VkPhysicalDeviceAttachmentFeedbackLoopDynamicStateFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AttachmentFeedbackLoopDynamicState {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT struct {
	AttachmentFeedbackLoopLayout bool
}
func (VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) extension() string {
	return "VK_EXT_attachment_feedback_loop_layout"
}
func (VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT
}
func (s VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AttachmentFeedbackLoopLayout {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT struct {
	AdvancedBlendCoherentOperations bool
}
func (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) extension() string {
	return "VK_EXT_blend_operation_advanced"
}
func (VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT
}
func (s VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.AdvancedBlendCoherentOperations {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceBorderColorSwizzleFeaturesEXT struct {
	BorderColorSwizzle bool
	BorderColorSwizzleFromImage bool
}
func (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) extension() string {
	return "VK_EXT_border_color_swizzle"
}
func (VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT
}
func (s VkPhysicalDeviceBorderColorSwizzleFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.BorderColorSwizzle {
		list = append(list, 2)
	}
	if s.BorderColorSwizzleFromImage {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceBufferDeviceAddressFeatures struct {
	BufferDeviceAddress bool
	BufferDeviceAddressCaptureReplay bool
	BufferDeviceAddressMultiDevice bool
}
func (VkPhysicalDeviceBufferDeviceAddressFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceBufferDeviceAddressFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES
}
func (s VkPhysicalDeviceBufferDeviceAddressFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.BufferDeviceAddress {
		list = append(list, 2)
	}
	if s.BufferDeviceAddressCaptureReplay {
		list = append(list, 3)
	}
	if s.BufferDeviceAddressMultiDevice {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI struct {
	ClustercullingShader bool
	MultiviewClusterCullingShader bool
}
func (VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_cluster_culling_shader"
}
func (VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceClusterCullingShaderFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ClustercullingShader {
		list = append(list, 2)
	}
	if s.MultiviewClusterCullingShader {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI struct {
	ClusterShadingRate bool
}
func (VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_cluster_culling_shader"
}
func (VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CLUSTER_CULLING_SHADER_VRS_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceClusterCullingShaderVrsFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ClusterShadingRate {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCoherentMemoryFeaturesAMD struct {
	DeviceCoherentMemory bool
}
func (VkPhysicalDeviceCoherentMemoryFeaturesAMD) extension() string {
	return "VK_AMD_device_coherent_memory"
}
func (VkPhysicalDeviceCoherentMemoryFeaturesAMD) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD
}
func (s VkPhysicalDeviceCoherentMemoryFeaturesAMD) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DeviceCoherentMemory {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceColorWriteEnableFeaturesEXT struct {
	ColorWriteEnable bool
}
func (VkPhysicalDeviceColorWriteEnableFeaturesEXT) extension() string {
	return "VK_EXT_color_write_enable"
}
func (VkPhysicalDeviceColorWriteEnableFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT
}
func (s VkPhysicalDeviceColorWriteEnableFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ColorWriteEnable {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCommandBufferInheritanceFeaturesNV struct {
	CommandBufferInheritance bool
}
func (VkPhysicalDeviceCommandBufferInheritanceFeaturesNV) extension() string {
	return "VK_NV_command_buffer_inheritance"
}
func (VkPhysicalDeviceCommandBufferInheritanceFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COMMAND_BUFFER_INHERITANCE_FEATURES_NV
}
func (s VkPhysicalDeviceCommandBufferInheritanceFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CommandBufferInheritance {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR struct {
	ComputeDerivativeGroupQuads bool
	ComputeDerivativeGroupLinear bool
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR) extension() string {
	return "VK_KHR_compute_shader_derivatives"
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_KHR
}
func (s VkPhysicalDeviceComputeShaderDerivativesFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ComputeDerivativeGroupQuads {
		list = append(list, 2)
	}
	if s.ComputeDerivativeGroupLinear {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceComputeShaderDerivativesFeaturesNV struct {
	ComputeDerivativeGroupQuads bool
	ComputeDerivativeGroupLinear bool
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) extension() string {
	return "VK_NV_compute_shader_derivatives"
}
func (VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV
}
func (s VkPhysicalDeviceComputeShaderDerivativesFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ComputeDerivativeGroupQuads {
		list = append(list, 2)
	}
	if s.ComputeDerivativeGroupLinear {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceConditionalRenderingFeaturesEXT struct {
	ConditionalRendering bool
	InheritedConditionalRendering bool
}
func (VkPhysicalDeviceConditionalRenderingFeaturesEXT) extension() string {
	return "VK_EXT_conditional_rendering"
}
func (VkPhysicalDeviceConditionalRenderingFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT
}
func (s VkPhysicalDeviceConditionalRenderingFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ConditionalRendering {
		list = append(list, 2)
	}
	if s.InheritedConditionalRendering {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceCooperativeMatrix2FeaturesNV struct {
	CooperativeMatrixWorkgroupScope bool
	CooperativeMatrixFlexibleDimensions bool
	CooperativeMatrixReductions bool
	CooperativeMatrixConversions bool
	CooperativeMatrixPerElementOperations bool
	CooperativeMatrixTensorAddressing bool
	CooperativeMatrixBlockLoads bool
}
func (VkPhysicalDeviceCooperativeMatrix2FeaturesNV) extension() string {
	return "VK_NV_cooperative_matrix2"
}
func (VkPhysicalDeviceCooperativeMatrix2FeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_2_FEATURES_NV
}
func (s VkPhysicalDeviceCooperativeMatrix2FeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 7)
	if s.CooperativeMatrixWorkgroupScope {
		list = append(list, 2)
	}
	if s.CooperativeMatrixFlexibleDimensions {
		list = append(list, 3)
	}
	if s.CooperativeMatrixReductions {
		list = append(list, 4)
	}
	if s.CooperativeMatrixConversions {
		list = append(list, 5)
	}
	if s.CooperativeMatrixPerElementOperations {
		list = append(list, 6)
	}
	if s.CooperativeMatrixTensorAddressing {
		list = append(list, 7)
	}
	if s.CooperativeMatrixBlockLoads {
		list = append(list, 8)
	}
	return list
}
type VkPhysicalDeviceCooperativeMatrixFeaturesKHR struct {
	CooperativeMatrix bool
	CooperativeMatrixRobustBufferAccess bool
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesKHR) extension() string {
	return "VK_KHR_cooperative_matrix"
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_KHR
}
func (s VkPhysicalDeviceCooperativeMatrixFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.CooperativeMatrix {
		list = append(list, 2)
	}
	if s.CooperativeMatrixRobustBufferAccess {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceCooperativeMatrixFeaturesNV struct {
	CooperativeMatrix bool
	CooperativeMatrixRobustBufferAccess bool
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesNV) extension() string {
	return "VK_NV_cooperative_matrix"
}
func (VkPhysicalDeviceCooperativeMatrixFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV
}
func (s VkPhysicalDeviceCooperativeMatrixFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.CooperativeMatrix {
		list = append(list, 2)
	}
	if s.CooperativeMatrixRobustBufferAccess {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceCopyMemoryIndirectFeaturesNV struct {
	IndirectCopy bool
}
func (VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) extension() string {
	return "VK_NV_copy_memory_indirect"
}
func (VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COPY_MEMORY_INDIRECT_FEATURES_NV
}
func (s VkPhysicalDeviceCopyMemoryIndirectFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndirectCopy {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCornerSampledImageFeaturesNV struct {
	CornerSampledImage bool
}
func (VkPhysicalDeviceCornerSampledImageFeaturesNV) extension() string {
	return "VK_NV_corner_sampled_image"
}
func (VkPhysicalDeviceCornerSampledImageFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV
}
func (s VkPhysicalDeviceCornerSampledImageFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CornerSampledImage {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCoverageReductionModeFeaturesNV struct {
	CoverageReductionMode bool
}
func (VkPhysicalDeviceCoverageReductionModeFeaturesNV) extension() string {
	return "VK_NV_coverage_reduction_mode"
}
func (VkPhysicalDeviceCoverageReductionModeFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV
}
func (s VkPhysicalDeviceCoverageReductionModeFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CoverageReductionMode {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCubicClampFeaturesQCOM struct {
	CubicRangeClamp bool
}
func (VkPhysicalDeviceCubicClampFeaturesQCOM) extension() string {
	return "VK_QCOM_filter_cubic_clamp"
}
func (VkPhysicalDeviceCubicClampFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_CLAMP_FEATURES_QCOM
}
func (s VkPhysicalDeviceCubicClampFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CubicRangeClamp {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCubicWeightsFeaturesQCOM struct {
	SelectableCubicWeights bool
}
func (VkPhysicalDeviceCubicWeightsFeaturesQCOM) extension() string {
	return "VK_QCOM_filter_cubic_weights"
}
func (VkPhysicalDeviceCubicWeightsFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUBIC_WEIGHTS_FEATURES_QCOM
}
func (s VkPhysicalDeviceCubicWeightsFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SelectableCubicWeights {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCudaKernelLaunchFeaturesNV struct {
	CudaKernelLaunchFeatures bool
}
func (VkPhysicalDeviceCudaKernelLaunchFeaturesNV) extension() string {
	return "VK_NV_cuda_kernel_launch"
}
func (VkPhysicalDeviceCudaKernelLaunchFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUDA_KERNEL_LAUNCH_FEATURES_NV
}
func (s VkPhysicalDeviceCudaKernelLaunchFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.CudaKernelLaunchFeatures {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceCustomBorderColorFeaturesEXT struct {
	CustomBorderColors bool
	CustomBorderColorWithoutFormat bool
}
func (VkPhysicalDeviceCustomBorderColorFeaturesEXT) extension() string {
	return "VK_EXT_custom_border_color"
}
func (VkPhysicalDeviceCustomBorderColorFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT
}
func (s VkPhysicalDeviceCustomBorderColorFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.CustomBorderColors {
		list = append(list, 2)
	}
	if s.CustomBorderColorWithoutFormat {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV struct {
	DedicatedAllocationImageAliasing bool
}
func (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) extension() string {
	return "VK_NV_dedicated_allocation_image_aliasing"
}
func (VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV
}
func (s VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DedicatedAllocationImageAliasing {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthBiasControlFeaturesEXT struct {
	DepthBiasControl bool
	LeastRepresentableValueForceUnormRepresentation bool
	FloatRepresentation bool
	DepthBiasExact bool
}
func (VkPhysicalDeviceDepthBiasControlFeaturesEXT) extension() string {
	return "VK_EXT_depth_bias_control"
}
func (VkPhysicalDeviceDepthBiasControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_BIAS_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthBiasControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.DepthBiasControl {
		list = append(list, 2)
	}
	if s.LeastRepresentableValueForceUnormRepresentation {
		list = append(list, 3)
	}
	if s.FloatRepresentation {
		list = append(list, 4)
	}
	if s.DepthBiasExact {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDeviceDepthClampControlFeaturesEXT struct {
	DepthClampControl bool
}
func (VkPhysicalDeviceDepthClampControlFeaturesEXT) extension() string {
	return "VK_EXT_depth_clamp_control"
}
func (VkPhysicalDeviceDepthClampControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClampControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClampControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthClampZeroOneFeaturesEXT struct {
	DepthClampZeroOne bool
}
func (VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) extension() string {
	return "VK_EXT_depth_clamp_zero_one"
}
func (VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLAMP_ZERO_ONE_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClampZeroOneFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClampZeroOne {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthClipControlFeaturesEXT struct {
	DepthClipControl bool
}
func (VkPhysicalDeviceDepthClipControlFeaturesEXT) extension() string {
	return "VK_EXT_depth_clip_control"
}
func (VkPhysicalDeviceDepthClipControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClipControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClipControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDepthClipEnableFeaturesEXT struct {
	DepthClipEnable bool
}
func (VkPhysicalDeviceDepthClipEnableFeaturesEXT) extension() string {
	return "VK_EXT_depth_clip_enable"
}
func (VkPhysicalDeviceDepthClipEnableFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT
}
func (s VkPhysicalDeviceDepthClipEnableFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DepthClipEnable {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDescriptorBufferFeaturesEXT struct {
	DescriptorBuffer bool
	DescriptorBufferCaptureReplay bool
	DescriptorBufferImageLayoutIgnored bool
	DescriptorBufferPushDescriptors bool
}
func (VkPhysicalDeviceDescriptorBufferFeaturesEXT) extension() string {
	return "VK_EXT_descriptor_buffer"
}
func (VkPhysicalDeviceDescriptorBufferFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_BUFFER_FEATURES_EXT
}
func (s VkPhysicalDeviceDescriptorBufferFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.DescriptorBuffer {
		list = append(list, 2)
	}
	if s.DescriptorBufferCaptureReplay {
		list = append(list, 3)
	}
	if s.DescriptorBufferImageLayoutIgnored {
		list = append(list, 4)
	}
	if s.DescriptorBufferPushDescriptors {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDeviceDescriptorIndexingFeatures struct {
	ShaderInputAttachmentArrayDynamicIndexing bool
	ShaderUniformTexelBufferArrayDynamicIndexing bool
	ShaderStorageTexelBufferArrayDynamicIndexing bool
	ShaderUniformBufferArrayNonUniformIndexing bool
	ShaderSampledImageArrayNonUniformIndexing bool
	ShaderStorageBufferArrayNonUniformIndexing bool
	ShaderStorageImageArrayNonUniformIndexing bool
	ShaderInputAttachmentArrayNonUniformIndexing bool
	ShaderUniformTexelBufferArrayNonUniformIndexing bool
	ShaderStorageTexelBufferArrayNonUniformIndexing bool
	DescriptorBindingUniformBufferUpdateAfterBind bool
	DescriptorBindingSampledImageUpdateAfterBind bool
	DescriptorBindingStorageImageUpdateAfterBind bool
	DescriptorBindingStorageBufferUpdateAfterBind bool
	DescriptorBindingUniformTexelBufferUpdateAfterBind bool
	DescriptorBindingStorageTexelBufferUpdateAfterBind bool
	DescriptorBindingUpdateUnusedWhilePending bool
	DescriptorBindingPartiallyBound bool
	DescriptorBindingVariableDescriptorCount bool
	RuntimeDescriptorArray bool
}
func (VkPhysicalDeviceDescriptorIndexingFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceDescriptorIndexingFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES
}
func (s VkPhysicalDeviceDescriptorIndexingFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 20)
	if s.ShaderInputAttachmentArrayDynamicIndexing {
		list = append(list, 2)
	}
	if s.ShaderUniformTexelBufferArrayDynamicIndexing {
		list = append(list, 3)
	}
	if s.ShaderStorageTexelBufferArrayDynamicIndexing {
		list = append(list, 4)
	}
	if s.ShaderUniformBufferArrayNonUniformIndexing {
		list = append(list, 5)
	}
	if s.ShaderSampledImageArrayNonUniformIndexing {
		list = append(list, 6)
	}
	if s.ShaderStorageBufferArrayNonUniformIndexing {
		list = append(list, 7)
	}
	if s.ShaderStorageImageArrayNonUniformIndexing {
		list = append(list, 8)
	}
	if s.ShaderInputAttachmentArrayNonUniformIndexing {
		list = append(list, 9)
	}
	if s.ShaderUniformTexelBufferArrayNonUniformIndexing {
		list = append(list, 10)
	}
	if s.ShaderStorageTexelBufferArrayNonUniformIndexing {
		list = append(list, 11)
	}
	if s.DescriptorBindingUniformBufferUpdateAfterBind {
		list = append(list, 12)
	}
	if s.DescriptorBindingSampledImageUpdateAfterBind {
		list = append(list, 13)
	}
	if s.DescriptorBindingStorageImageUpdateAfterBind {
		list = append(list, 14)
	}
	if s.DescriptorBindingStorageBufferUpdateAfterBind {
		list = append(list, 15)
	}
	if s.DescriptorBindingUniformTexelBufferUpdateAfterBind {
		list = append(list, 16)
	}
	if s.DescriptorBindingStorageTexelBufferUpdateAfterBind {
		list = append(list, 17)
	}
	if s.DescriptorBindingUpdateUnusedWhilePending {
		list = append(list, 18)
	}
	if s.DescriptorBindingPartiallyBound {
		list = append(list, 19)
	}
	if s.DescriptorBindingVariableDescriptorCount {
		list = append(list, 20)
	}
	if s.RuntimeDescriptorArray {
		list = append(list, 21)
	}
	return list
}
type VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV struct {
	DescriptorPoolOverallocation bool
}
func (VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) extension() string {
	return "VK_NV_descriptor_pool_overallocation"
}
func (VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_POOL_OVERALLOCATION_FEATURES_NV
}
func (s VkPhysicalDeviceDescriptorPoolOverallocationFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DescriptorPoolOverallocation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE struct {
	DescriptorSetHostMapping bool
}
func (VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) extension() string {
	return "VK_VALVE_descriptor_set_host_mapping"
}
func (VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE
}
func (s VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DescriptorSetHostMapping {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV struct {
	DeviceGeneratedCompute bool
	DeviceGeneratedComputePipelines bool
	DeviceGeneratedComputeCaptureReplay bool
}
func (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) extension() string {
	return "VK_NV_device_generated_commands_compute"
}
func (VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_COMPUTE_FEATURES_NV
}
func (s VkPhysicalDeviceDeviceGeneratedCommandsComputeFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.DeviceGeneratedCompute {
		list = append(list, 2)
	}
	if s.DeviceGeneratedComputePipelines {
		list = append(list, 3)
	}
	if s.DeviceGeneratedComputeCaptureReplay {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT struct {
	DeviceGeneratedCommands bool
	DynamicGeneratedPipelineLayout bool
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT) extension() string {
	return "VK_EXT_device_generated_commands"
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_EXT
}
func (s VkPhysicalDeviceDeviceGeneratedCommandsFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.DeviceGeneratedCommands {
		list = append(list, 2)
	}
	if s.DynamicGeneratedPipelineLayout {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV struct {
	DeviceGeneratedCommands bool
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) extension() string {
	return "VK_NV_device_generated_commands"
}
func (VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV
}
func (s VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DeviceGeneratedCommands {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDeviceMemoryReportFeaturesEXT struct {
	DeviceMemoryReport bool
}
func (VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) extension() string {
	return "VK_EXT_device_memory_report"
}
func (VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT
}
func (s VkPhysicalDeviceDeviceMemoryReportFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DeviceMemoryReport {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDiagnosticsConfigFeaturesNV struct {
	DiagnosticsConfig bool
}
func (VkPhysicalDeviceDiagnosticsConfigFeaturesNV) extension() string {
	return "VK_NV_device_diagnostics_config"
}
func (VkPhysicalDeviceDiagnosticsConfigFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV
}
func (s VkPhysicalDeviceDiagnosticsConfigFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DiagnosticsConfig {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingFeatures struct {
	DynamicRendering bool
}
func (VkPhysicalDeviceDynamicRenderingFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceDynamicRenderingFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES
}
func (s VkPhysicalDeviceDynamicRenderingFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRendering {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingLocalReadFeatures struct {
	DynamicRenderingLocalRead bool
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES
}
func (s VkPhysicalDeviceDynamicRenderingLocalReadFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRenderingLocalRead {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR struct {
	DynamicRenderingLocalRead bool
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR) extension() string {
	return "VK_KHR_dynamic_rendering_local_read"
}
func (VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_LOCAL_READ_FEATURES_KHR
}
func (s VkPhysicalDeviceDynamicRenderingLocalReadFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRenderingLocalRead {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT struct {
	DynamicRenderingUnusedAttachments bool
}
func (VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) extension() string {
	return "VK_EXT_dynamic_rendering_unused_attachments"
}
func (VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_UNUSED_ATTACHMENTS_FEATURES_EXT
}
func (s VkPhysicalDeviceDynamicRenderingUnusedAttachmentsFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.DynamicRenderingUnusedAttachments {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceExclusiveScissorFeaturesNV struct {
	ExclusiveScissor bool
}
func (VkPhysicalDeviceExclusiveScissorFeaturesNV) extension() string {
	return "VK_NV_scissor_exclusive"
}
func (VkPhysicalDeviceExclusiveScissorFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV
}
func (s VkPhysicalDeviceExclusiveScissorFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ExclusiveScissor {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceExtendedDynamicState3FeaturesEXT struct {
	ExtendedDynamicState3TessellationDomainOrigin bool
	ExtendedDynamicState3DepthClampEnable bool
	ExtendedDynamicState3PolygonMode bool
	ExtendedDynamicState3RasterizationSamples bool
	ExtendedDynamicState3SampleMask bool
	ExtendedDynamicState3AlphaToCoverageEnable bool
	ExtendedDynamicState3AlphaToOneEnable bool
	ExtendedDynamicState3LogicOpEnable bool
	ExtendedDynamicState3ColorBlendEnable bool
	ExtendedDynamicState3ColorBlendEquation bool
	ExtendedDynamicState3ColorWriteMask bool
	ExtendedDynamicState3RasterizationStream bool
	ExtendedDynamicState3ConservativeRasterizationMode bool
	ExtendedDynamicState3ExtraPrimitiveOverestimationSize bool
	ExtendedDynamicState3DepthClipEnable bool
	ExtendedDynamicState3SampleLocationsEnable bool
	ExtendedDynamicState3ColorBlendAdvanced bool
	ExtendedDynamicState3ProvokingVertexMode bool
	ExtendedDynamicState3LineRasterizationMode bool
	ExtendedDynamicState3LineStippleEnable bool
	ExtendedDynamicState3DepthClipNegativeOneToOne bool
	ExtendedDynamicState3ViewportWScalingEnable bool
	ExtendedDynamicState3ViewportSwizzle bool
	ExtendedDynamicState3CoverageToColorEnable bool
	ExtendedDynamicState3CoverageToColorLocation bool
	ExtendedDynamicState3CoverageModulationMode bool
	ExtendedDynamicState3CoverageModulationTableEnable bool
	ExtendedDynamicState3CoverageModulationTable bool
	ExtendedDynamicState3CoverageReductionMode bool
	ExtendedDynamicState3RepresentativeFragmentTestEnable bool
	ExtendedDynamicState3ShadingRateImageEnable bool
}
func (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) extension() string {
	return "VK_EXT_extended_dynamic_state3"
}
func (VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_3_FEATURES_EXT
}
func (s VkPhysicalDeviceExtendedDynamicState3FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 31)
	if s.ExtendedDynamicState3TessellationDomainOrigin {
		list = append(list, 2)
	}
	if s.ExtendedDynamicState3DepthClampEnable {
		list = append(list, 3)
	}
	if s.ExtendedDynamicState3PolygonMode {
		list = append(list, 4)
	}
	if s.ExtendedDynamicState3RasterizationSamples {
		list = append(list, 5)
	}
	if s.ExtendedDynamicState3SampleMask {
		list = append(list, 6)
	}
	if s.ExtendedDynamicState3AlphaToCoverageEnable {
		list = append(list, 7)
	}
	if s.ExtendedDynamicState3AlphaToOneEnable {
		list = append(list, 8)
	}
	if s.ExtendedDynamicState3LogicOpEnable {
		list = append(list, 9)
	}
	if s.ExtendedDynamicState3ColorBlendEnable {
		list = append(list, 10)
	}
	if s.ExtendedDynamicState3ColorBlendEquation {
		list = append(list, 11)
	}
	if s.ExtendedDynamicState3ColorWriteMask {
		list = append(list, 12)
	}
	if s.ExtendedDynamicState3RasterizationStream {
		list = append(list, 13)
	}
	if s.ExtendedDynamicState3ConservativeRasterizationMode {
		list = append(list, 14)
	}
	if s.ExtendedDynamicState3ExtraPrimitiveOverestimationSize {
		list = append(list, 15)
	}
	if s.ExtendedDynamicState3DepthClipEnable {
		list = append(list, 16)
	}
	if s.ExtendedDynamicState3SampleLocationsEnable {
		list = append(list, 17)
	}
	if s.ExtendedDynamicState3ColorBlendAdvanced {
		list = append(list, 18)
	}
	if s.ExtendedDynamicState3ProvokingVertexMode {
		list = append(list, 19)
	}
	if s.ExtendedDynamicState3LineRasterizationMode {
		list = append(list, 20)
	}
	if s.ExtendedDynamicState3LineStippleEnable {
		list = append(list, 21)
	}
	if s.ExtendedDynamicState3DepthClipNegativeOneToOne {
		list = append(list, 22)
	}
	if s.ExtendedDynamicState3ViewportWScalingEnable {
		list = append(list, 23)
	}
	if s.ExtendedDynamicState3ViewportSwizzle {
		list = append(list, 24)
	}
	if s.ExtendedDynamicState3CoverageToColorEnable {
		list = append(list, 25)
	}
	if s.ExtendedDynamicState3CoverageToColorLocation {
		list = append(list, 26)
	}
	if s.ExtendedDynamicState3CoverageModulationMode {
		list = append(list, 27)
	}
	if s.ExtendedDynamicState3CoverageModulationTableEnable {
		list = append(list, 28)
	}
	if s.ExtendedDynamicState3CoverageModulationTable {
		list = append(list, 29)
	}
	if s.ExtendedDynamicState3CoverageReductionMode {
		list = append(list, 30)
	}
	if s.ExtendedDynamicState3RepresentativeFragmentTestEnable {
		list = append(list, 31)
	}
	if s.ExtendedDynamicState3ShadingRateImageEnable {
		list = append(list, 32)
	}
	return list
}
type VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV struct {
	ExtendedSparseAddressSpace bool
}
func (VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV) extension() string {
	return "VK_NV_extended_sparse_address_space"
}
func (VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_SPARSE_ADDRESS_SPACE_FEATURES_NV
}
func (s VkPhysicalDeviceExtendedSparseAddressSpaceFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ExtendedSparseAddressSpace {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceExternalMemoryRDMAFeaturesNV struct {
	ExternalMemoryRDMA bool
}
func (VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) extension() string {
	return "VK_NV_external_memory_rdma"
}
func (VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV
}
func (s VkPhysicalDeviceExternalMemoryRDMAFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ExternalMemoryRDMA {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFaultFeaturesEXT struct {
	DeviceFault bool
	DeviceFaultVendorBinary bool
}
func (VkPhysicalDeviceFaultFeaturesEXT) extension() string {
	return "VK_EXT_device_fault"
}
func (VkPhysicalDeviceFaultFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FAULT_FEATURES_EXT
}
func (s VkPhysicalDeviceFaultFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.DeviceFault {
		list = append(list, 2)
	}
	if s.DeviceFaultVendorBinary {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceFeatures struct {
	RobustBufferAccess bool
	FullDrawIndexUint32 bool
	ImageCubeArray bool
	IndependentBlend bool
	GeometryShader bool
	TessellationShader bool
	SampleRateShading bool
	DualSrcBlend bool
	LogicOp bool
	MultiDrawIndirect bool
	DrawIndirectFirstInstance bool
	DepthClamp bool
	DepthBiasClamp bool
	FillModeNonSolid bool
	DepthBounds bool
	WideLines bool
	LargePoints bool
	AlphaToOne bool
	MultiViewport bool
	SamplerAnisotropy bool
	TextureCompressionETC2 bool
	TextureCompressionASTC_LDR bool
	TextureCompressionBC bool
	OcclusionQueryPrecise bool
	PipelineStatisticsQuery bool
	VertexPipelineStoresAndAtomics bool
	FragmentStoresAndAtomics bool
	ShaderTessellationAndGeometryPointSize bool
	ShaderImageGatherExtended bool
	ShaderStorageImageExtendedFormats bool
	ShaderStorageImageMultisample bool
	ShaderStorageImageReadWithoutFormat bool
	ShaderStorageImageWriteWithoutFormat bool
	ShaderUniformBufferArrayDynamicIndexing bool
	ShaderSampledImageArrayDynamicIndexing bool
	ShaderStorageBufferArrayDynamicIndexing bool
	ShaderStorageImageArrayDynamicIndexing bool
	ShaderClipDistance bool
	ShaderCullDistance bool
	ShaderFloat64 bool
	ShaderInt64 bool
	ShaderInt16 bool
	ShaderResourceResidency bool
	ShaderResourceMinLod bool
	SparseBinding bool
	SparseResidencyBuffer bool
	SparseResidencyImage2D bool
	SparseResidencyImage3D bool
	SparseResidency2Samples bool
	SparseResidency4Samples bool
	SparseResidency8Samples bool
	SparseResidency16Samples bool
	SparseResidencyAliased bool
	VariableMultisampleRate bool
	InheritedQueries bool
}
func (VkPhysicalDeviceFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2
}
func (s VkPhysicalDeviceFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 55)
	if s.RobustBufferAccess {
		list = append(list, 0)
	}
	if s.FullDrawIndexUint32 {
		list = append(list, 1)
	}
	if s.ImageCubeArray {
		list = append(list, 2)
	}
	if s.IndependentBlend {
		list = append(list, 3)
	}
	if s.GeometryShader {
		list = append(list, 4)
	}
	if s.TessellationShader {
		list = append(list, 5)
	}
	if s.SampleRateShading {
		list = append(list, 6)
	}
	if s.DualSrcBlend {
		list = append(list, 7)
	}
	if s.LogicOp {
		list = append(list, 8)
	}
	if s.MultiDrawIndirect {
		list = append(list, 9)
	}
	if s.DrawIndirectFirstInstance {
		list = append(list, 10)
	}
	if s.DepthClamp {
		list = append(list, 11)
	}
	if s.DepthBiasClamp {
		list = append(list, 12)
	}
	if s.FillModeNonSolid {
		list = append(list, 13)
	}
	if s.DepthBounds {
		list = append(list, 14)
	}
	if s.WideLines {
		list = append(list, 15)
	}
	if s.LargePoints {
		list = append(list, 16)
	}
	if s.AlphaToOne {
		list = append(list, 17)
	}
	if s.MultiViewport {
		list = append(list, 18)
	}
	if s.SamplerAnisotropy {
		list = append(list, 19)
	}
	if s.TextureCompressionETC2 {
		list = append(list, 20)
	}
	if s.TextureCompressionASTC_LDR {
		list = append(list, 21)
	}
	if s.TextureCompressionBC {
		list = append(list, 22)
	}
	if s.OcclusionQueryPrecise {
		list = append(list, 23)
	}
	if s.PipelineStatisticsQuery {
		list = append(list, 24)
	}
	if s.VertexPipelineStoresAndAtomics {
		list = append(list, 25)
	}
	if s.FragmentStoresAndAtomics {
		list = append(list, 26)
	}
	if s.ShaderTessellationAndGeometryPointSize {
		list = append(list, 27)
	}
	if s.ShaderImageGatherExtended {
		list = append(list, 28)
	}
	if s.ShaderStorageImageExtendedFormats {
		list = append(list, 29)
	}
	if s.ShaderStorageImageMultisample {
		list = append(list, 30)
	}
	if s.ShaderStorageImageReadWithoutFormat {
		list = append(list, 31)
	}
	if s.ShaderStorageImageWriteWithoutFormat {
		list = append(list, 32)
	}
	if s.ShaderUniformBufferArrayDynamicIndexing {
		list = append(list, 33)
	}
	if s.ShaderSampledImageArrayDynamicIndexing {
		list = append(list, 34)
	}
	if s.ShaderStorageBufferArrayDynamicIndexing {
		list = append(list, 35)
	}
	if s.ShaderStorageImageArrayDynamicIndexing {
		list = append(list, 36)
	}
	if s.ShaderClipDistance {
		list = append(list, 37)
	}
	if s.ShaderCullDistance {
		list = append(list, 38)
	}
	if s.ShaderFloat64 {
		list = append(list, 39)
	}
	if s.ShaderInt64 {
		list = append(list, 40)
	}
	if s.ShaderInt16 {
		list = append(list, 41)
	}
	if s.ShaderResourceResidency {
		list = append(list, 42)
	}
	if s.ShaderResourceMinLod {
		list = append(list, 43)
	}
	if s.SparseBinding {
		list = append(list, 44)
	}
	if s.SparseResidencyBuffer {
		list = append(list, 45)
	}
	if s.SparseResidencyImage2D {
		list = append(list, 46)
	}
	if s.SparseResidencyImage3D {
		list = append(list, 47)
	}
	if s.SparseResidency2Samples {
		list = append(list, 48)
	}
	if s.SparseResidency4Samples {
		list = append(list, 49)
	}
	if s.SparseResidency8Samples {
		list = append(list, 50)
	}
	if s.SparseResidency16Samples {
		list = append(list, 51)
	}
	if s.SparseResidencyAliased {
		list = append(list, 52)
	}
	if s.VariableMultisampleRate {
		list = append(list, 53)
	}
	if s.InheritedQueries {
		list = append(list, 54)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMap2FeaturesEXT struct {
	FragmentDensityMapDeferred bool
}
func (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) extension() string {
	return "VK_EXT_fragment_density_map2"
}
func (VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT
}
func (s VkPhysicalDeviceFragmentDensityMap2FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentDensityMapDeferred {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMapFeaturesEXT struct {
	FragmentDensityMap bool
	FragmentDensityMapDynamic bool
	FragmentDensityMapNonSubsampledImages bool
}
func (VkPhysicalDeviceFragmentDensityMapFeaturesEXT) extension() string {
	return "VK_EXT_fragment_density_map"
}
func (VkPhysicalDeviceFragmentDensityMapFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT
}
func (s VkPhysicalDeviceFragmentDensityMapFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.FragmentDensityMap {
		list = append(list, 2)
	}
	if s.FragmentDensityMapDynamic {
		list = append(list, 3)
	}
	if s.FragmentDensityMapNonSubsampledImages {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM struct {
	FragmentDensityMapOffset bool
}
func (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) extension() string {
	return "VK_QCOM_fragment_density_map_offset"
}
func (VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM
}
func (s VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentDensityMapOffset {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR struct {
	FragmentShaderBarycentric bool
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) extension() string {
	return "VK_KHR_fragment_shader_barycentric"
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR
}
func (s VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentShaderBarycentric {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV struct {
	FragmentShaderBarycentric bool
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV) extension() string {
	return "VK_NV_fragment_shader_barycentric"
}
func (VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV
}
func (s VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FragmentShaderBarycentric {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT struct {
	FragmentShaderSampleInterlock bool
	FragmentShaderPixelInterlock bool
	FragmentShaderShadingRateInterlock bool
}
func (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) extension() string {
	return "VK_EXT_fragment_shader_interlock"
}
func (VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT
}
func (s VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.FragmentShaderSampleInterlock {
		list = append(list, 2)
	}
	if s.FragmentShaderPixelInterlock {
		list = append(list, 3)
	}
	if s.FragmentShaderShadingRateInterlock {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV struct {
	FragmentShadingRateEnums bool
	SupersampleFragmentShadingRates bool
	NoInvocationFragmentShadingRates bool
}
func (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) extension() string {
	return "VK_NV_fragment_shading_rate_enums"
}
func (VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV
}
func (s VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.FragmentShadingRateEnums {
		list = append(list, 2)
	}
	if s.SupersampleFragmentShadingRates {
		list = append(list, 3)
	}
	if s.NoInvocationFragmentShadingRates {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFragmentShadingRateFeaturesKHR struct {
	PipelineFragmentShadingRate bool
	PrimitiveFragmentShadingRate bool
	AttachmentFragmentShadingRate bool
}
func (VkPhysicalDeviceFragmentShadingRateFeaturesKHR) extension() string {
	return "VK_KHR_fragment_shading_rate"
}
func (VkPhysicalDeviceFragmentShadingRateFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR
}
func (s VkPhysicalDeviceFragmentShadingRateFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.PipelineFragmentShadingRate {
		list = append(list, 2)
	}
	if s.PrimitiveFragmentShadingRate {
		list = append(list, 3)
	}
	if s.AttachmentFragmentShadingRate {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceFrameBoundaryFeaturesEXT struct {
	FrameBoundary bool
}
func (VkPhysicalDeviceFrameBoundaryFeaturesEXT) extension() string {
	return "VK_EXT_frame_boundary"
}
func (VkPhysicalDeviceFrameBoundaryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAME_BOUNDARY_FEATURES_EXT
}
func (s VkPhysicalDeviceFrameBoundaryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FrameBoundary {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGlobalPriorityQueryFeatures struct {
	GlobalPriorityQuery bool
}
func (VkPhysicalDeviceGlobalPriorityQueryFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceGlobalPriorityQueryFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES
}
func (s VkPhysicalDeviceGlobalPriorityQueryFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT struct {
	GlobalPriorityQuery bool
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT) extension() string {
	return "VK_EXT_global_priority_query"
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT
}
func (s VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR struct {
	GlobalPriorityQuery bool
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) extension() string {
	return "VK_KHR_global_priority"
}
func (VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR
}
func (s VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT struct {
	GraphicsPipelineLibrary bool
}
func (VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) extension() string {
	return "VK_EXT_graphics_pipeline_library"
}
func (VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT
}
func (s VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.GraphicsPipelineLibrary {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHdrVividFeaturesHUAWEI struct {
	HdrVivid bool
}
func (VkPhysicalDeviceHdrVividFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_hdr_vivid"
}
func (VkPhysicalDeviceHdrVividFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HDR_VIVID_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceHdrVividFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HdrVivid {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHostImageCopyFeatures struct {
	HostImageCopy bool
}
func (VkPhysicalDeviceHostImageCopyFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceHostImageCopyFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES
}
func (s VkPhysicalDeviceHostImageCopyFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HostImageCopy {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHostImageCopyFeaturesEXT struct {
	HostImageCopy bool
}
func (VkPhysicalDeviceHostImageCopyFeaturesEXT) extension() string {
	return "VK_EXT_host_image_copy"
}
func (VkPhysicalDeviceHostImageCopyFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_IMAGE_COPY_FEATURES_EXT
}
func (s VkPhysicalDeviceHostImageCopyFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HostImageCopy {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceHostQueryResetFeatures struct {
	HostQueryReset bool
}
func (VkPhysicalDeviceHostQueryResetFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceHostQueryResetFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES
}
func (s VkPhysicalDeviceHostQueryResetFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.HostQueryReset {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImage2DViewOf3DFeaturesEXT struct {
	Image2DViewOf3D bool
	Sampler2DViewOf3D bool
}
func (VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) extension() string {
	return "VK_EXT_image_2d_view_of_3d"
}
func (VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT
}
func (s VkPhysicalDeviceImage2DViewOf3DFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.Image2DViewOf3D {
		list = append(list, 2)
	}
	if s.Sampler2DViewOf3D {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceImageAlignmentControlFeaturesMESA struct {
	ImageAlignmentControl bool
}
func (VkPhysicalDeviceImageAlignmentControlFeaturesMESA) extension() string {
	return "VK_MESA_image_alignment_control"
}
func (VkPhysicalDeviceImageAlignmentControlFeaturesMESA) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ALIGNMENT_CONTROL_FEATURES_MESA
}
func (s VkPhysicalDeviceImageAlignmentControlFeaturesMESA) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageAlignmentControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageCompressionControlFeaturesEXT struct {
	ImageCompressionControl bool
}
func (VkPhysicalDeviceImageCompressionControlFeaturesEXT) extension() string {
	return "VK_EXT_image_compression_control"
}
func (VkPhysicalDeviceImageCompressionControlFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT
}
func (s VkPhysicalDeviceImageCompressionControlFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageCompressionControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT struct {
	ImageCompressionControlSwapchain bool
}
func (VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) extension() string {
	return "VK_EXT_image_compression_control_swapchain"
}
func (VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT
}
func (s VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageCompressionControlSwapchain {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageProcessing2FeaturesQCOM struct {
	TextureBlockMatch2 bool
}
func (VkPhysicalDeviceImageProcessing2FeaturesQCOM) extension() string {
	return "VK_QCOM_image_processing2"
}
func (VkPhysicalDeviceImageProcessing2FeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_2_FEATURES_QCOM
}
func (s VkPhysicalDeviceImageProcessing2FeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TextureBlockMatch2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageProcessingFeaturesQCOM struct {
	TextureSampleWeighted bool
	TextureBoxFilter bool
	TextureBlockMatch bool
}
func (VkPhysicalDeviceImageProcessingFeaturesQCOM) extension() string {
	return "VK_QCOM_image_processing"
}
func (VkPhysicalDeviceImageProcessingFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM
}
func (s VkPhysicalDeviceImageProcessingFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.TextureSampleWeighted {
		list = append(list, 2)
	}
	if s.TextureBoxFilter {
		list = append(list, 3)
	}
	if s.TextureBlockMatch {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceImageRobustnessFeatures struct {
	RobustImageAccess bool
}
func (VkPhysicalDeviceImageRobustnessFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceImageRobustnessFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES
}
func (s VkPhysicalDeviceImageRobustnessFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RobustImageAccess {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT struct {
	ImageSlicedViewOf3D bool
}
func (VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) extension() string {
	return "VK_EXT_image_sliced_view_of_3d"
}
func (VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_SLICED_VIEW_OF_3D_FEATURES_EXT
}
func (s VkPhysicalDeviceImageSlicedViewOf3DFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageSlicedViewOf3D {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImageViewMinLodFeaturesEXT struct {
	MinLod bool
}
func (VkPhysicalDeviceImageViewMinLodFeaturesEXT) extension() string {
	return "VK_EXT_image_view_min_lod"
}
func (VkPhysicalDeviceImageViewMinLodFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT
}
func (s VkPhysicalDeviceImageViewMinLodFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MinLod {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceImagelessFramebufferFeatures struct {
	ImagelessFramebuffer bool
}
func (VkPhysicalDeviceImagelessFramebufferFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceImagelessFramebufferFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES
}
func (s VkPhysicalDeviceImagelessFramebufferFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImagelessFramebuffer {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceIndexTypeUint8Features struct {
	IndexTypeUint8 bool
}
func (VkPhysicalDeviceIndexTypeUint8Features) extension() string {
	return ""
}
func (VkPhysicalDeviceIndexTypeUint8Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES
}
func (s VkPhysicalDeviceIndexTypeUint8Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndexTypeUint8 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceIndexTypeUint8FeaturesEXT struct {
	IndexTypeUint8 bool
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesEXT) extension() string {
	return "VK_EXT_index_type_uint8"
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT
}
func (s VkPhysicalDeviceIndexTypeUint8FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndexTypeUint8 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceIndexTypeUint8FeaturesKHR struct {
	IndexTypeUint8 bool
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesKHR) extension() string {
	return "VK_KHR_index_type_uint8"
}
func (VkPhysicalDeviceIndexTypeUint8FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_KHR
}
func (s VkPhysicalDeviceIndexTypeUint8FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.IndexTypeUint8 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceInheritedViewportScissorFeaturesNV struct {
	InheritedViewportScissor2D bool
}
func (VkPhysicalDeviceInheritedViewportScissorFeaturesNV) extension() string {
	return "VK_NV_inherited_viewport_scissor"
}
func (VkPhysicalDeviceInheritedViewportScissorFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV
}
func (s VkPhysicalDeviceInheritedViewportScissorFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.InheritedViewportScissor2D {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceInlineUniformBlockFeatures struct {
	InlineUniformBlock bool
	DescriptorBindingInlineUniformBlockUpdateAfterBind bool
}
func (VkPhysicalDeviceInlineUniformBlockFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceInlineUniformBlockFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES
}
func (s VkPhysicalDeviceInlineUniformBlockFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.InlineUniformBlock {
		list = append(list, 2)
	}
	if s.DescriptorBindingInlineUniformBlockUpdateAfterBind {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceInvocationMaskFeaturesHUAWEI struct {
	InvocationMask bool
}
func (VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_invocation_mask"
}
func (VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceInvocationMaskFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.InvocationMask {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceLegacyDitheringFeaturesEXT struct {
	LegacyDithering bool
}
func (VkPhysicalDeviceLegacyDitheringFeaturesEXT) extension() string {
	return "VK_EXT_legacy_dithering"
}
func (VkPhysicalDeviceLegacyDitheringFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_DITHERING_FEATURES_EXT
}
func (s VkPhysicalDeviceLegacyDitheringFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.LegacyDithering {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT struct {
	LegacyVertexAttributes bool
}
func (VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT) extension() string {
	return "VK_EXT_legacy_vertex_attributes"
}
func (VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LEGACY_VERTEX_ATTRIBUTES_FEATURES_EXT
}
func (s VkPhysicalDeviceLegacyVertexAttributesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.LegacyVertexAttributes {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceLineRasterizationFeatures struct {
	RectangularLines bool
	BresenhamLines bool
	SmoothLines bool
	StippledRectangularLines bool
	StippledBresenhamLines bool
	StippledSmoothLines bool
}
func (VkPhysicalDeviceLineRasterizationFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceLineRasterizationFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES
}
func (s VkPhysicalDeviceLineRasterizationFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 6)
	if s.RectangularLines {
		list = append(list, 2)
	}
	if s.BresenhamLines {
		list = append(list, 3)
	}
	if s.SmoothLines {
		list = append(list, 4)
	}
	if s.StippledRectangularLines {
		list = append(list, 5)
	}
	if s.StippledBresenhamLines {
		list = append(list, 6)
	}
	if s.StippledSmoothLines {
		list = append(list, 7)
	}
	return list
}
type VkPhysicalDeviceLineRasterizationFeaturesEXT struct {
	RectangularLines bool
	BresenhamLines bool
	SmoothLines bool
	StippledRectangularLines bool
	StippledBresenhamLines bool
	StippledSmoothLines bool
}
func (VkPhysicalDeviceLineRasterizationFeaturesEXT) extension() string {
	return "VK_EXT_line_rasterization"
}
func (VkPhysicalDeviceLineRasterizationFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT
}
func (s VkPhysicalDeviceLineRasterizationFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 6)
	if s.RectangularLines {
		list = append(list, 2)
	}
	if s.BresenhamLines {
		list = append(list, 3)
	}
	if s.SmoothLines {
		list = append(list, 4)
	}
	if s.StippledRectangularLines {
		list = append(list, 5)
	}
	if s.StippledBresenhamLines {
		list = append(list, 6)
	}
	if s.StippledSmoothLines {
		list = append(list, 7)
	}
	return list
}
type VkPhysicalDeviceLineRasterizationFeaturesKHR struct {
	RectangularLines bool
	BresenhamLines bool
	SmoothLines bool
	StippledRectangularLines bool
	StippledBresenhamLines bool
	StippledSmoothLines bool
}
func (VkPhysicalDeviceLineRasterizationFeaturesKHR) extension() string {
	return "VK_KHR_line_rasterization"
}
func (VkPhysicalDeviceLineRasterizationFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_KHR
}
func (s VkPhysicalDeviceLineRasterizationFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 6)
	if s.RectangularLines {
		list = append(list, 2)
	}
	if s.BresenhamLines {
		list = append(list, 3)
	}
	if s.SmoothLines {
		list = append(list, 4)
	}
	if s.StippledRectangularLines {
		list = append(list, 5)
	}
	if s.StippledBresenhamLines {
		list = append(list, 6)
	}
	if s.StippledSmoothLines {
		list = append(list, 7)
	}
	return list
}
type VkPhysicalDeviceLinearColorAttachmentFeaturesNV struct {
	LinearColorAttachment bool
}
func (VkPhysicalDeviceLinearColorAttachmentFeaturesNV) extension() string {
	return "VK_NV_linear_color_attachment"
}
func (VkPhysicalDeviceLinearColorAttachmentFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV
}
func (s VkPhysicalDeviceLinearColorAttachmentFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.LinearColorAttachment {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance4Features struct {
	Maintenance4 bool
}
func (VkPhysicalDeviceMaintenance4Features) extension() string {
	return ""
}
func (VkPhysicalDeviceMaintenance4Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES
}
func (s VkPhysicalDeviceMaintenance4Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance4 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance5Features struct {
	Maintenance5 bool
}
func (VkPhysicalDeviceMaintenance5Features) extension() string {
	return ""
}
func (VkPhysicalDeviceMaintenance5Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES
}
func (s VkPhysicalDeviceMaintenance5Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance5 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance5FeaturesKHR struct {
	Maintenance5 bool
}
func (VkPhysicalDeviceMaintenance5FeaturesKHR) extension() string {
	return "VK_KHR_maintenance5"
}
func (VkPhysicalDeviceMaintenance5FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_5_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance5FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance5 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance6Features struct {
	Maintenance6 bool
}
func (VkPhysicalDeviceMaintenance6Features) extension() string {
	return ""
}
func (VkPhysicalDeviceMaintenance6Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES
}
func (s VkPhysicalDeviceMaintenance6Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance6 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance6FeaturesKHR struct {
	Maintenance6 bool
}
func (VkPhysicalDeviceMaintenance6FeaturesKHR) extension() string {
	return "VK_KHR_maintenance6"
}
func (VkPhysicalDeviceMaintenance6FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_6_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance6FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance6 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMaintenance7FeaturesKHR struct {
	Maintenance7 bool
}
func (VkPhysicalDeviceMaintenance7FeaturesKHR) extension() string {
	return "VK_KHR_maintenance7"
}
func (VkPhysicalDeviceMaintenance7FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_7_FEATURES_KHR
}
func (s VkPhysicalDeviceMaintenance7FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Maintenance7 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMapMemoryPlacedFeaturesEXT struct {
	MemoryMapPlaced bool
	MemoryMapRangePlaced bool
	MemoryUnmapReserve bool
}
func (VkPhysicalDeviceMapMemoryPlacedFeaturesEXT) extension() string {
	return "VK_EXT_map_memory_placed"
}
func (VkPhysicalDeviceMapMemoryPlacedFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MAP_MEMORY_PLACED_FEATURES_EXT
}
func (s VkPhysicalDeviceMapMemoryPlacedFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.MemoryMapPlaced {
		list = append(list, 2)
	}
	if s.MemoryMapRangePlaced {
		list = append(list, 3)
	}
	if s.MemoryUnmapReserve {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceMemoryDecompressionFeaturesNV struct {
	MemoryDecompression bool
}
func (VkPhysicalDeviceMemoryDecompressionFeaturesNV) extension() string {
	return "VK_NV_memory_decompression"
}
func (VkPhysicalDeviceMemoryDecompressionFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_DECOMPRESSION_FEATURES_NV
}
func (s VkPhysicalDeviceMemoryDecompressionFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MemoryDecompression {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMemoryPriorityFeaturesEXT struct {
	MemoryPriority bool
}
func (VkPhysicalDeviceMemoryPriorityFeaturesEXT) extension() string {
	return "VK_EXT_memory_priority"
}
func (VkPhysicalDeviceMemoryPriorityFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT
}
func (s VkPhysicalDeviceMemoryPriorityFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MemoryPriority {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMeshShaderFeaturesEXT struct {
	TaskShader bool
	MeshShader bool
	MultiviewMeshShader bool
	PrimitiveFragmentShadingRateMeshShader bool
	MeshShaderQueries bool
}
func (VkPhysicalDeviceMeshShaderFeaturesEXT) extension() string {
	return "VK_EXT_mesh_shader"
}
func (VkPhysicalDeviceMeshShaderFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_EXT
}
func (s VkPhysicalDeviceMeshShaderFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 5)
	if s.TaskShader {
		list = append(list, 2)
	}
	if s.MeshShader {
		list = append(list, 3)
	}
	if s.MultiviewMeshShader {
		list = append(list, 4)
	}
	if s.PrimitiveFragmentShadingRateMeshShader {
		list = append(list, 5)
	}
	if s.MeshShaderQueries {
		list = append(list, 6)
	}
	return list
}
type VkPhysicalDeviceMeshShaderFeaturesNV struct {
	TaskShader bool
	MeshShader bool
}
func (VkPhysicalDeviceMeshShaderFeaturesNV) extension() string {
	return "VK_NV_mesh_shader"
}
func (VkPhysicalDeviceMeshShaderFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV
}
func (s VkPhysicalDeviceMeshShaderFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.TaskShader {
		list = append(list, 2)
	}
	if s.MeshShader {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceMultiDrawFeaturesEXT struct {
	MultiDraw bool
}
func (VkPhysicalDeviceMultiDrawFeaturesEXT) extension() string {
	return "VK_EXT_multi_draw"
}
func (VkPhysicalDeviceMultiDrawFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT
}
func (s VkPhysicalDeviceMultiDrawFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultiDraw {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT struct {
	MultisampledRenderToSingleSampled bool
}
func (VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) extension() string {
	return "VK_EXT_multisampled_render_to_single_sampled"
}
func (VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT
}
func (s VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultisampledRenderToSingleSampled {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMultiviewFeatures struct {
	Multiview bool
	MultiviewGeometryShader bool
	MultiviewTessellationShader bool
}
func (VkPhysicalDeviceMultiviewFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceMultiviewFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES
}
func (s VkPhysicalDeviceMultiviewFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.Multiview {
		list = append(list, 2)
	}
	if s.MultiviewGeometryShader {
		list = append(list, 3)
	}
	if s.MultiviewTessellationShader {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM struct {
	MultiviewPerViewRenderAreas bool
}
func (VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) extension() string {
	return "VK_QCOM_multiview_per_view_render_areas"
}
func (VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_RENDER_AREAS_FEATURES_QCOM
}
func (s VkPhysicalDeviceMultiviewPerViewRenderAreasFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultiviewPerViewRenderAreas {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM struct {
	MultiviewPerViewViewports bool
}
func (VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) extension() string {
	return "VK_QCOM_multiview_per_view_viewports"
}
func (VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_VIEWPORTS_FEATURES_QCOM
}
func (s VkPhysicalDeviceMultiviewPerViewViewportsFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MultiviewPerViewViewports {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT struct {
	MutableDescriptorType bool
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) extension() string {
	return "VK_EXT_mutable_descriptor_type"
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_EXT
}
func (s VkPhysicalDeviceMutableDescriptorTypeFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MutableDescriptorType {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE struct {
	MutableDescriptorType bool
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE) extension() string {
	return "VK_VALVE_mutable_descriptor_type"
}
func (VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE
}
func (s VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.MutableDescriptorType {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceNestedCommandBufferFeaturesEXT struct {
	NestedCommandBuffer bool
	NestedCommandBufferRendering bool
	NestedCommandBufferSimultaneousUse bool
}
func (VkPhysicalDeviceNestedCommandBufferFeaturesEXT) extension() string {
	return "VK_EXT_nested_command_buffer"
}
func (VkPhysicalDeviceNestedCommandBufferFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_NESTED_COMMAND_BUFFER_FEATURES_EXT
}
func (s VkPhysicalDeviceNestedCommandBufferFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.NestedCommandBuffer {
		list = append(list, 2)
	}
	if s.NestedCommandBufferRendering {
		list = append(list, 3)
	}
	if s.NestedCommandBufferSimultaneousUse {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT struct {
	NonSeamlessCubeMap bool
}
func (VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) extension() string {
	return "VK_EXT_non_seamless_cube_map"
}
func (VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT
}
func (s VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.NonSeamlessCubeMap {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceOpacityMicromapFeaturesEXT struct {
	Micromap bool
	MicromapCaptureReplay bool
	MicromapHostCommands bool
}
func (VkPhysicalDeviceOpacityMicromapFeaturesEXT) extension() string {
	return "VK_EXT_opacity_micromap"
}
func (VkPhysicalDeviceOpacityMicromapFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_OPACITY_MICROMAP_FEATURES_EXT
}
func (s VkPhysicalDeviceOpacityMicromapFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.Micromap {
		list = append(list, 2)
	}
	if s.MicromapCaptureReplay {
		list = append(list, 3)
	}
	if s.MicromapHostCommands {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceOpticalFlowFeaturesNV struct {
	OpticalFlow bool
}
func (VkPhysicalDeviceOpticalFlowFeaturesNV) extension() string {
	return "VK_NV_optical_flow"
}
func (VkPhysicalDeviceOpticalFlowFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_OPTICAL_FLOW_FEATURES_NV
}
func (s VkPhysicalDeviceOpticalFlowFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.OpticalFlow {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT struct {
	PageableDeviceLocalMemory bool
}
func (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) extension() string {
	return "VK_EXT_pageable_device_local_memory"
}
func (VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT
}
func (s VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PageableDeviceLocalMemory {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePerStageDescriptorSetFeaturesNV struct {
	PerStageDescriptorSet bool
	DynamicPipelineLayout bool
}
func (VkPhysicalDevicePerStageDescriptorSetFeaturesNV) extension() string {
	return "VK_NV_per_stage_descriptor_set"
}
func (VkPhysicalDevicePerStageDescriptorSetFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PER_STAGE_DESCRIPTOR_SET_FEATURES_NV
}
func (s VkPhysicalDevicePerStageDescriptorSetFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.PerStageDescriptorSet {
		list = append(list, 2)
	}
	if s.DynamicPipelineLayout {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDevicePerformanceQueryFeaturesKHR struct {
	PerformanceCounterQueryPools bool
	PerformanceCounterMultipleQueryPools bool
}
func (VkPhysicalDevicePerformanceQueryFeaturesKHR) extension() string {
	return "VK_KHR_performance_query"
}
func (VkPhysicalDevicePerformanceQueryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR
}
func (s VkPhysicalDevicePerformanceQueryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.PerformanceCounterQueryPools {
		list = append(list, 2)
	}
	if s.PerformanceCounterMultipleQueryPools {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDevicePipelineBinaryFeaturesKHR struct {
	PipelineBinaries bool
}
func (VkPhysicalDevicePipelineBinaryFeaturesKHR) extension() string {
	return "VK_KHR_pipeline_binary"
}
func (VkPhysicalDevicePipelineBinaryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_BINARY_FEATURES_KHR
}
func (s VkPhysicalDevicePipelineBinaryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineBinaries {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineCreationCacheControlFeatures struct {
	PipelineCreationCacheControl bool
}
func (VkPhysicalDevicePipelineCreationCacheControlFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePipelineCreationCacheControlFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES
}
func (s VkPhysicalDevicePipelineCreationCacheControlFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineCreationCacheControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR struct {
	PipelineExecutableInfo bool
}
func (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) extension() string {
	return "VK_KHR_pipeline_executable_properties"
}
func (VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR
}
func (s VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineExecutableInfo {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT struct {
	PipelineLibraryGroupHandles bool
}
func (VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_library_group_handles"
}
func (VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_LIBRARY_GROUP_HANDLES_FEATURES_EXT
}
func (s VkPhysicalDevicePipelineLibraryGroupHandlesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineLibraryGroupHandles {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelinePropertiesFeaturesEXT struct {
	PipelinePropertiesIdentifier bool
}
func (VkPhysicalDevicePipelinePropertiesFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_properties"
}
func (VkPhysicalDevicePipelinePropertiesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT
}
func (s VkPhysicalDevicePipelinePropertiesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelinePropertiesIdentifier {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineProtectedAccessFeatures struct {
	PipelineProtectedAccess bool
}
func (VkPhysicalDevicePipelineProtectedAccessFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePipelineProtectedAccessFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES
}
func (s VkPhysicalDevicePipelineProtectedAccessFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineProtectedAccess {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineProtectedAccessFeaturesEXT struct {
	PipelineProtectedAccess bool
}
func (VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_protected_access"
}
func (VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROTECTED_ACCESS_FEATURES_EXT
}
func (s VkPhysicalDevicePipelineProtectedAccessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineProtectedAccess {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineRobustnessFeatures struct {
	PipelineRobustness bool
}
func (VkPhysicalDevicePipelineRobustnessFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePipelineRobustnessFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES
}
func (s VkPhysicalDevicePipelineRobustnessFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineRobustness {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePipelineRobustnessFeaturesEXT struct {
	PipelineRobustness bool
}
func (VkPhysicalDevicePipelineRobustnessFeaturesEXT) extension() string {
	return "VK_EXT_pipeline_robustness"
}
func (VkPhysicalDevicePipelineRobustnessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT
}
func (s VkPhysicalDevicePipelineRobustnessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PipelineRobustness {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentBarrierFeaturesNV struct {
	PresentBarrier bool
}
func (VkPhysicalDevicePresentBarrierFeaturesNV) extension() string {
	return "VK_NV_present_barrier"
}
func (VkPhysicalDevicePresentBarrierFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_BARRIER_FEATURES_NV
}
func (s VkPhysicalDevicePresentBarrierFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentBarrier {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentIdFeaturesKHR struct {
	PresentId bool
}
func (VkPhysicalDevicePresentIdFeaturesKHR) extension() string {
	return "VK_KHR_present_id"
}
func (VkPhysicalDevicePresentIdFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR
}
func (s VkPhysicalDevicePresentIdFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentId {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT struct {
	PresentModeFifoLatestReady bool
}
func (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT) extension() string {
	return "VK_EXT_present_mode_fifo_latest_ready"
}
func (VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_MODE_FIFO_LATEST_READY_FEATURES_EXT
}
func (s VkPhysicalDevicePresentModeFifoLatestReadyFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentModeFifoLatestReady {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePresentWaitFeaturesKHR struct {
	PresentWait bool
}
func (VkPhysicalDevicePresentWaitFeaturesKHR) extension() string {
	return "VK_KHR_present_wait"
}
func (VkPhysicalDevicePresentWaitFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR
}
func (s VkPhysicalDevicePresentWaitFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PresentWait {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT struct {
	PrimitiveTopologyListRestart bool
	PrimitiveTopologyPatchListRestart bool
}
func (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) extension() string {
	return "VK_EXT_primitive_topology_list_restart"
}
func (VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT
}
func (s VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.PrimitiveTopologyListRestart {
		list = append(list, 2)
	}
	if s.PrimitiveTopologyPatchListRestart {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT struct {
	PrimitivesGeneratedQuery bool
	PrimitivesGeneratedQueryWithRasterizerDiscard bool
	PrimitivesGeneratedQueryWithNonZeroStreams bool
}
func (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) extension() string {
	return "VK_EXT_primitives_generated_query"
}
func (VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT
}
func (s VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.PrimitivesGeneratedQuery {
		list = append(list, 2)
	}
	if s.PrimitivesGeneratedQueryWithRasterizerDiscard {
		list = append(list, 3)
	}
	if s.PrimitivesGeneratedQueryWithNonZeroStreams {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDevicePrivateDataFeatures struct {
	PrivateData bool
}
func (VkPhysicalDevicePrivateDataFeatures) extension() string {
	return ""
}
func (VkPhysicalDevicePrivateDataFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES
}
func (s VkPhysicalDevicePrivateDataFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.PrivateData {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceProtectedMemoryFeatures struct {
	ProtectedMemory bool
}
func (VkPhysicalDeviceProtectedMemoryFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceProtectedMemoryFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES
}
func (s VkPhysicalDeviceProtectedMemoryFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ProtectedMemory {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceProvokingVertexFeaturesEXT struct {
	ProvokingVertexLast bool
	TransformFeedbackPreservesProvokingVertex bool
}
func (VkPhysicalDeviceProvokingVertexFeaturesEXT) extension() string {
	return "VK_EXT_provoking_vertex"
}
func (VkPhysicalDeviceProvokingVertexFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT
}
func (s VkPhysicalDeviceProvokingVertexFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ProvokingVertexLast {
		list = append(list, 2)
	}
	if s.TransformFeedbackPreservesProvokingVertex {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT struct {
	FormatRgba10x6WithoutYCbCrSampler bool
}
func (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) extension() string {
	return "VK_EXT_rgba10x6_formats"
}
func (VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT
}
func (s VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.FormatRgba10x6WithoutYCbCrSampler {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM struct {
	RasterizationOrderColorAttachmentAccess bool
	RasterizationOrderDepthAttachmentAccess bool
	RasterizationOrderStencilAttachmentAccess bool
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM) extension() string {
	return "VK_ARM_rasterization_order_attachment_access"
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM
}
func (s VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.RasterizationOrderColorAttachmentAccess {
		list = append(list, 2)
	}
	if s.RasterizationOrderDepthAttachmentAccess {
		list = append(list, 3)
	}
	if s.RasterizationOrderStencilAttachmentAccess {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT struct {
	RasterizationOrderColorAttachmentAccess bool
	RasterizationOrderDepthAttachmentAccess bool
	RasterizationOrderStencilAttachmentAccess bool
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) extension() string {
	return "VK_EXT_rasterization_order_attachment_access"
}
func (VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_EXT
}
func (s VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.RasterizationOrderColorAttachmentAccess {
		list = append(list, 2)
	}
	if s.RasterizationOrderDepthAttachmentAccess {
		list = append(list, 3)
	}
	if s.RasterizationOrderStencilAttachmentAccess {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceRawAccessChainsFeaturesNV struct {
	ShaderRawAccessChains bool
}
func (VkPhysicalDeviceRawAccessChainsFeaturesNV) extension() string {
	return "VK_NV_raw_access_chains"
}
func (VkPhysicalDeviceRawAccessChainsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAW_ACCESS_CHAINS_FEATURES_NV
}
func (s VkPhysicalDeviceRawAccessChainsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderRawAccessChains {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayQueryFeaturesKHR struct {
	RayQuery bool
}
func (VkPhysicalDeviceRayQueryFeaturesKHR) extension() string {
	return "VK_KHR_ray_query"
}
func (VkPhysicalDeviceRayQueryFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR
}
func (s VkPhysicalDeviceRayQueryFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayQuery {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV struct {
	RayTracingInvocationReorder bool
}
func (VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) extension() string {
	return "VK_NV_ray_tracing_invocation_reorder"
}
func (VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_INVOCATION_REORDER_FEATURES_NV
}
func (s VkPhysicalDeviceRayTracingInvocationReorderFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayTracingInvocationReorder {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR struct {
	RayTracingMaintenance1 bool
	RayTracingPipelineTraceRaysIndirect2 bool
}
func (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) extension() string {
	return "VK_KHR_ray_tracing_maintenance1"
}
func (VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR
}
func (s VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.RayTracingMaintenance1 {
		list = append(list, 2)
	}
	if s.RayTracingPipelineTraceRaysIndirect2 {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceRayTracingMotionBlurFeaturesNV struct {
	RayTracingMotionBlur bool
	RayTracingMotionBlurPipelineTraceRaysIndirect bool
}
func (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) extension() string {
	return "VK_NV_ray_tracing_motion_blur"
}
func (VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV
}
func (s VkPhysicalDeviceRayTracingMotionBlurFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.RayTracingMotionBlur {
		list = append(list, 2)
	}
	if s.RayTracingMotionBlurPipelineTraceRaysIndirect {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceRayTracingPipelineFeaturesKHR struct {
	RayTracingPipeline bool
	RayTracingPipelineShaderGroupHandleCaptureReplay bool
	RayTracingPipelineShaderGroupHandleCaptureReplayMixed bool
	RayTracingPipelineTraceRaysIndirect bool
	RayTraversalPrimitiveCulling bool
}
func (VkPhysicalDeviceRayTracingPipelineFeaturesKHR) extension() string {
	return "VK_KHR_ray_tracing_pipeline"
}
func (VkPhysicalDeviceRayTracingPipelineFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR
}
func (s VkPhysicalDeviceRayTracingPipelineFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 5)
	if s.RayTracingPipeline {
		list = append(list, 2)
	}
	if s.RayTracingPipelineShaderGroupHandleCaptureReplay {
		list = append(list, 3)
	}
	if s.RayTracingPipelineShaderGroupHandleCaptureReplayMixed {
		list = append(list, 4)
	}
	if s.RayTracingPipelineTraceRaysIndirect {
		list = append(list, 5)
	}
	if s.RayTraversalPrimitiveCulling {
		list = append(list, 6)
	}
	return list
}
type VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR struct {
	RayTracingPositionFetch bool
}
func (VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) extension() string {
	return "VK_KHR_ray_tracing_position_fetch"
}
func (VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_POSITION_FETCH_FEATURES_KHR
}
func (s VkPhysicalDeviceRayTracingPositionFetchFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayTracingPositionFetch {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRayTracingValidationFeaturesNV struct {
	RayTracingValidation bool
}
func (VkPhysicalDeviceRayTracingValidationFeaturesNV) extension() string {
	return "VK_NV_ray_tracing_validation"
}
func (VkPhysicalDeviceRayTracingValidationFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_VALIDATION_FEATURES_NV
}
func (s VkPhysicalDeviceRayTracingValidationFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RayTracingValidation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG struct {
	RelaxedLineRasterization bool
}
func (VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG) extension() string {
	return "VK_IMG_relaxed_line_rasterization"
}
func (VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RELAXED_LINE_RASTERIZATION_FEATURES_IMG
}
func (s VkPhysicalDeviceRelaxedLineRasterizationFeaturesIMG) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RelaxedLineRasterization {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRenderPassStripedFeaturesARM struct {
	RenderPassStriped bool
}
func (VkPhysicalDeviceRenderPassStripedFeaturesARM) extension() string {
	return "VK_ARM_render_pass_striped"
}
func (VkPhysicalDeviceRenderPassStripedFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_RENDER_PASS_STRIPED_FEATURES_ARM
}
func (s VkPhysicalDeviceRenderPassStripedFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RenderPassStriped {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV struct {
	RepresentativeFragmentTest bool
}
func (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) extension() string {
	return "VK_NV_representative_fragment_test"
}
func (VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV
}
func (s VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.RepresentativeFragmentTest {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceRobustness2FeaturesEXT struct {
	RobustBufferAccess2 bool
	RobustImageAccess2 bool
	NullDescriptor bool
}
func (VkPhysicalDeviceRobustness2FeaturesEXT) extension() string {
	return "VK_EXT_robustness2"
}
func (VkPhysicalDeviceRobustness2FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT
}
func (s VkPhysicalDeviceRobustness2FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.RobustBufferAccess2 {
		list = append(list, 2)
	}
	if s.RobustImageAccess2 {
		list = append(list, 3)
	}
	if s.NullDescriptor {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceSamplerYCbCrConversionFeatures struct {
	SamplerYCbCrConversion bool
}
func (VkPhysicalDeviceSamplerYCbCrConversionFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceSamplerYCbCrConversionFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES
}
func (s VkPhysicalDeviceSamplerYCbCrConversionFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SamplerYCbCrConversion {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceScalarBlockLayoutFeatures struct {
	ScalarBlockLayout bool
}
func (VkPhysicalDeviceScalarBlockLayoutFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceScalarBlockLayoutFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES
}
func (s VkPhysicalDeviceScalarBlockLayoutFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ScalarBlockLayout {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSchedulingControlsFeaturesARM struct {
	SchedulingControls bool
}
func (VkPhysicalDeviceSchedulingControlsFeaturesARM) extension() string {
	return "VK_ARM_scheduling_controls"
}
func (VkPhysicalDeviceSchedulingControlsFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SCHEDULING_CONTROLS_FEATURES_ARM
}
func (s VkPhysicalDeviceSchedulingControlsFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SchedulingControls {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures struct {
	SeparateDepthStencilLayouts bool
}
func (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES
}
func (s VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SeparateDepthStencilLayouts {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV struct {
	ShaderFloat16VectorAtomics bool
}
func (VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV) extension() string {
	return "VK_NV_shader_atomic_float16_vector"
}
func (VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT16_VECTOR_FEATURES_NV
}
func (s VkPhysicalDeviceShaderAtomicFloat16VectorFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderFloat16VectorAtomics {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT struct {
	ShaderBufferFloat16Atomics bool
	ShaderBufferFloat16AtomicAdd bool
	ShaderBufferFloat16AtomicMinMax bool
	ShaderBufferFloat32AtomicMinMax bool
	ShaderBufferFloat64AtomicMinMax bool
	ShaderSharedFloat16Atomics bool
	ShaderSharedFloat16AtomicAdd bool
	ShaderSharedFloat16AtomicMinMax bool
	ShaderSharedFloat32AtomicMinMax bool
	ShaderSharedFloat64AtomicMinMax bool
	ShaderImageFloat32AtomicMinMax bool
	SparseImageFloat32AtomicMinMax bool
}
func (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) extension() string {
	return "VK_EXT_shader_atomic_float2"
}
func (VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 12)
	if s.ShaderBufferFloat16Atomics {
		list = append(list, 2)
	}
	if s.ShaderBufferFloat16AtomicAdd {
		list = append(list, 3)
	}
	if s.ShaderBufferFloat16AtomicMinMax {
		list = append(list, 4)
	}
	if s.ShaderBufferFloat32AtomicMinMax {
		list = append(list, 5)
	}
	if s.ShaderBufferFloat64AtomicMinMax {
		list = append(list, 6)
	}
	if s.ShaderSharedFloat16Atomics {
		list = append(list, 7)
	}
	if s.ShaderSharedFloat16AtomicAdd {
		list = append(list, 8)
	}
	if s.ShaderSharedFloat16AtomicMinMax {
		list = append(list, 9)
	}
	if s.ShaderSharedFloat32AtomicMinMax {
		list = append(list, 10)
	}
	if s.ShaderSharedFloat64AtomicMinMax {
		list = append(list, 11)
	}
	if s.ShaderImageFloat32AtomicMinMax {
		list = append(list, 12)
	}
	if s.SparseImageFloat32AtomicMinMax {
		list = append(list, 13)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicFloatFeaturesEXT struct {
	ShaderBufferFloat32Atomics bool
	ShaderBufferFloat32AtomicAdd bool
	ShaderBufferFloat64Atomics bool
	ShaderBufferFloat64AtomicAdd bool
	ShaderSharedFloat32Atomics bool
	ShaderSharedFloat32AtomicAdd bool
	ShaderSharedFloat64Atomics bool
	ShaderSharedFloat64AtomicAdd bool
	ShaderImageFloat32Atomics bool
	ShaderImageFloat32AtomicAdd bool
	SparseImageFloat32Atomics bool
	SparseImageFloat32AtomicAdd bool
}
func (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) extension() string {
	return "VK_EXT_shader_atomic_float"
}
func (VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderAtomicFloatFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 12)
	if s.ShaderBufferFloat32Atomics {
		list = append(list, 2)
	}
	if s.ShaderBufferFloat32AtomicAdd {
		list = append(list, 3)
	}
	if s.ShaderBufferFloat64Atomics {
		list = append(list, 4)
	}
	if s.ShaderBufferFloat64AtomicAdd {
		list = append(list, 5)
	}
	if s.ShaderSharedFloat32Atomics {
		list = append(list, 6)
	}
	if s.ShaderSharedFloat32AtomicAdd {
		list = append(list, 7)
	}
	if s.ShaderSharedFloat64Atomics {
		list = append(list, 8)
	}
	if s.ShaderSharedFloat64AtomicAdd {
		list = append(list, 9)
	}
	if s.ShaderImageFloat32Atomics {
		list = append(list, 10)
	}
	if s.ShaderImageFloat32AtomicAdd {
		list = append(list, 11)
	}
	if s.SparseImageFloat32Atomics {
		list = append(list, 12)
	}
	if s.SparseImageFloat32AtomicAdd {
		list = append(list, 13)
	}
	return list
}
type VkPhysicalDeviceShaderAtomicInt64Features struct {
	ShaderBufferInt64Atomics bool
	ShaderSharedInt64Atomics bool
}
func (VkPhysicalDeviceShaderAtomicInt64Features) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderAtomicInt64Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES
}
func (s VkPhysicalDeviceShaderAtomicInt64Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderBufferInt64Atomics {
		list = append(list, 2)
	}
	if s.ShaderSharedInt64Atomics {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderClockFeaturesKHR struct {
	ShaderSubgroupClock bool
	ShaderDeviceClock bool
}
func (VkPhysicalDeviceShaderClockFeaturesKHR) extension() string {
	return "VK_KHR_shader_clock"
}
func (VkPhysicalDeviceShaderClockFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderClockFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderSubgroupClock {
		list = append(list, 2)
	}
	if s.ShaderDeviceClock {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM struct {
	ShaderCoreBuiltins bool
}
func (VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) extension() string {
	return "VK_ARM_shader_core_builtins"
}
func (VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_BUILTINS_FEATURES_ARM
}
func (s VkPhysicalDeviceShaderCoreBuiltinsFeaturesARM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderCoreBuiltins {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures struct {
	ShaderDemoteToHelperInvocation bool
}
func (VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES
}
func (s VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderDemoteToHelperInvocation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderDrawParametersFeatures struct {
	ShaderDrawParameters bool
}
func (VkPhysicalDeviceShaderDrawParametersFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderDrawParametersFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES
}
func (s VkPhysicalDeviceShaderDrawParametersFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderDrawParameters {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD struct {
	ShaderEarlyAndLateFragmentTests bool
}
func (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) extension() string {
	return "VK_AMD_shader_early_and_late_fragment_tests"
}
func (VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD
}
func (s VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderEarlyAndLateFragmentTests {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderExpectAssumeFeatures struct {
	ShaderExpectAssume bool
}
func (VkPhysicalDeviceShaderExpectAssumeFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderExpectAssumeFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES
}
func (s VkPhysicalDeviceShaderExpectAssumeFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderExpectAssume {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderExpectAssumeFeaturesKHR struct {
	ShaderExpectAssume bool
}
func (VkPhysicalDeviceShaderExpectAssumeFeaturesKHR) extension() string {
	return "VK_KHR_shader_expect_assume"
}
func (VkPhysicalDeviceShaderExpectAssumeFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EXPECT_ASSUME_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderExpectAssumeFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderExpectAssume {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderFloat16Int8Features struct {
	ShaderFloat16 bool
	ShaderInt8 bool
}
func (VkPhysicalDeviceShaderFloat16Int8Features) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderFloat16Int8Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES
}
func (s VkPhysicalDeviceShaderFloat16Int8Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderFloat16 {
		list = append(list, 2)
	}
	if s.ShaderInt8 {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderFloatControls2Features struct {
	ShaderFloatControls2 bool
}
func (VkPhysicalDeviceShaderFloatControls2Features) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderFloatControls2Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES
}
func (s VkPhysicalDeviceShaderFloatControls2Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderFloatControls2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderFloatControls2FeaturesKHR struct {
	ShaderFloatControls2 bool
}
func (VkPhysicalDeviceShaderFloatControls2FeaturesKHR) extension() string {
	return "VK_KHR_shader_float_controls2"
}
func (VkPhysicalDeviceShaderFloatControls2FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT_CONTROLS_2_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderFloatControls2FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderFloatControls2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT struct {
	ShaderImageInt64Atomics bool
	SparseImageInt64Atomics bool
}
func (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) extension() string {
	return "VK_EXT_shader_image_atomic_int64"
}
func (VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderImageInt64Atomics {
		list = append(list, 2)
	}
	if s.SparseImageInt64Atomics {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderImageFootprintFeaturesNV struct {
	ImageFootprint bool
}
func (VkPhysicalDeviceShaderImageFootprintFeaturesNV) extension() string {
	return "VK_NV_shader_image_footprint"
}
func (VkPhysicalDeviceShaderImageFootprintFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV
}
func (s VkPhysicalDeviceShaderImageFootprintFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ImageFootprint {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderIntegerDotProductFeatures struct {
	ShaderIntegerDotProduct bool
}
func (VkPhysicalDeviceShaderIntegerDotProductFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderIntegerDotProductFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES
}
func (s VkPhysicalDeviceShaderIntegerDotProductFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderIntegerDotProduct {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL struct {
	ShaderIntegerFunctions2 bool
}
func (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) extension() string {
	return "VK_INTEL_shader_integer_functions2"
}
func (VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL
}
func (s VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderIntegerFunctions2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR struct {
	ShaderMaximalReconvergence bool
}
func (VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR) extension() string {
	return "VK_KHR_shader_maximal_reconvergence"
}
func (VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MAXIMAL_RECONVERGENCE_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderMaximalReconvergenceFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderMaximalReconvergence {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT struct {
	ShaderModuleIdentifier bool
}
func (VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) extension() string {
	return "VK_EXT_shader_module_identifier"
}
func (VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderModuleIdentifier {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderObjectFeaturesEXT struct {
	ShaderObject bool
}
func (VkPhysicalDeviceShaderObjectFeaturesEXT) extension() string {
	return "VK_EXT_shader_object"
}
func (VkPhysicalDeviceShaderObjectFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_OBJECT_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderObjectFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderObject {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderQuadControlFeaturesKHR struct {
	ShaderQuadControl bool
}
func (VkPhysicalDeviceShaderQuadControlFeaturesKHR) extension() string {
	return "VK_KHR_shader_quad_control"
}
func (VkPhysicalDeviceShaderQuadControlFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_QUAD_CONTROL_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderQuadControlFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderQuadControl {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR struct {
	ShaderRelaxedExtendedInstruction bool
}
func (VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR) extension() string {
	return "VK_KHR_shader_relaxed_extended_instruction"
}
func (VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_RELAXED_EXTENDED_INSTRUCTION_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderRelaxedExtendedInstructionFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderRelaxedExtendedInstruction {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT struct {
	ShaderReplicatedComposites bool
}
func (VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT) extension() string {
	return "VK_EXT_shader_replicated_composites"
}
func (VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_REPLICATED_COMPOSITES_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderReplicatedCompositesFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderReplicatedComposites {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderSMBuiltinsFeaturesNV struct {
	ShaderSMBuiltins bool
}
func (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) extension() string {
	return "VK_NV_shader_sm_builtins"
}
func (VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV
}
func (s VkPhysicalDeviceShaderSMBuiltinsFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderSMBuiltins {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures struct {
	ShaderSubgroupExtendedTypes bool
}
func (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES
}
func (s VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderSubgroupExtendedTypes {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupRotateFeatures struct {
	ShaderSubgroupRotate bool
	ShaderSubgroupRotateClustered bool
}
func (VkPhysicalDeviceShaderSubgroupRotateFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderSubgroupRotateFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES
}
func (s VkPhysicalDeviceShaderSubgroupRotateFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderSubgroupRotate {
		list = append(list, 2)
	}
	if s.ShaderSubgroupRotateClustered {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR struct {
	ShaderSubgroupRotate bool
	ShaderSubgroupRotateClustered bool
}
func (VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR) extension() string {
	return "VK_KHR_shader_subgroup_rotate"
}
func (VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_ROTATE_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderSubgroupRotateFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShaderSubgroupRotate {
		list = append(list, 2)
	}
	if s.ShaderSubgroupRotateClustered {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR struct {
	ShaderSubgroupUniformControlFlow bool
}
func (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) extension() string {
	return "VK_KHR_shader_subgroup_uniform_control_flow"
}
func (VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR
}
func (s VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderSubgroupUniformControlFlow {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderTerminateInvocationFeatures struct {
	ShaderTerminateInvocation bool
}
func (VkPhysicalDeviceShaderTerminateInvocationFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceShaderTerminateInvocationFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES
}
func (s VkPhysicalDeviceShaderTerminateInvocationFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderTerminateInvocation {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceShaderTileImageFeaturesEXT struct {
	ShaderTileImageColorReadAccess bool
	ShaderTileImageDepthReadAccess bool
	ShaderTileImageStencilReadAccess bool
}
func (VkPhysicalDeviceShaderTileImageFeaturesEXT) extension() string {
	return "VK_EXT_shader_tile_image"
}
func (VkPhysicalDeviceShaderTileImageFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TILE_IMAGE_FEATURES_EXT
}
func (s VkPhysicalDeviceShaderTileImageFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.ShaderTileImageColorReadAccess {
		list = append(list, 2)
	}
	if s.ShaderTileImageDepthReadAccess {
		list = append(list, 3)
	}
	if s.ShaderTileImageStencilReadAccess {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceShadingRateImageFeaturesNV struct {
	ShadingRateImage bool
	ShadingRateCoarseSampleOrder bool
}
func (VkPhysicalDeviceShadingRateImageFeaturesNV) extension() string {
	return "VK_NV_shading_rate_image"
}
func (VkPhysicalDeviceShadingRateImageFeaturesNV) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV
}
func (s VkPhysicalDeviceShadingRateImageFeaturesNV) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.ShadingRateImage {
		list = append(list, 2)
	}
	if s.ShadingRateCoarseSampleOrder {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceSubgroupSizeControlFeatures struct {
	SubgroupSizeControl bool
	ComputeFullSubgroups bool
}
func (VkPhysicalDeviceSubgroupSizeControlFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceSubgroupSizeControlFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES
}
func (s VkPhysicalDeviceSubgroupSizeControlFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.SubgroupSizeControl {
		list = append(list, 2)
	}
	if s.ComputeFullSubgroups {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT struct {
	SubpassMergeFeedback bool
}
func (VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) extension() string {
	return "VK_EXT_subpass_merge_feedback"
}
func (VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT
}
func (s VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SubpassMergeFeedback {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSubpassShadingFeaturesHUAWEI struct {
	SubpassShading bool
}
func (VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) extension() string {
	return "VK_HUAWEI_subpass_shading"
}
func (VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI
}
func (s VkPhysicalDeviceSubpassShadingFeaturesHUAWEI) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SubpassShading {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT struct {
	SwapchainMaintenance1 bool
}
func (VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) extension() string {
	return "VK_EXT_swapchain_maintenance1"
}
func (VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SWAPCHAIN_MAINTENANCE_1_FEATURES_EXT
}
func (s VkPhysicalDeviceSwapchainMaintenance1FeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.SwapchainMaintenance1 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceSynchronization2Features struct {
	Synchronization2 bool
}
func (VkPhysicalDeviceSynchronization2Features) extension() string {
	return ""
}
func (VkPhysicalDeviceSynchronization2Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES
}
func (s VkPhysicalDeviceSynchronization2Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.Synchronization2 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTextureCompressionASTCHDRFeatures struct {
	TextureCompressionASTC_HDR bool
}
func (VkPhysicalDeviceTextureCompressionASTCHDRFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceTextureCompressionASTCHDRFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES
}
func (s VkPhysicalDeviceTextureCompressionASTCHDRFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TextureCompressionASTC_HDR {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTilePropertiesFeaturesQCOM struct {
	TileProperties bool
}
func (VkPhysicalDeviceTilePropertiesFeaturesQCOM) extension() string {
	return "VK_QCOM_tile_properties"
}
func (VkPhysicalDeviceTilePropertiesFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM
}
func (s VkPhysicalDeviceTilePropertiesFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TileProperties {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTimelineSemaphoreFeatures struct {
	TimelineSemaphore bool
}
func (VkPhysicalDeviceTimelineSemaphoreFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceTimelineSemaphoreFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES
}
func (s VkPhysicalDeviceTimelineSemaphoreFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.TimelineSemaphore {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceTransformFeedbackFeaturesEXT struct {
	TransformFeedback bool
	GeometryStreams bool
}
func (VkPhysicalDeviceTransformFeedbackFeaturesEXT) extension() string {
	return "VK_EXT_transform_feedback"
}
func (VkPhysicalDeviceTransformFeedbackFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT
}
func (s VkPhysicalDeviceTransformFeedbackFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.TransformFeedback {
		list = append(list, 2)
	}
	if s.GeometryStreams {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceUniformBufferStandardLayoutFeatures struct {
	UniformBufferStandardLayout bool
}
func (VkPhysicalDeviceUniformBufferStandardLayoutFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceUniformBufferStandardLayoutFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES
}
func (s VkPhysicalDeviceUniformBufferStandardLayoutFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.UniformBufferStandardLayout {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVariablePointersFeatures struct {
	VariablePointersStorageBuffer bool
	VariablePointers bool
}
func (VkPhysicalDeviceVariablePointersFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceVariablePointersFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES
}
func (s VkPhysicalDeviceVariablePointersFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VariablePointersStorageBuffer {
		list = append(list, 2)
	}
	if s.VariablePointers {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeDivisorFeatures struct {
	VertexAttributeInstanceRateDivisor bool
	VertexAttributeInstanceRateZeroDivisor bool
}
func (VkPhysicalDeviceVertexAttributeDivisorFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceVertexAttributeDivisorFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES
}
func (s VkPhysicalDeviceVertexAttributeDivisorFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 2)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT struct {
	VertexAttributeInstanceRateDivisor bool
	VertexAttributeInstanceRateZeroDivisor bool
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) extension() string {
	return "VK_EXT_vertex_attribute_divisor"
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT
}
func (s VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 2)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR struct {
	VertexAttributeInstanceRateDivisor bool
	VertexAttributeInstanceRateZeroDivisor bool
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR) extension() string {
	return "VK_KHR_vertex_attribute_divisor"
}
func (VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_KHR
}
func (s VkPhysicalDeviceVertexAttributeDivisorFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 2)
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 2)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 3)
	}
	return list
}
type VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT struct {
	VertexAttributeRobustness bool
}
func (VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT) extension() string {
	return "VK_EXT_vertex_attribute_robustness"
}
func (VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_ROBUSTNESS_FEATURES_EXT
}
func (s VkPhysicalDeviceVertexAttributeRobustnessFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VertexAttributeRobustness {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT struct {
	VertexInputDynamicState bool
}
func (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) extension() string {
	return "VK_EXT_vertex_input_dynamic_state"
}
func (VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT
}
func (s VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VertexInputDynamicState {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoEncodeAV1FeaturesKHR struct {
	VideoEncodeAV1 bool
}
func (VkPhysicalDeviceVideoEncodeAV1FeaturesKHR) extension() string {
	return "VK_KHR_video_encode_av1"
}
func (VkPhysicalDeviceVideoEncodeAV1FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_AV1_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoEncodeAV1FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoEncodeAV1 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR struct {
	VideoEncodeQuantizationMap bool
}
func (VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR) extension() string {
	return "VK_KHR_video_encode_quantization_map"
}
func (VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_ENCODE_QUANTIZATION_MAP_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoEncodeQuantizationMapFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoEncodeQuantizationMap {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVideoMaintenance1FeaturesKHR struct {
	VideoMaintenance1 bool
}
func (VkPhysicalDeviceVideoMaintenance1FeaturesKHR) extension() string {
	return "VK_KHR_video_maintenance1"
}
func (VkPhysicalDeviceVideoMaintenance1FeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VIDEO_MAINTENANCE_1_FEATURES_KHR
}
func (s VkPhysicalDeviceVideoMaintenance1FeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.VideoMaintenance1 {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceVulkan11Features struct {
	StorageBuffer16BitAccess bool
	UniformAndStorageBuffer16BitAccess bool
	StoragePushConstant16 bool
	StorageInputOutput16 bool
	Multiview bool
	MultiviewGeometryShader bool
	MultiviewTessellationShader bool
	VariablePointersStorageBuffer bool
	VariablePointers bool
	ProtectedMemory bool
	SamplerYCbCrConversion bool
	ShaderDrawParameters bool
}
func (VkPhysicalDeviceVulkan11Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan11Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES
}
func (s VkPhysicalDeviceVulkan11Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 12)
	if s.StorageBuffer16BitAccess {
		list = append(list, 2)
	}
	if s.UniformAndStorageBuffer16BitAccess {
		list = append(list, 3)
	}
	if s.StoragePushConstant16 {
		list = append(list, 4)
	}
	if s.StorageInputOutput16 {
		list = append(list, 5)
	}
	if s.Multiview {
		list = append(list, 6)
	}
	if s.MultiviewGeometryShader {
		list = append(list, 7)
	}
	if s.MultiviewTessellationShader {
		list = append(list, 8)
	}
	if s.VariablePointersStorageBuffer {
		list = append(list, 9)
	}
	if s.VariablePointers {
		list = append(list, 10)
	}
	if s.ProtectedMemory {
		list = append(list, 11)
	}
	if s.SamplerYCbCrConversion {
		list = append(list, 12)
	}
	if s.ShaderDrawParameters {
		list = append(list, 13)
	}
	return list
}
type VkPhysicalDeviceVulkan12Features struct {
	SamplerMirrorClampToEdge bool
	DrawIndirectCount bool
	StorageBuffer8BitAccess bool
	UniformAndStorageBuffer8BitAccess bool
	StoragePushConstant8 bool
	ShaderBufferInt64Atomics bool
	ShaderSharedInt64Atomics bool
	ShaderFloat16 bool
	ShaderInt8 bool
	DescriptorIndexing bool
	ShaderInputAttachmentArrayDynamicIndexing bool
	ShaderUniformTexelBufferArrayDynamicIndexing bool
	ShaderStorageTexelBufferArrayDynamicIndexing bool
	ShaderUniformBufferArrayNonUniformIndexing bool
	ShaderSampledImageArrayNonUniformIndexing bool
	ShaderStorageBufferArrayNonUniformIndexing bool
	ShaderStorageImageArrayNonUniformIndexing bool
	ShaderInputAttachmentArrayNonUniformIndexing bool
	ShaderUniformTexelBufferArrayNonUniformIndexing bool
	ShaderStorageTexelBufferArrayNonUniformIndexing bool
	DescriptorBindingUniformBufferUpdateAfterBind bool
	DescriptorBindingSampledImageUpdateAfterBind bool
	DescriptorBindingStorageImageUpdateAfterBind bool
	DescriptorBindingStorageBufferUpdateAfterBind bool
	DescriptorBindingUniformTexelBufferUpdateAfterBind bool
	DescriptorBindingStorageTexelBufferUpdateAfterBind bool
	DescriptorBindingUpdateUnusedWhilePending bool
	DescriptorBindingPartiallyBound bool
	DescriptorBindingVariableDescriptorCount bool
	RuntimeDescriptorArray bool
	SamplerFilterMinmax bool
	ScalarBlockLayout bool
	ImagelessFramebuffer bool
	UniformBufferStandardLayout bool
	ShaderSubgroupExtendedTypes bool
	SeparateDepthStencilLayouts bool
	HostQueryReset bool
	TimelineSemaphore bool
	BufferDeviceAddress bool
	BufferDeviceAddressCaptureReplay bool
	BufferDeviceAddressMultiDevice bool
	VulkanMemoryModel bool
	VulkanMemoryModelDeviceScope bool
	VulkanMemoryModelAvailabilityVisibilityChains bool
	ShaderOutputViewportIndex bool
	ShaderOutputLayer bool
	SubgroupBroadcastDynamicId bool
}
func (VkPhysicalDeviceVulkan12Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan12Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES
}
func (s VkPhysicalDeviceVulkan12Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 47)
	if s.SamplerMirrorClampToEdge {
		list = append(list, 2)
	}
	if s.DrawIndirectCount {
		list = append(list, 3)
	}
	if s.StorageBuffer8BitAccess {
		list = append(list, 4)
	}
	if s.UniformAndStorageBuffer8BitAccess {
		list = append(list, 5)
	}
	if s.StoragePushConstant8 {
		list = append(list, 6)
	}
	if s.ShaderBufferInt64Atomics {
		list = append(list, 7)
	}
	if s.ShaderSharedInt64Atomics {
		list = append(list, 8)
	}
	if s.ShaderFloat16 {
		list = append(list, 9)
	}
	if s.ShaderInt8 {
		list = append(list, 10)
	}
	if s.DescriptorIndexing {
		list = append(list, 11)
	}
	if s.ShaderInputAttachmentArrayDynamicIndexing {
		list = append(list, 12)
	}
	if s.ShaderUniformTexelBufferArrayDynamicIndexing {
		list = append(list, 13)
	}
	if s.ShaderStorageTexelBufferArrayDynamicIndexing {
		list = append(list, 14)
	}
	if s.ShaderUniformBufferArrayNonUniformIndexing {
		list = append(list, 15)
	}
	if s.ShaderSampledImageArrayNonUniformIndexing {
		list = append(list, 16)
	}
	if s.ShaderStorageBufferArrayNonUniformIndexing {
		list = append(list, 17)
	}
	if s.ShaderStorageImageArrayNonUniformIndexing {
		list = append(list, 18)
	}
	if s.ShaderInputAttachmentArrayNonUniformIndexing {
		list = append(list, 19)
	}
	if s.ShaderUniformTexelBufferArrayNonUniformIndexing {
		list = append(list, 20)
	}
	if s.ShaderStorageTexelBufferArrayNonUniformIndexing {
		list = append(list, 21)
	}
	if s.DescriptorBindingUniformBufferUpdateAfterBind {
		list = append(list, 22)
	}
	if s.DescriptorBindingSampledImageUpdateAfterBind {
		list = append(list, 23)
	}
	if s.DescriptorBindingStorageImageUpdateAfterBind {
		list = append(list, 24)
	}
	if s.DescriptorBindingStorageBufferUpdateAfterBind {
		list = append(list, 25)
	}
	if s.DescriptorBindingUniformTexelBufferUpdateAfterBind {
		list = append(list, 26)
	}
	if s.DescriptorBindingStorageTexelBufferUpdateAfterBind {
		list = append(list, 27)
	}
	if s.DescriptorBindingUpdateUnusedWhilePending {
		list = append(list, 28)
	}
	if s.DescriptorBindingPartiallyBound {
		list = append(list, 29)
	}
	if s.DescriptorBindingVariableDescriptorCount {
		list = append(list, 30)
	}
	if s.RuntimeDescriptorArray {
		list = append(list, 31)
	}
	if s.SamplerFilterMinmax {
		list = append(list, 32)
	}
	if s.ScalarBlockLayout {
		list = append(list, 33)
	}
	if s.ImagelessFramebuffer {
		list = append(list, 34)
	}
	if s.UniformBufferStandardLayout {
		list = append(list, 35)
	}
	if s.ShaderSubgroupExtendedTypes {
		list = append(list, 36)
	}
	if s.SeparateDepthStencilLayouts {
		list = append(list, 37)
	}
	if s.HostQueryReset {
		list = append(list, 38)
	}
	if s.TimelineSemaphore {
		list = append(list, 39)
	}
	if s.BufferDeviceAddress {
		list = append(list, 40)
	}
	if s.BufferDeviceAddressCaptureReplay {
		list = append(list, 41)
	}
	if s.BufferDeviceAddressMultiDevice {
		list = append(list, 42)
	}
	if s.VulkanMemoryModel {
		list = append(list, 43)
	}
	if s.VulkanMemoryModelDeviceScope {
		list = append(list, 44)
	}
	if s.VulkanMemoryModelAvailabilityVisibilityChains {
		list = append(list, 45)
	}
	if s.ShaderOutputViewportIndex {
		list = append(list, 46)
	}
	if s.ShaderOutputLayer {
		list = append(list, 47)
	}
	if s.SubgroupBroadcastDynamicId {
		list = append(list, 48)
	}
	return list
}
type VkPhysicalDeviceVulkan13Features struct {
	RobustImageAccess bool
	InlineUniformBlock bool
	DescriptorBindingInlineUniformBlockUpdateAfterBind bool
	PipelineCreationCacheControl bool
	PrivateData bool
	ShaderDemoteToHelperInvocation bool
	ShaderTerminateInvocation bool
	SubgroupSizeControl bool
	ComputeFullSubgroups bool
	Synchronization2 bool
	TextureCompressionASTC_HDR bool
	ShaderZeroInitializeWorkgroupMemory bool
	DynamicRendering bool
	ShaderIntegerDotProduct bool
	Maintenance4 bool
}
func (VkPhysicalDeviceVulkan13Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan13Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES
}
func (s VkPhysicalDeviceVulkan13Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 15)
	if s.RobustImageAccess {
		list = append(list, 2)
	}
	if s.InlineUniformBlock {
		list = append(list, 3)
	}
	if s.DescriptorBindingInlineUniformBlockUpdateAfterBind {
		list = append(list, 4)
	}
	if s.PipelineCreationCacheControl {
		list = append(list, 5)
	}
	if s.PrivateData {
		list = append(list, 6)
	}
	if s.ShaderDemoteToHelperInvocation {
		list = append(list, 7)
	}
	if s.ShaderTerminateInvocation {
		list = append(list, 8)
	}
	if s.SubgroupSizeControl {
		list = append(list, 9)
	}
	if s.ComputeFullSubgroups {
		list = append(list, 10)
	}
	if s.Synchronization2 {
		list = append(list, 11)
	}
	if s.TextureCompressionASTC_HDR {
		list = append(list, 12)
	}
	if s.ShaderZeroInitializeWorkgroupMemory {
		list = append(list, 13)
	}
	if s.DynamicRendering {
		list = append(list, 14)
	}
	if s.ShaderIntegerDotProduct {
		list = append(list, 15)
	}
	if s.Maintenance4 {
		list = append(list, 16)
	}
	return list
}
type VkPhysicalDeviceVulkan14Features struct {
	GlobalPriorityQuery bool
	ShaderSubgroupRotate bool
	ShaderSubgroupRotateClustered bool
	ShaderFloatControls2 bool
	ShaderExpectAssume bool
	RectangularLines bool
	BresenhamLines bool
	SmoothLines bool
	StippledRectangularLines bool
	StippledBresenhamLines bool
	StippledSmoothLines bool
	VertexAttributeInstanceRateDivisor bool
	VertexAttributeInstanceRateZeroDivisor bool
	IndexTypeUint8 bool
	DynamicRenderingLocalRead bool
	Maintenance5 bool
	Maintenance6 bool
	PipelineProtectedAccess bool
	PipelineRobustness bool
	HostImageCopy bool
	PushDescriptor bool
}
func (VkPhysicalDeviceVulkan14Features) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkan14Features) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_4_FEATURES
}
func (s VkPhysicalDeviceVulkan14Features) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 21)
	if s.GlobalPriorityQuery {
		list = append(list, 2)
	}
	if s.ShaderSubgroupRotate {
		list = append(list, 3)
	}
	if s.ShaderSubgroupRotateClustered {
		list = append(list, 4)
	}
	if s.ShaderFloatControls2 {
		list = append(list, 5)
	}
	if s.ShaderExpectAssume {
		list = append(list, 6)
	}
	if s.RectangularLines {
		list = append(list, 7)
	}
	if s.BresenhamLines {
		list = append(list, 8)
	}
	if s.SmoothLines {
		list = append(list, 9)
	}
	if s.StippledRectangularLines {
		list = append(list, 10)
	}
	if s.StippledBresenhamLines {
		list = append(list, 11)
	}
	if s.StippledSmoothLines {
		list = append(list, 12)
	}
	if s.VertexAttributeInstanceRateDivisor {
		list = append(list, 13)
	}
	if s.VertexAttributeInstanceRateZeroDivisor {
		list = append(list, 14)
	}
	if s.IndexTypeUint8 {
		list = append(list, 15)
	}
	if s.DynamicRenderingLocalRead {
		list = append(list, 16)
	}
	if s.Maintenance5 {
		list = append(list, 17)
	}
	if s.Maintenance6 {
		list = append(list, 18)
	}
	if s.PipelineProtectedAccess {
		list = append(list, 19)
	}
	if s.PipelineRobustness {
		list = append(list, 20)
	}
	if s.HostImageCopy {
		list = append(list, 21)
	}
	if s.PushDescriptor {
		list = append(list, 22)
	}
	return list
}
type VkPhysicalDeviceVulkanMemoryModelFeatures struct {
	VulkanMemoryModel bool
	VulkanMemoryModelDeviceScope bool
	VulkanMemoryModelAvailabilityVisibilityChains bool
}
func (VkPhysicalDeviceVulkanMemoryModelFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceVulkanMemoryModelFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES
}
func (s VkPhysicalDeviceVulkanMemoryModelFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 3)
	if s.VulkanMemoryModel {
		list = append(list, 2)
	}
	if s.VulkanMemoryModelDeviceScope {
		list = append(list, 3)
	}
	if s.VulkanMemoryModelAvailabilityVisibilityChains {
		list = append(list, 4)
	}
	return list
}
type VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR struct {
	WorkgroupMemoryExplicitLayout bool
	WorkgroupMemoryExplicitLayoutScalarBlockLayout bool
	WorkgroupMemoryExplicitLayout8BitAccess bool
	WorkgroupMemoryExplicitLayout16BitAccess bool
}
func (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) extension() string {
	return "VK_KHR_workgroup_memory_explicit_layout"
}
func (VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR
}
func (s VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 4)
	if s.WorkgroupMemoryExplicitLayout {
		list = append(list, 2)
	}
	if s.WorkgroupMemoryExplicitLayoutScalarBlockLayout {
		list = append(list, 3)
	}
	if s.WorkgroupMemoryExplicitLayout8BitAccess {
		list = append(list, 4)
	}
	if s.WorkgroupMemoryExplicitLayout16BitAccess {
		list = append(list, 5)
	}
	return list
}
type VkPhysicalDeviceYCbCrDegammaFeaturesQCOM struct {
	YCbCrDegamma bool
}
func (VkPhysicalDeviceYCbCrDegammaFeaturesQCOM) extension() string {
	return "VK_QCOM_ycbcr_degamma"
}
func (VkPhysicalDeviceYCbCrDegammaFeaturesQCOM) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_DEGAMMA_FEATURES_QCOM
}
func (s VkPhysicalDeviceYCbCrDegammaFeaturesQCOM) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.YCbCrDegamma {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceYCbCrImageArraysFeaturesEXT struct {
	YCbCrImageArrays bool
}
func (VkPhysicalDeviceYCbCrImageArraysFeaturesEXT) extension() string {
	return "VK_EXT_ycbcr_image_arrays"
}
func (VkPhysicalDeviceYCbCrImageArraysFeaturesEXT) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT
}
func (s VkPhysicalDeviceYCbCrImageArraysFeaturesEXT) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.YCbCrImageArrays {
		list = append(list, 2)
	}
	return list
}
type VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures struct {
	ShaderZeroInitializeWorkgroupMemory bool
}
func (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) extension() string {
	return ""
}
func (VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) sType() C.VkStructureType {
	return vk.STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES
}
func (s VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures) enabledList() []C.size_t {
	list := make([]C.size_t, 0, 1)
	if s.ShaderZeroInitializeWorkgroupMemory {
		list = append(list, 2)
	}
	return list
}
