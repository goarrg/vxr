//go:build ignore
// +build ignore

/*
Copyright 2025 The goARRG Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package main

import (
	"bufio"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"goarrg.com/toolchain/golang"
	"golang.org/x/tools/go/packages"
)

func mapFile(file string, fns map[string]struct{}) {
	f, err := os.Open(file)
	if err != nil {
		panic(err)
	}

	defer f.Close()
	scanner := bufio.NewScanner(f)

	for scanner.Scan() {
		s := strings.TrimSpace(scanner.Text())

		if i := strings.Index(s, "VK_PROC_DEVICE(vk"); i >= 0 && !strings.HasPrefix(s, "#") && !strings.HasPrefix(s, "//") {
			fn := s[i : strings.IndexRune(s[i:], ')')+i+1]
			fns[fn] = struct{}{}
			continue
		}
		if i := strings.Index(s, "VK_TRY_PROC_DEVICE(vk"); i >= 0 && !strings.HasPrefix(s, "#") && !strings.HasPrefix(s, "//") {
			fn := s[i : strings.IndexRune(s[i:], ')')+i+1]
			fns[fn] = struct{}{}
			continue
		}
		if i := strings.Index(s, "VK_DEBUG_PROC_DEVICE(vk"); i >= 0 && !strings.HasPrefix(s, "#") && !strings.HasPrefix(s, "//") {
			fn := s[i : strings.IndexRune(s[i:], ')')+i+1]
			fns[fn] = struct{}{}
			continue
		}
	}
}

func main() {
	fns := make(map[string]struct{})

	p := golang.CallersPackage(packages.NeedModule | packages.NeedName)
	dir := filepath.Join(p.Module.Dir, strings.TrimPrefix(p.PkgPath, p.Module.Path))

	filepath.WalkDir(dir[:strings.Index(dir, "vk")], func(path string, entry fs.DirEntry, err error) error {
		if err != nil {
			return err
		}
		if entry.Type().IsRegular() {
			if strings.HasSuffix(entry.Name(), ".h") || strings.HasSuffix(entry.Name(), ".hpp") ||
				strings.HasSuffix(entry.Name(), ".c") || strings.HasSuffix(entry.Name(), ".cpp") {
				if entry.Name() == "device_vkfns.inc" {
					return nil
				}

				mapFile(path, fns)
			}
		}
		return nil
	})

	sortedfns := make([]string, 0, len(fns))

	for k := range fns {
		i := sort.SearchStrings(sortedfns, k)
		sortedfns = append(sortedfns[:i+1], sortedfns[i:]...)
		sortedfns[i] = k
	}

	out, err := os.Create(filepath.Join(dir, "device_vkfns.inc"))
	if err != nil {
		panic(err)
	}

	defer out.Close()
	w := bufio.NewWriter(out)

	if _, err := w.WriteString("// go run device_vkfns_gen.go\n// Code generated by the command above; DO NOT EDIT.\n\n"); err != nil {
		panic(err)
	}

	for _, fn := range sortedfns {
		if _, err := w.WriteString(fn + "\n"); err != nil {
			panic(err)
		}
	}

	if err := w.Flush(); err != nil {
		panic(err)
	}
}
