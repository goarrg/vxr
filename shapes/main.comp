/*
Copyright 2025 The goARRG Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#version 450
#pragma shader_stage(compute)

#define M_PI 3.1415926535897932384626433832795
#define M_SQRT2 1.4142135623730950488016887242096

#extension GL_ARB_shading_language_include : enable

layout(local_size_x_id = 0, local_size_y_id = 1, local_size_z_id = 2) in;

#include "common.glsl"

void main() {
	const uint oID = gl_GlobalInvocationID.x;
	if (oID >= numObjects) {
		return;
	}
	const object obj = objects[oID];
	switch (obj.polygonMode) {
		case POLYGON_MODE_REGULAR_CONCAVE: {
			if (obj.triangleCount == 3) {
				triangles[obj.triangleOffset] = triangle(oID, vec2[](vec2(0.0, -0.5), vec2(0.43301, 0.25), vec2(-0.43301, 0.25)));
			} else if (obj.triangleCount == 4) {
				const float d = 0.25 * M_SQRT2;
				triangles[obj.triangleOffset] = triangle(oID, vec2[](vec2(-d, -d), vec2(d, -d), vec2(d, d)));
				triangles[obj.triangleOffset + 1] = triangle(oID, vec2[](vec2(d, d), vec2(-d, d), vec2(-d, -d)));
			} else {
				switch (obj.triangleCount) {
					case 1: {
						triangles[obj.triangleOffset] = triangle(oID, vec2[](vec2(0.0, -0.5), vec2(0.5, 0.5), vec2(-0.5, 0.5)));
						break;
					}

					case 2: {
						triangles[obj.triangleOffset] = triangle(oID, vec2[](vec2(-0.5, -0.5), vec2(0.5, -0.5), vec2(0.5, 0.5)));
						triangles[obj.triangleOffset + 1] = triangle(
							oID, vec2[](vec2(0.5, 0.5), vec2(-0.5, 0.5), vec2(-0.5, -0.5)));
						break;
					}

					default: {
						const float angle = 2.0 * M_PI * (float(0) / float(obj.triangleCount));
						vec2 lastVertex = vec2(sin(angle), -cos(angle)) * 0.5;
						for (uint i = 0; i < obj.triangleCount; i++) {
							const float angle = 2.0 * M_PI * (float(i + 1) / float(obj.triangleCount));
							const vec2 nextVertex = vec2(sin(angle), -cos(angle)) * 0.5;
							triangles[obj.triangleOffset + i] = triangle(oID, vec2[](vec2(0), lastVertex, nextVertex));
							lastVertex = nextVertex;
						}
						break;
					}
				}
			}
			break;
		}

		case POLYGON_MODE_REGULAR_STAR: {
			const float angle = 2.0 * M_PI * (float(-0.5) / float(obj.triangleCount));
			vec2 lastVertex = vec2(sin(angle), -cos(angle)) * (0.5 * obj.parameter1);
			for (uint i = 0; i < obj.triangleCount; i++) {
				const float angle = 2.0 * M_PI * (float(i) + 0.5) / float(obj.triangleCount);
				const vec2 nextVertex = vec2(sin(angle), -cos(angle)) * (0.5 * obj.parameter1);
				triangles[obj.triangleOffset + (i * 2)] = triangle(oID, vec2[](vec2(0), lastVertex, nextVertex));

				const float starAngle = 2.0 * M_PI * (float(i) / float(obj.triangleCount));
				const vec2 starVertex = vec2(sin(starAngle), -cos(starAngle)) * 0.5;
				triangles[obj.triangleOffset + (i * 2) + 1] = triangle(oID, vec2[](nextVertex, lastVertex, starVertex));

				lastVertex = nextVertex;
			}
			break;
		}
	}
}
